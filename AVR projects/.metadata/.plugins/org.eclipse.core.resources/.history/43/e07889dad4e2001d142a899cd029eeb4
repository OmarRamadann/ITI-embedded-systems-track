/*
 * Timer0_program.c
 *
 *  Created on: Apr 1, 2023
 *      Author: hp
 */


//#include "../../../Common/STD_types.h"
//#include "Timer0_config.h"


//#include "Timer0_interface.h"
//#include "../../Ext_INT/INT1/INT1_private.h"
#include <math.h>
#include "Timer0_private.h"
#include "Timer0_register.h"
#include "Timer0_config.h"
#include "../../../MCAL/DIO/DIO_interface.h"
#include "../../../HAL/LCD_Driver/LCD_interface.h"
//#include "Timer0_interface.h"
//#define TIMER0_Interrupt 0
//#if TIMER0_Usage==TIMER0_Interrupt
//#include "../../../Common/Bit_Math.h"
//void (*Timer0_CM_ptr_fn)(void)=Null;
//void  TIMER0_voidInit(Timer_Prop* Timer1,ModesTimer_Prop* NormalT);
//Lcd_Info *lcd1={DIO_GroupD,DIO_GroupD,DIO_GroupD,Pin0,Pin1,Pin2,DIO_GroupA};
//void (*Timer_ptr_fn_Normal)(void)=Null;
void (*Timer_ptr_fn_CM)(void)=Null;
void (*Timer_ptr_fn_Normal)(void)=Null;



void TIMER0_voidInit(Timer_Prop *Timer1,ModesTimer_Prop *NormalT)
{
	if (Timer1->Mode==Normal)
	{
		Clr_Bit(TCCR0,WGM00);
		Clr_Bit(TCCR0,WGM01);
		Calc_Preload_Value(Timer1, NormalT);
		TCNT0=NormalT->TCNT_First_Value;
		//TIMER_CLKSelect(clk_scaler,Clk);
		//TCNT0=Preload_Value;
	}

 else if( Timer1->Mode==CTC )
 {
	 Clr_Bit(TCCR0,WGM00);
	 Set_Bit(TCCR0,WGM01);
	 Calc_CompMatch_Value(Timer1, NormalT);
	 OCR0=NormalT->OCR_Value;
 }
 else if( Timer1->Mode==FastPWM )
 {
	 Set_Bit(TCCR0,WGM00);
	 Set_Bit(TCCR0,WGM01);
 }
 else if( Timer1->Mode==Phase_Correct )
 {
	 Set_Bit(TCCR0,WGM00);
	 Clr_Bit(TCCR0,WGM01);
 }

}










f32 TIMER_CLKSelect(Timer_Prop *Timer_0)

//	if (clk_scaler==NoClk)
//	{
//		Clr_Bit(TCCR0_Bits,CS00);
//		Clr_Bit(TCCR0_Bits,CS01);
//		Clr_Bit(TCCR0_Bits,CS02);
//		return 0;
//	}
{

	f32 x=0;
	 if (Timer_0->Clk_Scaler==Clk1)
	{

		Set_Bit(TCCR0,CS00);
		Clr_Bit(TCCR0,CS01);
		Clr_Bit(TCCR0,CS02);
		x=(Timer_0->Clk)/(f32)1;
//		DIO_ErrStateSetPinValue(DIO_GroupC, Pin4, DIO_High);

		//Normal_Timer->Prescld_Clk= (f32)Timer0->Clk/1;
//		 (Timer_0->Clk_Scaler)=(Timer_0->Clk)/(f32)1;
		//return 8;
	}
	else if (Timer_0->Clk_Scaler==Clk8)
	{
		Set_Bit(TCCR0,CS01);
		Clr_Bit(TCCR0,CS00);
		Clr_Bit(TCCR0,CS02);
//		DIO_ErrStateSetPinValue(DIO_GroupC, Pin4, DIO_High);

//		*ptr=(Timer_0->Clk)/(f32)8;
		x=(Timer_0->Clk)/(f32)8;
//		return (Timer_0->Clk)/(f32)8;
		//return 1;
	}
	else if (Timer_0->Clk_Scaler==Clk64)
	{
		Set_Bit(TCCR0,CS01);
		Set_Bit(TCCR0,CS00);
		Clr_Bit(TCCR0,CS02);
//		DIO_ErrStateSetPinValue(DIO_GroupC, Pin4, DIO_High);
		x=(Timer_0->Clk)/(f32)64;
		//return (f32)(Timer_0->Clk)/64.0;
	}
//		DIO_ErrStateSetPinValue(DIO_GroupC, Pin4, DIO_High);

return x;
}


////
void Calc_Preload_Value(Timer_Prop *Timer_0,ModesTimer_Prop*Normal_Timer)
{
//	f32*ptr=Null;

	Normal_Timer->Prescld_Clk=TIMER_CLKSelect(Timer_0);//Mhz
//	Lcd_VoidSendNumber(Normal_Timer->Prescld_Clk, lcd1);
//	if(Normal_Timer->Prescld_Clk==0.125){
//	DIO_ErrStateSetPinValue(DIO_GroupC, Pin4, DIO_High);
//	}
	Normal_Timer->Tick_Time=1/Normal_Timer->Prescld_Clk;//uSec
//		if(Normal_Timer->Tick_Time==8){
//		DIO_ErrStateSetPinValue(DIO_GroupC, Pin4, DIO_High);
//		}
	//Normal_Timer->count=pow(2.0,Timer_0->Resolution);calculated by user
	Normal_Timer->Time_OF=Normal_Timer->Tick_Time*Timer_0->Count_Max;//uSec
//	if(Normal_Timer->Time_OF==2048){
//			DIO_ErrStateSetPinValue(DIO_GroupC, Pin4, DIO_High);
//			}

	Normal_Timer->Req_Count=(Timer_0->Req_Time/Normal_Timer->Time_OF);//req_time in uSec
//		if(Normal_Timer->Req_Count==489){
//				DIO_ErrStateSetPinValue(DIO_GroupC, Pin4, DIO_High);
//				}
	Normal_Timer->PreLod_Value=(Normal_Timer->Req_Count-(u16)Normal_Timer->Req_Count)*Timer_0->Count_Max;
//	if(Normal_Timer->PreLod_Value==72){
//					DIO_ErrStateSetPinValue(DIO_GroupC, Pin4, DIO_High);
//					}
	Normal_Timer->TCNT_Value=Timer_0->Count_Max-round(Normal_Timer->PreLod_Value);
//	if(Normal_Timer->TCNT_Value==184){
//						DIO_ErrStateSetPinValue(DIO_GroupC, Pin4, DIO_High);
//						}


}


void Calc_CompMatch_Value(Timer_Prop *Timer_0,ModesTimer_Prop*Normal_Timer)//give this func the desired overflow time to calc OCR value
{
	Calc_Preload_Value(Timer_0, Normal_Timer);
	Normal_Timer->OCR_Value=Timer_0->New_TOF/Normal_Timer->Tick_Time; //both in uSec
}

//#if (Timer_Usage==Interrupt)

void Timer_Enable(Timer_Prop *Timer_0)
{
	if(Timer_0->Mode ==Normal)
	{
		Set_Bit(SREG,7);
		Set_Bit(TIMSK,0);




}

	else if(Timer_0->Mode ==CTC)
		{
			Set_Bit(SREG,7);
			Set_Bit(TIMSK,1);

		}
}
#if Timer_Usage==Interrupt_Norma
	void TIMER0_voidSetCallBackfn(void(*ptr)(void))

			{

				Timer_ptr_fn_Normal=ptr;
			//	Timer_ptr_fn_CM=ptr;
			}
	void __vector_11(void)__attribute__((signal));
	void __vector_11(void)
		{

			if (Timer_ptr_fn_Normal!=Null)
			{
				Timer_ptr_fn_Normal();
			}
		}


#elif Timer_Usage ==Interrupt_CTC

void TIMER0_voidSetCallBackfn(void(*ptr)(void))

		{

//			Timer_ptr_fn_Normal=ptr;
			Timer_ptr_fn_CM=ptr;
		}
void __vector_10(void)__attribute__((signal));
void __vector_10(void)
	{

		if (Timer_ptr_fn_CM!=Null)
		{
			Timer_ptr_fn_CM();
		}
	}

#endif

#if (Timer_Usage==Polling)

u8 Check_Flag(Timer_Prop *Timer_0)
{
	if(Timer_0->Mode ==Normal)
	{
		return Get_Bit(TIFR,0);
		Set_Bit(TIFR,0);

	}
	else if(Timer_0->Mode ==CTC)
		{
		return Get_Bit(TIFR,1);
		Set_Bit(TIFR,1);
		}
}

#endif

//void __vector_11(void)
//				{
//
//					if (Timer_ptr_fn_Normal!=Null)
//					{
//						Timer_ptr_fn_Normal();
//					}
//				}


//#if ((Timer_Usage==Interrupt))

//


//#endif
