
SPI_2ndMC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002eee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  00002eee  00002f82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800194  00800194  000030b6  2**0
                  ALLOC
  3 .stab         00003204  00000000  00000000  000030b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002df0  00000000  00000000  000062bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000922c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  000093ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000b40e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000c57e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000d580  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000d720  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000d9e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e28f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 15 08 	jmp	0x102a	; 0x102a <__vector_2>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__vector_10>
      2c:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__vector_11>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__floatunsisf+0xba>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ee ee       	ldi	r30, 0xEE	; 238
     162:	fe e2       	ldi	r31, 0x2E	; 46
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a4 39       	cpi	r26, 0x94	; 148
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a4 e9       	ldi	r26, 0x94	; 148
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ab 39       	cpi	r26, 0x9B	; 155
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 be 14 	call	0x297c	; 0x297c <main>
     184:	0c 94 75 17 	jmp	0x2eea	; 0x2eea <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 c6 03 	call	0x78c	; 0x78c <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 26 04 	call	0x84c	; 0x84c <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 26 04 	call	0x84c	; 0x84c <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	a0 e6       	ldi	r26, 0x60	; 96
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 ef 14 	jmp	0x29de	; 0x29de <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 ef 14 	jmp	0x29de	; 0x29de <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 42 05 	call	0xa84	; 0xa84 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	80 e6       	ldi	r24, 0x60	; 96
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 42 05 	call	0xa84	; 0xa84 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <__epilogue_restores__>

0000072c <__gtsf2>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 ef 14 	jmp	0x29de	; 0x29de <__prologue_saves__+0x18>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	89 e0       	ldi	r24, 0x09	; 9
     74a:	e8 2e       	mov	r14, r24
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     76c:	89 85       	ldd	r24, Y+9	; 0x09
     76e:	82 30       	cpi	r24, 0x02	; 2
     770:	40 f0       	brcs	.+16     	; 0x782 <__gtsf2+0x56>
     772:	89 89       	ldd	r24, Y+17	; 0x11
     774:	82 30       	cpi	r24, 0x02	; 2
     776:	28 f0       	brcs	.+10     	; 0x782 <__gtsf2+0x56>
     778:	c7 01       	movw	r24, r14
     77a:	b8 01       	movw	r22, r16
     77c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fpcmp_parts_f>
     780:	01 c0       	rjmp	.+2      	; 0x784 <__gtsf2+0x58>
     782:	8f ef       	ldi	r24, 0xFF	; 255
     784:	68 96       	adiw	r28, 0x18	; 24
     786:	e6 e0       	ldi	r30, 0x06	; 6
     788:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__epilogue_restores__+0x18>

0000078c <__gesf2>:
     78c:	a8 e1       	ldi	r26, 0x18	; 24
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	ec ec       	ldi	r30, 0xCC	; 204
     792:	f3 e0       	ldi	r31, 0x03	; 3
     794:	0c 94 ef 14 	jmp	0x29de	; 0x29de <__prologue_saves__+0x18>
     798:	69 83       	std	Y+1, r22	; 0x01
     79a:	7a 83       	std	Y+2, r23	; 0x02
     79c:	8b 83       	std	Y+3, r24	; 0x03
     79e:	9c 83       	std	Y+4, r25	; 0x04
     7a0:	2d 83       	std	Y+5, r18	; 0x05
     7a2:	3e 83       	std	Y+6, r19	; 0x06
     7a4:	4f 83       	std	Y+7, r20	; 0x07
     7a6:	58 87       	std	Y+8, r21	; 0x08
     7a8:	89 e0       	ldi	r24, 0x09	; 9
     7aa:	e8 2e       	mov	r14, r24
     7ac:	f1 2c       	mov	r15, r1
     7ae:	ec 0e       	add	r14, r28
     7b0:	fd 1e       	adc	r15, r29
     7b2:	ce 01       	movw	r24, r28
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	b7 01       	movw	r22, r14
     7b8:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     7bc:	8e 01       	movw	r16, r28
     7be:	0f 5e       	subi	r16, 0xEF	; 239
     7c0:	1f 4f       	sbci	r17, 0xFF	; 255
     7c2:	ce 01       	movw	r24, r28
     7c4:	05 96       	adiw	r24, 0x05	; 5
     7c6:	b8 01       	movw	r22, r16
     7c8:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     7cc:	89 85       	ldd	r24, Y+9	; 0x09
     7ce:	82 30       	cpi	r24, 0x02	; 2
     7d0:	40 f0       	brcs	.+16     	; 0x7e2 <__gesf2+0x56>
     7d2:	89 89       	ldd	r24, Y+17	; 0x11
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	28 f0       	brcs	.+10     	; 0x7e2 <__gesf2+0x56>
     7d8:	c7 01       	movw	r24, r14
     7da:	b8 01       	movw	r22, r16
     7dc:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fpcmp_parts_f>
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <__gesf2+0x58>
     7e2:	8f ef       	ldi	r24, 0xFF	; 255
     7e4:	68 96       	adiw	r28, 0x18	; 24
     7e6:	e6 e0       	ldi	r30, 0x06	; 6
     7e8:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__epilogue_restores__+0x18>

000007ec <__ltsf2>:
     7ec:	a8 e1       	ldi	r26, 0x18	; 24
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	ec ef       	ldi	r30, 0xFC	; 252
     7f2:	f3 e0       	ldi	r31, 0x03	; 3
     7f4:	0c 94 ef 14 	jmp	0x29de	; 0x29de <__prologue_saves__+0x18>
     7f8:	69 83       	std	Y+1, r22	; 0x01
     7fa:	7a 83       	std	Y+2, r23	; 0x02
     7fc:	8b 83       	std	Y+3, r24	; 0x03
     7fe:	9c 83       	std	Y+4, r25	; 0x04
     800:	2d 83       	std	Y+5, r18	; 0x05
     802:	3e 83       	std	Y+6, r19	; 0x06
     804:	4f 83       	std	Y+7, r20	; 0x07
     806:	58 87       	std	Y+8, r21	; 0x08
     808:	89 e0       	ldi	r24, 0x09	; 9
     80a:	e8 2e       	mov	r14, r24
     80c:	f1 2c       	mov	r15, r1
     80e:	ec 0e       	add	r14, r28
     810:	fd 1e       	adc	r15, r29
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	b7 01       	movw	r22, r14
     818:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     81c:	8e 01       	movw	r16, r28
     81e:	0f 5e       	subi	r16, 0xEF	; 239
     820:	1f 4f       	sbci	r17, 0xFF	; 255
     822:	ce 01       	movw	r24, r28
     824:	05 96       	adiw	r24, 0x05	; 5
     826:	b8 01       	movw	r22, r16
     828:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     82c:	89 85       	ldd	r24, Y+9	; 0x09
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	40 f0       	brcs	.+16     	; 0x842 <__ltsf2+0x56>
     832:	89 89       	ldd	r24, Y+17	; 0x11
     834:	82 30       	cpi	r24, 0x02	; 2
     836:	28 f0       	brcs	.+10     	; 0x842 <__ltsf2+0x56>
     838:	c7 01       	movw	r24, r14
     83a:	b8 01       	movw	r22, r16
     83c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fpcmp_parts_f>
     840:	01 c0       	rjmp	.+2      	; 0x844 <__ltsf2+0x58>
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	68 96       	adiw	r28, 0x18	; 24
     846:	e6 e0       	ldi	r30, 0x06	; 6
     848:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__epilogue_restores__+0x18>

0000084c <__fixsfsi>:
     84c:	ac e0       	ldi	r26, 0x0C	; 12
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	ec e2       	ldi	r30, 0x2C	; 44
     852:	f4 e0       	ldi	r31, 0x04	; 4
     854:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <__prologue_saves__+0x20>
     858:	69 83       	std	Y+1, r22	; 0x01
     85a:	7a 83       	std	Y+2, r23	; 0x02
     85c:	8b 83       	std	Y+3, r24	; 0x03
     85e:	9c 83       	std	Y+4, r25	; 0x04
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	be 01       	movw	r22, r28
     866:	6b 5f       	subi	r22, 0xFB	; 251
     868:	7f 4f       	sbci	r23, 0xFF	; 255
     86a:	0e 94 17 06 	call	0xc2e	; 0xc2e <__unpack_f>
     86e:	8d 81       	ldd	r24, Y+5	; 0x05
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	61 f1       	breq	.+88     	; 0x8cc <__stack+0x6d>
     874:	82 30       	cpi	r24, 0x02	; 2
     876:	50 f1       	brcs	.+84     	; 0x8cc <__stack+0x6d>
     878:	84 30       	cpi	r24, 0x04	; 4
     87a:	21 f4       	brne	.+8      	; 0x884 <__stack+0x25>
     87c:	8e 81       	ldd	r24, Y+6	; 0x06
     87e:	88 23       	and	r24, r24
     880:	51 f1       	breq	.+84     	; 0x8d6 <__stack+0x77>
     882:	2e c0       	rjmp	.+92     	; 0x8e0 <__stack+0x81>
     884:	2f 81       	ldd	r18, Y+7	; 0x07
     886:	38 85       	ldd	r19, Y+8	; 0x08
     888:	37 fd       	sbrc	r19, 7
     88a:	20 c0       	rjmp	.+64     	; 0x8cc <__stack+0x6d>
     88c:	6e 81       	ldd	r22, Y+6	; 0x06
     88e:	2f 31       	cpi	r18, 0x1F	; 31
     890:	31 05       	cpc	r19, r1
     892:	1c f0       	brlt	.+6      	; 0x89a <__stack+0x3b>
     894:	66 23       	and	r22, r22
     896:	f9 f0       	breq	.+62     	; 0x8d6 <__stack+0x77>
     898:	23 c0       	rjmp	.+70     	; 0x8e0 <__stack+0x81>
     89a:	8e e1       	ldi	r24, 0x1E	; 30
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	82 1b       	sub	r24, r18
     8a0:	93 0b       	sbc	r25, r19
     8a2:	29 85       	ldd	r18, Y+9	; 0x09
     8a4:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a6:	4b 85       	ldd	r20, Y+11	; 0x0b
     8a8:	5c 85       	ldd	r21, Y+12	; 0x0c
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__stack+0x55>
     8ac:	56 95       	lsr	r21
     8ae:	47 95       	ror	r20
     8b0:	37 95       	ror	r19
     8b2:	27 95       	ror	r18
     8b4:	8a 95       	dec	r24
     8b6:	d2 f7       	brpl	.-12     	; 0x8ac <__stack+0x4d>
     8b8:	66 23       	and	r22, r22
     8ba:	b1 f0       	breq	.+44     	; 0x8e8 <__stack+0x89>
     8bc:	50 95       	com	r21
     8be:	40 95       	com	r20
     8c0:	30 95       	com	r19
     8c2:	21 95       	neg	r18
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	4f 4f       	sbci	r20, 0xFF	; 255
     8c8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ca:	0e c0       	rjmp	.+28     	; 0x8e8 <__stack+0x89>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <__stack+0x89>
     8d6:	2f ef       	ldi	r18, 0xFF	; 255
     8d8:	3f ef       	ldi	r19, 0xFF	; 255
     8da:	4f ef       	ldi	r20, 0xFF	; 255
     8dc:	5f e7       	ldi	r21, 0x7F	; 127
     8de:	04 c0       	rjmp	.+8      	; 0x8e8 <__stack+0x89>
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e8       	ldi	r21, 0x80	; 128
     8e8:	b9 01       	movw	r22, r18
     8ea:	ca 01       	movw	r24, r20
     8ec:	2c 96       	adiw	r28, 0x0c	; 12
     8ee:	e2 e0       	ldi	r30, 0x02	; 2
     8f0:	0c 94 0f 15 	jmp	0x2a1e	; 0x2a1e <__epilogue_restores__+0x20>

000008f4 <__floatunsisf>:
     8f4:	a8 e0       	ldi	r26, 0x08	; 8
     8f6:	b0 e0       	ldi	r27, 0x00	; 0
     8f8:	e0 e8       	ldi	r30, 0x80	; 128
     8fa:	f4 e0       	ldi	r31, 0x04	; 4
     8fc:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__prologue_saves__+0x10>
     900:	7b 01       	movw	r14, r22
     902:	8c 01       	movw	r16, r24
     904:	61 15       	cp	r22, r1
     906:	71 05       	cpc	r23, r1
     908:	81 05       	cpc	r24, r1
     90a:	91 05       	cpc	r25, r1
     90c:	19 f4       	brne	.+6      	; 0x914 <__floatunsisf+0x20>
     90e:	82 e0       	ldi	r24, 0x02	; 2
     910:	89 83       	std	Y+1, r24	; 0x01
     912:	60 c0       	rjmp	.+192    	; 0x9d4 <__floatunsisf+0xe0>
     914:	83 e0       	ldi	r24, 0x03	; 3
     916:	89 83       	std	Y+1, r24	; 0x01
     918:	8e e1       	ldi	r24, 0x1E	; 30
     91a:	c8 2e       	mov	r12, r24
     91c:	d1 2c       	mov	r13, r1
     91e:	dc 82       	std	Y+4, r13	; 0x04
     920:	cb 82       	std	Y+3, r12	; 0x03
     922:	ed 82       	std	Y+5, r14	; 0x05
     924:	fe 82       	std	Y+6, r15	; 0x06
     926:	0f 83       	std	Y+7, r16	; 0x07
     928:	18 87       	std	Y+8, r17	; 0x08
     92a:	c8 01       	movw	r24, r16
     92c:	b7 01       	movw	r22, r14
     92e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__clzsi2>
     932:	fc 01       	movw	r30, r24
     934:	31 97       	sbiw	r30, 0x01	; 1
     936:	f7 ff       	sbrs	r31, 7
     938:	3b c0       	rjmp	.+118    	; 0x9b0 <__floatunsisf+0xbc>
     93a:	22 27       	eor	r18, r18
     93c:	33 27       	eor	r19, r19
     93e:	2e 1b       	sub	r18, r30
     940:	3f 0b       	sbc	r19, r31
     942:	57 01       	movw	r10, r14
     944:	68 01       	movw	r12, r16
     946:	02 2e       	mov	r0, r18
     948:	04 c0       	rjmp	.+8      	; 0x952 <__floatunsisf+0x5e>
     94a:	d6 94       	lsr	r13
     94c:	c7 94       	ror	r12
     94e:	b7 94       	ror	r11
     950:	a7 94       	ror	r10
     952:	0a 94       	dec	r0
     954:	d2 f7       	brpl	.-12     	; 0x94a <__floatunsisf+0x56>
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	50 e0       	ldi	r21, 0x00	; 0
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e0       	ldi	r26, 0x00	; 0
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	04 c0       	rjmp	.+8      	; 0x970 <__floatunsisf+0x7c>
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	aa 1f       	adc	r26, r26
     96e:	bb 1f       	adc	r27, r27
     970:	2a 95       	dec	r18
     972:	d2 f7       	brpl	.-12     	; 0x968 <__floatunsisf+0x74>
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	a1 09       	sbc	r26, r1
     978:	b1 09       	sbc	r27, r1
     97a:	8e 21       	and	r24, r14
     97c:	9f 21       	and	r25, r15
     97e:	a0 23       	and	r26, r16
     980:	b1 23       	and	r27, r17
     982:	00 97       	sbiw	r24, 0x00	; 0
     984:	a1 05       	cpc	r26, r1
     986:	b1 05       	cpc	r27, r1
     988:	21 f0       	breq	.+8      	; 0x992 <__floatunsisf+0x9e>
     98a:	41 e0       	ldi	r20, 0x01	; 1
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	4a 29       	or	r20, r10
     994:	5b 29       	or	r21, r11
     996:	6c 29       	or	r22, r12
     998:	7d 29       	or	r23, r13
     99a:	4d 83       	std	Y+5, r20	; 0x05
     99c:	5e 83       	std	Y+6, r21	; 0x06
     99e:	6f 83       	std	Y+7, r22	; 0x07
     9a0:	78 87       	std	Y+8, r23	; 0x08
     9a2:	8e e1       	ldi	r24, 0x1E	; 30
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	8e 1b       	sub	r24, r30
     9a8:	9f 0b       	sbc	r25, r31
     9aa:	9c 83       	std	Y+4, r25	; 0x04
     9ac:	8b 83       	std	Y+3, r24	; 0x03
     9ae:	12 c0       	rjmp	.+36     	; 0x9d4 <__floatunsisf+0xe0>
     9b0:	30 97       	sbiw	r30, 0x00	; 0
     9b2:	81 f0       	breq	.+32     	; 0x9d4 <__floatunsisf+0xe0>
     9b4:	0e 2e       	mov	r0, r30
     9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <__floatunsisf+0xcc>
     9b8:	ee 0c       	add	r14, r14
     9ba:	ff 1c       	adc	r15, r15
     9bc:	00 1f       	adc	r16, r16
     9be:	11 1f       	adc	r17, r17
     9c0:	0a 94       	dec	r0
     9c2:	d2 f7       	brpl	.-12     	; 0x9b8 <__floatunsisf+0xc4>
     9c4:	ed 82       	std	Y+5, r14	; 0x05
     9c6:	fe 82       	std	Y+6, r15	; 0x06
     9c8:	0f 83       	std	Y+7, r16	; 0x07
     9ca:	18 87       	std	Y+8, r17	; 0x08
     9cc:	ce 1a       	sub	r12, r30
     9ce:	df 0a       	sbc	r13, r31
     9d0:	dc 82       	std	Y+4, r13	; 0x04
     9d2:	cb 82       	std	Y+3, r12	; 0x03
     9d4:	1a 82       	std	Y+2, r1	; 0x02
     9d6:	ce 01       	movw	r24, r28
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	0e 94 42 05 	call	0xa84	; 0xa84 <__pack_f>
     9de:	28 96       	adiw	r28, 0x08	; 8
     9e0:	ea e0       	ldi	r30, 0x0A	; 10
     9e2:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__epilogue_restores__+0x10>

000009e6 <__clzsi2>:
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	7b 01       	movw	r14, r22
     9f0:	8c 01       	movw	r16, r24
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	e8 16       	cp	r14, r24
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	f8 06       	cpc	r15, r24
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	08 07       	cpc	r16, r24
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	18 07       	cpc	r17, r24
     a02:	88 f4       	brcc	.+34     	; 0xa26 <__clzsi2+0x40>
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	e8 16       	cp	r14, r24
     a08:	f1 04       	cpc	r15, r1
     a0a:	01 05       	cpc	r16, r1
     a0c:	11 05       	cpc	r17, r1
     a0e:	31 f0       	breq	.+12     	; 0xa1c <__clzsi2+0x36>
     a10:	28 f0       	brcs	.+10     	; 0xa1c <__clzsi2+0x36>
     a12:	88 e0       	ldi	r24, 0x08	; 8
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	a0 e0       	ldi	r26, 0x00	; 0
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	17 c0       	rjmp	.+46     	; 0xa4a <__clzsi2+0x64>
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	12 c0       	rjmp	.+36     	; 0xa4a <__clzsi2+0x64>
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	e8 16       	cp	r14, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	f8 06       	cpc	r15, r24
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	08 07       	cpc	r16, r24
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	18 07       	cpc	r17, r24
     a36:	28 f0       	brcs	.+10     	; 0xa42 <__clzsi2+0x5c>
     a38:	88 e1       	ldi	r24, 0x18	; 24
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	a0 e0       	ldi	r26, 0x00	; 0
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__clzsi2+0x64>
     a42:	80 e1       	ldi	r24, 0x10	; 16
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	a0 e0       	ldi	r26, 0x00	; 0
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	20 e2       	ldi	r18, 0x20	; 32
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	28 1b       	sub	r18, r24
     a54:	39 0b       	sbc	r19, r25
     a56:	4a 0b       	sbc	r20, r26
     a58:	5b 0b       	sbc	r21, r27
     a5a:	04 c0       	rjmp	.+8      	; 0xa64 <__clzsi2+0x7e>
     a5c:	16 95       	lsr	r17
     a5e:	07 95       	ror	r16
     a60:	f7 94       	ror	r15
     a62:	e7 94       	ror	r14
     a64:	8a 95       	dec	r24
     a66:	d2 f7       	brpl	.-12     	; 0xa5c <__clzsi2+0x76>
     a68:	f7 01       	movw	r30, r14
     a6a:	e8 59       	subi	r30, 0x98	; 152
     a6c:	ff 4f       	sbci	r31, 0xFF	; 255
     a6e:	80 81       	ld	r24, Z
     a70:	28 1b       	sub	r18, r24
     a72:	31 09       	sbc	r19, r1
     a74:	41 09       	sbc	r20, r1
     a76:	51 09       	sbc	r21, r1
     a78:	c9 01       	movw	r24, r18
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	08 95       	ret

00000a84 <__pack_f>:
     a84:	df 92       	push	r13
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	fc 01       	movw	r30, r24
     a90:	e4 80       	ldd	r14, Z+4	; 0x04
     a92:	f5 80       	ldd	r15, Z+5	; 0x05
     a94:	06 81       	ldd	r16, Z+6	; 0x06
     a96:	17 81       	ldd	r17, Z+7	; 0x07
     a98:	d1 80       	ldd	r13, Z+1	; 0x01
     a9a:	80 81       	ld	r24, Z
     a9c:	82 30       	cpi	r24, 0x02	; 2
     a9e:	48 f4       	brcc	.+18     	; 0xab2 <__pack_f+0x2e>
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e1       	ldi	r26, 0x10	; 16
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	e8 2a       	or	r14, r24
     aaa:	f9 2a       	or	r15, r25
     aac:	0a 2b       	or	r16, r26
     aae:	1b 2b       	or	r17, r27
     ab0:	a5 c0       	rjmp	.+330    	; 0xbfc <__pack_f+0x178>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	09 f4       	brne	.+2      	; 0xab8 <__pack_f+0x34>
     ab6:	9f c0       	rjmp	.+318    	; 0xbf6 <__pack_f+0x172>
     ab8:	82 30       	cpi	r24, 0x02	; 2
     aba:	21 f4       	brne	.+8      	; 0xac4 <__pack_f+0x40>
     abc:	ee 24       	eor	r14, r14
     abe:	ff 24       	eor	r15, r15
     ac0:	87 01       	movw	r16, r14
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x4a>
     ac4:	e1 14       	cp	r14, r1
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	19 f4       	brne	.+6      	; 0xad4 <__pack_f+0x50>
     ace:	e0 e0       	ldi	r30, 0x00	; 0
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	96 c0       	rjmp	.+300    	; 0xc00 <__pack_f+0x17c>
     ad4:	62 81       	ldd	r22, Z+2	; 0x02
     ad6:	73 81       	ldd	r23, Z+3	; 0x03
     ad8:	9f ef       	ldi	r25, 0xFF	; 255
     ada:	62 38       	cpi	r22, 0x82	; 130
     adc:	79 07       	cpc	r23, r25
     ade:	0c f0       	brlt	.+2      	; 0xae2 <__pack_f+0x5e>
     ae0:	5b c0       	rjmp	.+182    	; 0xb98 <__pack_f+0x114>
     ae2:	22 e8       	ldi	r18, 0x82	; 130
     ae4:	3f ef       	ldi	r19, 0xFF	; 255
     ae6:	26 1b       	sub	r18, r22
     ae8:	37 0b       	sbc	r19, r23
     aea:	2a 31       	cpi	r18, 0x1A	; 26
     aec:	31 05       	cpc	r19, r1
     aee:	2c f0       	brlt	.+10     	; 0xafa <__pack_f+0x76>
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	40 e0       	ldi	r20, 0x00	; 0
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	2a c0       	rjmp	.+84     	; 0xb4e <__pack_f+0xca>
     afa:	b8 01       	movw	r22, r16
     afc:	a7 01       	movw	r20, r14
     afe:	02 2e       	mov	r0, r18
     b00:	04 c0       	rjmp	.+8      	; 0xb0a <__pack_f+0x86>
     b02:	76 95       	lsr	r23
     b04:	67 95       	ror	r22
     b06:	57 95       	ror	r21
     b08:	47 95       	ror	r20
     b0a:	0a 94       	dec	r0
     b0c:	d2 f7       	brpl	.-12     	; 0xb02 <__pack_f+0x7e>
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	a0 e0       	ldi	r26, 0x00	; 0
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__pack_f+0x9c>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	2a 95       	dec	r18
     b22:	d2 f7       	brpl	.-12     	; 0xb18 <__pack_f+0x94>
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	a1 09       	sbc	r26, r1
     b28:	b1 09       	sbc	r27, r1
     b2a:	8e 21       	and	r24, r14
     b2c:	9f 21       	and	r25, r15
     b2e:	a0 23       	and	r26, r16
     b30:	b1 23       	and	r27, r17
     b32:	00 97       	sbiw	r24, 0x00	; 0
     b34:	a1 05       	cpc	r26, r1
     b36:	b1 05       	cpc	r27, r1
     b38:	21 f0       	breq	.+8      	; 0xb42 <__pack_f+0xbe>
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	9a 01       	movw	r18, r20
     b44:	ab 01       	movw	r20, r22
     b46:	28 2b       	or	r18, r24
     b48:	39 2b       	or	r19, r25
     b4a:	4a 2b       	or	r20, r26
     b4c:	5b 2b       	or	r21, r27
     b4e:	da 01       	movw	r26, r20
     b50:	c9 01       	movw	r24, r18
     b52:	8f 77       	andi	r24, 0x7F	; 127
     b54:	90 70       	andi	r25, 0x00	; 0
     b56:	a0 70       	andi	r26, 0x00	; 0
     b58:	b0 70       	andi	r27, 0x00	; 0
     b5a:	80 34       	cpi	r24, 0x40	; 64
     b5c:	91 05       	cpc	r25, r1
     b5e:	a1 05       	cpc	r26, r1
     b60:	b1 05       	cpc	r27, r1
     b62:	39 f4       	brne	.+14     	; 0xb72 <__pack_f+0xee>
     b64:	27 ff       	sbrs	r18, 7
     b66:	09 c0       	rjmp	.+18     	; 0xb7a <__pack_f+0xf6>
     b68:	20 5c       	subi	r18, 0xC0	; 192
     b6a:	3f 4f       	sbci	r19, 0xFF	; 255
     b6c:	4f 4f       	sbci	r20, 0xFF	; 255
     b6e:	5f 4f       	sbci	r21, 0xFF	; 255
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <__pack_f+0xf6>
     b72:	21 5c       	subi	r18, 0xC1	; 193
     b74:	3f 4f       	sbci	r19, 0xFF	; 255
     b76:	4f 4f       	sbci	r20, 0xFF	; 255
     b78:	5f 4f       	sbci	r21, 0xFF	; 255
     b7a:	e0 e0       	ldi	r30, 0x00	; 0
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	a0 e0       	ldi	r26, 0x00	; 0
     b82:	3a 07       	cpc	r19, r26
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	4a 07       	cpc	r20, r26
     b88:	a0 e4       	ldi	r26, 0x40	; 64
     b8a:	5a 07       	cpc	r21, r26
     b8c:	10 f0       	brcs	.+4      	; 0xb92 <__pack_f+0x10e>
     b8e:	e1 e0       	ldi	r30, 0x01	; 1
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	79 01       	movw	r14, r18
     b94:	8a 01       	movw	r16, r20
     b96:	27 c0       	rjmp	.+78     	; 0xbe6 <__pack_f+0x162>
     b98:	60 38       	cpi	r22, 0x80	; 128
     b9a:	71 05       	cpc	r23, r1
     b9c:	64 f5       	brge	.+88     	; 0xbf6 <__pack_f+0x172>
     b9e:	fb 01       	movw	r30, r22
     ba0:	e1 58       	subi	r30, 0x81	; 129
     ba2:	ff 4f       	sbci	r31, 0xFF	; 255
     ba4:	d8 01       	movw	r26, r16
     ba6:	c7 01       	movw	r24, r14
     ba8:	8f 77       	andi	r24, 0x7F	; 127
     baa:	90 70       	andi	r25, 0x00	; 0
     bac:	a0 70       	andi	r26, 0x00	; 0
     bae:	b0 70       	andi	r27, 0x00	; 0
     bb0:	80 34       	cpi	r24, 0x40	; 64
     bb2:	91 05       	cpc	r25, r1
     bb4:	a1 05       	cpc	r26, r1
     bb6:	b1 05       	cpc	r27, r1
     bb8:	39 f4       	brne	.+14     	; 0xbc8 <__pack_f+0x144>
     bba:	e7 fe       	sbrs	r14, 7
     bbc:	0d c0       	rjmp	.+26     	; 0xbd8 <__pack_f+0x154>
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e0       	ldi	r26, 0x00	; 0
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <__pack_f+0x14c>
     bc8:	8f e3       	ldi	r24, 0x3F	; 63
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	a0 e0       	ldi	r26, 0x00	; 0
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e8 0e       	add	r14, r24
     bd2:	f9 1e       	adc	r15, r25
     bd4:	0a 1f       	adc	r16, r26
     bd6:	1b 1f       	adc	r17, r27
     bd8:	17 ff       	sbrs	r17, 7
     bda:	05 c0       	rjmp	.+10     	; 0xbe6 <__pack_f+0x162>
     bdc:	16 95       	lsr	r17
     bde:	07 95       	ror	r16
     be0:	f7 94       	ror	r15
     be2:	e7 94       	ror	r14
     be4:	31 96       	adiw	r30, 0x01	; 1
     be6:	87 e0       	ldi	r24, 0x07	; 7
     be8:	16 95       	lsr	r17
     bea:	07 95       	ror	r16
     bec:	f7 94       	ror	r15
     bee:	e7 94       	ror	r14
     bf0:	8a 95       	dec	r24
     bf2:	d1 f7       	brne	.-12     	; 0xbe8 <__pack_f+0x164>
     bf4:	05 c0       	rjmp	.+10     	; 0xc00 <__pack_f+0x17c>
     bf6:	ee 24       	eor	r14, r14
     bf8:	ff 24       	eor	r15, r15
     bfa:	87 01       	movw	r16, r14
     bfc:	ef ef       	ldi	r30, 0xFF	; 255
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	6e 2f       	mov	r22, r30
     c02:	67 95       	ror	r22
     c04:	66 27       	eor	r22, r22
     c06:	67 95       	ror	r22
     c08:	90 2f       	mov	r25, r16
     c0a:	9f 77       	andi	r25, 0x7F	; 127
     c0c:	d7 94       	ror	r13
     c0e:	dd 24       	eor	r13, r13
     c10:	d7 94       	ror	r13
     c12:	8e 2f       	mov	r24, r30
     c14:	86 95       	lsr	r24
     c16:	49 2f       	mov	r20, r25
     c18:	46 2b       	or	r20, r22
     c1a:	58 2f       	mov	r21, r24
     c1c:	5d 29       	or	r21, r13
     c1e:	b7 01       	movw	r22, r14
     c20:	ca 01       	movw	r24, r20
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	df 90       	pop	r13
     c2c:	08 95       	ret

00000c2e <__unpack_f>:
     c2e:	fc 01       	movw	r30, r24
     c30:	db 01       	movw	r26, r22
     c32:	40 81       	ld	r20, Z
     c34:	51 81       	ldd	r21, Z+1	; 0x01
     c36:	22 81       	ldd	r18, Z+2	; 0x02
     c38:	62 2f       	mov	r22, r18
     c3a:	6f 77       	andi	r22, 0x7F	; 127
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	22 1f       	adc	r18, r18
     c40:	22 27       	eor	r18, r18
     c42:	22 1f       	adc	r18, r18
     c44:	93 81       	ldd	r25, Z+3	; 0x03
     c46:	89 2f       	mov	r24, r25
     c48:	88 0f       	add	r24, r24
     c4a:	82 2b       	or	r24, r18
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	99 1f       	adc	r25, r25
     c52:	99 27       	eor	r25, r25
     c54:	99 1f       	adc	r25, r25
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	9c 93       	st	X, r25
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	21 15       	cp	r18, r1
     c5e:	31 05       	cpc	r19, r1
     c60:	a9 f5       	brne	.+106    	; 0xccc <__unpack_f+0x9e>
     c62:	41 15       	cp	r20, r1
     c64:	51 05       	cpc	r21, r1
     c66:	61 05       	cpc	r22, r1
     c68:	71 05       	cpc	r23, r1
     c6a:	11 f4       	brne	.+4      	; 0xc70 <__unpack_f+0x42>
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	37 c0       	rjmp	.+110    	; 0xcde <__unpack_f+0xb0>
     c70:	82 e8       	ldi	r24, 0x82	; 130
     c72:	9f ef       	ldi	r25, 0xFF	; 255
     c74:	13 96       	adiw	r26, 0x03	; 3
     c76:	9c 93       	st	X, r25
     c78:	8e 93       	st	-X, r24
     c7a:	12 97       	sbiw	r26, 0x02	; 2
     c7c:	9a 01       	movw	r18, r20
     c7e:	ab 01       	movw	r20, r22
     c80:	67 e0       	ldi	r22, 0x07	; 7
     c82:	22 0f       	add	r18, r18
     c84:	33 1f       	adc	r19, r19
     c86:	44 1f       	adc	r20, r20
     c88:	55 1f       	adc	r21, r21
     c8a:	6a 95       	dec	r22
     c8c:	d1 f7       	brne	.-12     	; 0xc82 <__unpack_f+0x54>
     c8e:	83 e0       	ldi	r24, 0x03	; 3
     c90:	8c 93       	st	X, r24
     c92:	0d c0       	rjmp	.+26     	; 0xcae <__unpack_f+0x80>
     c94:	22 0f       	add	r18, r18
     c96:	33 1f       	adc	r19, r19
     c98:	44 1f       	adc	r20, r20
     c9a:	55 1f       	adc	r21, r21
     c9c:	12 96       	adiw	r26, 0x02	; 2
     c9e:	8d 91       	ld	r24, X+
     ca0:	9c 91       	ld	r25, X
     ca2:	13 97       	sbiw	r26, 0x03	; 3
     ca4:	01 97       	sbiw	r24, 0x01	; 1
     ca6:	13 96       	adiw	r26, 0x03	; 3
     ca8:	9c 93       	st	X, r25
     caa:	8e 93       	st	-X, r24
     cac:	12 97       	sbiw	r26, 0x02	; 2
     cae:	20 30       	cpi	r18, 0x00	; 0
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	38 07       	cpc	r19, r24
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	48 07       	cpc	r20, r24
     cb8:	80 e4       	ldi	r24, 0x40	; 64
     cba:	58 07       	cpc	r21, r24
     cbc:	58 f3       	brcs	.-42     	; 0xc94 <__unpack_f+0x66>
     cbe:	14 96       	adiw	r26, 0x04	; 4
     cc0:	2d 93       	st	X+, r18
     cc2:	3d 93       	st	X+, r19
     cc4:	4d 93       	st	X+, r20
     cc6:	5c 93       	st	X, r21
     cc8:	17 97       	sbiw	r26, 0x07	; 7
     cca:	08 95       	ret
     ccc:	2f 3f       	cpi	r18, 0xFF	; 255
     cce:	31 05       	cpc	r19, r1
     cd0:	79 f4       	brne	.+30     	; 0xcf0 <__unpack_f+0xc2>
     cd2:	41 15       	cp	r20, r1
     cd4:	51 05       	cpc	r21, r1
     cd6:	61 05       	cpc	r22, r1
     cd8:	71 05       	cpc	r23, r1
     cda:	19 f4       	brne	.+6      	; 0xce2 <__unpack_f+0xb4>
     cdc:	84 e0       	ldi	r24, 0x04	; 4
     cde:	8c 93       	st	X, r24
     ce0:	08 95       	ret
     ce2:	64 ff       	sbrs	r22, 4
     ce4:	03 c0       	rjmp	.+6      	; 0xcec <__unpack_f+0xbe>
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	8c 93       	st	X, r24
     cea:	12 c0       	rjmp	.+36     	; 0xd10 <__unpack_f+0xe2>
     cec:	1c 92       	st	X, r1
     cee:	10 c0       	rjmp	.+32     	; 0xd10 <__unpack_f+0xe2>
     cf0:	2f 57       	subi	r18, 0x7F	; 127
     cf2:	30 40       	sbci	r19, 0x00	; 0
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	3c 93       	st	X, r19
     cf8:	2e 93       	st	-X, r18
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	83 e0       	ldi	r24, 0x03	; 3
     cfe:	8c 93       	st	X, r24
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	44 0f       	add	r20, r20
     d04:	55 1f       	adc	r21, r21
     d06:	66 1f       	adc	r22, r22
     d08:	77 1f       	adc	r23, r23
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__unpack_f+0xd4>
     d0e:	70 64       	ori	r23, 0x40	; 64
     d10:	14 96       	adiw	r26, 0x04	; 4
     d12:	4d 93       	st	X+, r20
     d14:	5d 93       	st	X+, r21
     d16:	6d 93       	st	X+, r22
     d18:	7c 93       	st	X, r23
     d1a:	17 97       	sbiw	r26, 0x07	; 7
     d1c:	08 95       	ret

00000d1e <__fpcmp_parts_f>:
     d1e:	1f 93       	push	r17
     d20:	dc 01       	movw	r26, r24
     d22:	fb 01       	movw	r30, r22
     d24:	9c 91       	ld	r25, X
     d26:	92 30       	cpi	r25, 0x02	; 2
     d28:	08 f4       	brcc	.+2      	; 0xd2c <__fpcmp_parts_f+0xe>
     d2a:	47 c0       	rjmp	.+142    	; 0xdba <__fpcmp_parts_f+0x9c>
     d2c:	80 81       	ld	r24, Z
     d2e:	82 30       	cpi	r24, 0x02	; 2
     d30:	08 f4       	brcc	.+2      	; 0xd34 <__fpcmp_parts_f+0x16>
     d32:	43 c0       	rjmp	.+134    	; 0xdba <__fpcmp_parts_f+0x9c>
     d34:	94 30       	cpi	r25, 0x04	; 4
     d36:	51 f4       	brne	.+20     	; 0xd4c <__fpcmp_parts_f+0x2e>
     d38:	11 96       	adiw	r26, 0x01	; 1
     d3a:	1c 91       	ld	r17, X
     d3c:	84 30       	cpi	r24, 0x04	; 4
     d3e:	99 f5       	brne	.+102    	; 0xda6 <__fpcmp_parts_f+0x88>
     d40:	81 81       	ldd	r24, Z+1	; 0x01
     d42:	68 2f       	mov	r22, r24
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	61 1b       	sub	r22, r17
     d48:	71 09       	sbc	r23, r1
     d4a:	3f c0       	rjmp	.+126    	; 0xdca <__fpcmp_parts_f+0xac>
     d4c:	84 30       	cpi	r24, 0x04	; 4
     d4e:	21 f0       	breq	.+8      	; 0xd58 <__fpcmp_parts_f+0x3a>
     d50:	92 30       	cpi	r25, 0x02	; 2
     d52:	31 f4       	brne	.+12     	; 0xd60 <__fpcmp_parts_f+0x42>
     d54:	82 30       	cpi	r24, 0x02	; 2
     d56:	b9 f1       	breq	.+110    	; 0xdc6 <__fpcmp_parts_f+0xa8>
     d58:	81 81       	ldd	r24, Z+1	; 0x01
     d5a:	88 23       	and	r24, r24
     d5c:	89 f1       	breq	.+98     	; 0xdc0 <__fpcmp_parts_f+0xa2>
     d5e:	2d c0       	rjmp	.+90     	; 0xdba <__fpcmp_parts_f+0x9c>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	f1 f0       	breq	.+60     	; 0xda6 <__fpcmp_parts_f+0x88>
     d6a:	81 81       	ldd	r24, Z+1	; 0x01
     d6c:	18 17       	cp	r17, r24
     d6e:	d9 f4       	brne	.+54     	; 0xda6 <__fpcmp_parts_f+0x88>
     d70:	12 96       	adiw	r26, 0x02	; 2
     d72:	2d 91       	ld	r18, X+
     d74:	3c 91       	ld	r19, X
     d76:	13 97       	sbiw	r26, 0x03	; 3
     d78:	82 81       	ldd	r24, Z+2	; 0x02
     d7a:	93 81       	ldd	r25, Z+3	; 0x03
     d7c:	82 17       	cp	r24, r18
     d7e:	93 07       	cpc	r25, r19
     d80:	94 f0       	brlt	.+36     	; 0xda6 <__fpcmp_parts_f+0x88>
     d82:	28 17       	cp	r18, r24
     d84:	39 07       	cpc	r19, r25
     d86:	bc f0       	brlt	.+46     	; 0xdb6 <__fpcmp_parts_f+0x98>
     d88:	14 96       	adiw	r26, 0x04	; 4
     d8a:	8d 91       	ld	r24, X+
     d8c:	9d 91       	ld	r25, X+
     d8e:	0d 90       	ld	r0, X+
     d90:	bc 91       	ld	r27, X
     d92:	a0 2d       	mov	r26, r0
     d94:	24 81       	ldd	r18, Z+4	; 0x04
     d96:	35 81       	ldd	r19, Z+5	; 0x05
     d98:	46 81       	ldd	r20, Z+6	; 0x06
     d9a:	57 81       	ldd	r21, Z+7	; 0x07
     d9c:	28 17       	cp	r18, r24
     d9e:	39 07       	cpc	r19, r25
     da0:	4a 07       	cpc	r20, r26
     da2:	5b 07       	cpc	r21, r27
     da4:	18 f4       	brcc	.+6      	; 0xdac <__fpcmp_parts_f+0x8e>
     da6:	11 23       	and	r17, r17
     da8:	41 f0       	breq	.+16     	; 0xdba <__fpcmp_parts_f+0x9c>
     daa:	0a c0       	rjmp	.+20     	; 0xdc0 <__fpcmp_parts_f+0xa2>
     dac:	82 17       	cp	r24, r18
     dae:	93 07       	cpc	r25, r19
     db0:	a4 07       	cpc	r26, r20
     db2:	b5 07       	cpc	r27, r21
     db4:	40 f4       	brcc	.+16     	; 0xdc6 <__fpcmp_parts_f+0xa8>
     db6:	11 23       	and	r17, r17
     db8:	19 f0       	breq	.+6      	; 0xdc0 <__fpcmp_parts_f+0xa2>
     dba:	61 e0       	ldi	r22, 0x01	; 1
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	05 c0       	rjmp	.+10     	; 0xdca <__fpcmp_parts_f+0xac>
     dc0:	6f ef       	ldi	r22, 0xFF	; 255
     dc2:	7f ef       	ldi	r23, 0xFF	; 255
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <__fpcmp_parts_f+0xac>
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	cb 01       	movw	r24, r22
     dcc:	1f 91       	pop	r17
     dce:	08 95       	ret

00000dd0 <TIMER0_voidInit>:
#if TIMER0_Usage==TIMER0_Interrupt

void (*Timer0_ptr_fn)(void)=Null;
void (*Timer0_CM_ptr_fn)(void)=Null;
void TIMER0_voidInit(Mode Copy_mode,Clk_Select clk_scaler,u8 Preload_Value)
	{
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <TIMER0_voidInit+0x6>
     dd6:	0f 92       	push	r0
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	6a 83       	std	Y+2, r22	; 0x02
     de0:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_mode==Normal)
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	88 23       	and	r24, r24
     de6:	91 f4       	brne	.+36     	; 0xe0c <TIMER0_voidInit+0x3c>
	{
		Clr_Bit(TCCR0,WGM00);
     de8:	a3 e5       	ldi	r26, 0x53	; 83
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e3 e5       	ldi	r30, 0x53	; 83
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	8f 7b       	andi	r24, 0xBF	; 191
     df4:	8c 93       	st	X, r24
		Clr_Bit(TCCR0,WGM01);
     df6:	a3 e5       	ldi	r26, 0x53	; 83
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e3 e5       	ldi	r30, 0x53	; 83
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	87 7f       	andi	r24, 0xF7	; 247
     e02:	8c 93       	st	X, r24
		//TIMER_CLKSelect(clk_scaler,Clk);
		TCNT0=Preload_Value;
     e04:	e2 e5       	ldi	r30, 0x52	; 82
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	80 83       	st	Z, r24

/* else if(  )
 *
 */

	Set_Bit(SREG,I);
     e0c:	af e5       	ldi	r26, 0x5F	; 95
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	ef e5       	ldi	r30, 0x5F	; 95
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	80 68       	ori	r24, 0x80	; 128
     e18:	8c 93       	st	X, r24
	Set_Bit(TIMSK,TOIE0);
     e1a:	a9 e5       	ldi	r26, 0x59	; 89
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e9 e5       	ldi	r30, 0x59	; 89
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	81 60       	ori	r24, 0x01	; 1
     e26:	8c 93       	st	X, r24
	}
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <TIMER11_voidSetCallBackfn>:

void TIMER11_voidSetCallBackfn(void(*ptr)(void))
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	00 d0       	rcall	.+0      	; 0xe3a <TIMER11_voidSetCallBackfn+0x6>
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	9a 83       	std	Y+2, r25	; 0x02
     e40:	89 83       	std	Y+1, r24	; 0x01
	Timer0_ptr_fn=ptr;
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	90 93 95 01 	sts	0x0195, r25
     e4a:	80 93 94 01 	sts	0x0194, r24
}
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <__vector_11>:
void __vector_11(void)


{
     e58:	1f 92       	push	r1
     e5a:	0f 92       	push	r0
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	0f 92       	push	r0
     e60:	11 24       	eor	r1, r1
     e62:	2f 93       	push	r18
     e64:	3f 93       	push	r19
     e66:	4f 93       	push	r20
     e68:	5f 93       	push	r21
     e6a:	6f 93       	push	r22
     e6c:	7f 93       	push	r23
     e6e:	8f 93       	push	r24
     e70:	9f 93       	push	r25
     e72:	af 93       	push	r26
     e74:	bf 93       	push	r27
     e76:	ef 93       	push	r30
     e78:	ff 93       	push	r31
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62

	if (Timer0_ptr_fn!=Null)
     e82:	80 91 94 01 	lds	r24, 0x0194
     e86:	90 91 95 01 	lds	r25, 0x0195
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	29 f0       	breq	.+10     	; 0xe98 <__vector_11+0x40>
	{
		Timer0_ptr_fn();
     e8e:	e0 91 94 01 	lds	r30, 0x0194
     e92:	f0 91 95 01 	lds	r31, 0x0195
     e96:	09 95       	icall
	}
}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	ff 91       	pop	r31
     e9e:	ef 91       	pop	r30
     ea0:	bf 91       	pop	r27
     ea2:	af 91       	pop	r26
     ea4:	9f 91       	pop	r25
     ea6:	8f 91       	pop	r24
     ea8:	7f 91       	pop	r23
     eaa:	6f 91       	pop	r22
     eac:	5f 91       	pop	r21
     eae:	4f 91       	pop	r20
     eb0:	3f 91       	pop	r19
     eb2:	2f 91       	pop	r18
     eb4:	0f 90       	pop	r0
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	0f 90       	pop	r0
     eba:	1f 90       	pop	r1
     ebc:	18 95       	reti

00000ebe <__vector_10>:

void __vector_10(void)

	{
     ebe:	1f 92       	push	r1
     ec0:	0f 92       	push	r0
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	0f 92       	push	r0
     ec6:	11 24       	eor	r1, r1
     ec8:	2f 93       	push	r18
     eca:	3f 93       	push	r19
     ecc:	4f 93       	push	r20
     ece:	5f 93       	push	r21
     ed0:	6f 93       	push	r22
     ed2:	7f 93       	push	r23
     ed4:	8f 93       	push	r24
     ed6:	9f 93       	push	r25
     ed8:	af 93       	push	r26
     eda:	bf 93       	push	r27
     edc:	ef 93       	push	r30
     ede:	ff 93       	push	r31
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62

		if (Timer0_CM_ptr_fn!=Null)
     ee8:	80 91 96 01 	lds	r24, 0x0196
     eec:	90 91 97 01 	lds	r25, 0x0197
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	29 f0       	breq	.+10     	; 0xefe <__vector_10+0x40>
		{
			Timer0_CM_ptr_fn();
     ef4:	e0 91 96 01 	lds	r30, 0x0196
     ef8:	f0 91 97 01 	lds	r31, 0x0197
     efc:	09 95       	icall
		}
	}
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	ff 91       	pop	r31
     f04:	ef 91       	pop	r30
     f06:	bf 91       	pop	r27
     f08:	af 91       	pop	r26
     f0a:	9f 91       	pop	r25
     f0c:	8f 91       	pop	r24
     f0e:	7f 91       	pop	r23
     f10:	6f 91       	pop	r22
     f12:	5f 91       	pop	r21
     f14:	4f 91       	pop	r20
     f16:	3f 91       	pop	r19
     f18:	2f 91       	pop	r18
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	0f 90       	pop	r0
     f20:	1f 90       	pop	r1
     f22:	18 95       	reti

00000f24 <TIMER10_voidSetCallBackfn>:

void TIMER10_voidSetCallBackfn(void(*ptr)(void))
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	00 d0       	rcall	.+0      	; 0xf2a <TIMER10_voidSetCallBackfn+0x6>
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	9a 83       	std	Y+2, r25	; 0x02
     f30:	89 83       	std	Y+1, r24	; 0x01
	Timer0_CM_ptr_fn=ptr;
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	90 93 97 01 	sts	0x0197, r25
     f3a:	80 93 96 01 	sts	0x0196, r24
}
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <INT1_voidInit>:
//#define INT1_Interrupt 0
#if INT1_Usage==INT1_Interrupt

void (*ptr_fn)(void)=Null;
void INT1_voidInit(Event Copy_signal )
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	0f 92       	push	r0
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_signal==INT1_FallingEdge)
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	79 f4       	brne	.+30     	; 0xf78 <INT1_voidInit+0x30>
	{
		Set_Bit(MCUCR_Reg,ISC11);
     f5a:	a5 e5       	ldi	r26, 0x55	; 85
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e5 e5       	ldi	r30, 0x55	; 85
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	88 60       	ori	r24, 0x08	; 8
     f66:	8c 93       	st	X, r24
		Clr_Bit(MCUCR_Reg,ISC10);
     f68:	a5 e5       	ldi	r26, 0x55	; 85
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e5 e5       	ldi	r30, 0x55	; 85
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	8b 7f       	andi	r24, 0xFB	; 251
     f74:	8c 93       	st	X, r24
     f76:	35 c0       	rjmp	.+106    	; 0xfe2 <INT1_voidInit+0x9a>
	}
	else if (Copy_signal==INT1_RisingEdge)
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	88 23       	and	r24, r24
     f7c:	79 f4       	brne	.+30     	; 0xf9c <INT1_voidInit+0x54>
	{
		Set_Bit(MCUCR_Reg,ISC11);
     f7e:	a5 e5       	ldi	r26, 0x55	; 85
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e5 e5       	ldi	r30, 0x55	; 85
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	88 60       	ori	r24, 0x08	; 8
     f8a:	8c 93       	st	X, r24
		Set_Bit(MCUCR_Reg,ISC10);
     f8c:	a5 e5       	ldi	r26, 0x55	; 85
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e5 e5       	ldi	r30, 0x55	; 85
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	84 60       	ori	r24, 0x04	; 4
     f98:	8c 93       	st	X, r24
     f9a:	23 c0       	rjmp	.+70     	; 0xfe2 <INT1_voidInit+0x9a>
	}
	else if (Copy_signal==INT1_LowLevel)
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	83 30       	cpi	r24, 0x03	; 3
     fa0:	79 f4       	brne	.+30     	; 0xfc0 <INT1_voidInit+0x78>
	{
		Clr_Bit(MCUCR_Reg,ISC11);
     fa2:	a5 e5       	ldi	r26, 0x55	; 85
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e5 e5       	ldi	r30, 0x55	; 85
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	87 7f       	andi	r24, 0xF7	; 247
     fae:	8c 93       	st	X, r24
		Clr_Bit(MCUCR_Reg,ISC10);
     fb0:	a5 e5       	ldi	r26, 0x55	; 85
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e5 e5       	ldi	r30, 0x55	; 85
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8b 7f       	andi	r24, 0xFB	; 251
     fbc:	8c 93       	st	X, r24
     fbe:	11 c0       	rjmp	.+34     	; 0xfe2 <INT1_voidInit+0x9a>
	}
	else if (Copy_signal==INT1_OnChange)
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	82 30       	cpi	r24, 0x02	; 2
     fc4:	71 f4       	brne	.+28     	; 0xfe2 <INT1_voidInit+0x9a>
	{
		Clr_Bit(MCUCR_Reg,ISC11);
     fc6:	a5 e5       	ldi	r26, 0x55	; 85
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e5 e5       	ldi	r30, 0x55	; 85
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	87 7f       	andi	r24, 0xF7	; 247
     fd2:	8c 93       	st	X, r24
		Set_Bit(MCUCR_Reg,ISC10);
     fd4:	a5 e5       	ldi	r26, 0x55	; 85
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e5 e5       	ldi	r30, 0x55	; 85
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	84 60       	ori	r24, 0x04	; 4
     fe0:	8c 93       	st	X, r24

	}
	Set_Bit(GICR_Reg,INT1);
     fe2:	ab e5       	ldi	r26, 0x5B	; 91
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	eb e5       	ldi	r30, 0x5B	; 91
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	80 68       	ori	r24, 0x80	; 128
     fee:	8c 93       	st	X, r24
	Set_Bit(SREG_Reg,I);
     ff0:	af e5       	ldi	r26, 0x5F	; 95
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ef e5       	ldi	r30, 0x5F	; 95
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	80 68       	ori	r24, 0x80	; 128
     ffc:	8c 93       	st	X, r24
}
     ffe:	0f 90       	pop	r0
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <INT1_voidSetCallBackfn>:
/*function that has the address for the func
 * that the developer in App. layer wrote as
 * a response to the interrupt
 */
void INT1_voidSetCallBackfn(void(*ptr)(void))
{
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	00 d0       	rcall	.+0      	; 0x100c <INT1_voidSetCallBackfn+0x6>
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	9a 83       	std	Y+2, r25	; 0x02
    1012:	89 83       	std	Y+1, r24	; 0x01
	ptr_fn=ptr;
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	9a 81       	ldd	r25, Y+2	; 0x02
    1018:	90 93 99 01 	sts	0x0199, r25
    101c:	80 93 98 01 	sts	0x0198, r24
}
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <__vector_2>:
void __vector_2(void)

{
    102a:	1f 92       	push	r1
    102c:	0f 92       	push	r0
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	0f 92       	push	r0
    1032:	11 24       	eor	r1, r1
    1034:	2f 93       	push	r18
    1036:	3f 93       	push	r19
    1038:	4f 93       	push	r20
    103a:	5f 93       	push	r21
    103c:	6f 93       	push	r22
    103e:	7f 93       	push	r23
    1040:	8f 93       	push	r24
    1042:	9f 93       	push	r25
    1044:	af 93       	push	r26
    1046:	bf 93       	push	r27
    1048:	ef 93       	push	r30
    104a:	ff 93       	push	r31
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62

	if (ptr_fn!=Null)
    1054:	80 91 98 01 	lds	r24, 0x0198
    1058:	90 91 99 01 	lds	r25, 0x0199
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	29 f0       	breq	.+10     	; 0x106a <__vector_2+0x40>
	{
		ptr_fn();
    1060:	e0 91 98 01 	lds	r30, 0x0198
    1064:	f0 91 99 01 	lds	r31, 0x0199
    1068:	09 95       	icall
	}
}
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	ff 91       	pop	r31
    1070:	ef 91       	pop	r30
    1072:	bf 91       	pop	r27
    1074:	af 91       	pop	r26
    1076:	9f 91       	pop	r25
    1078:	8f 91       	pop	r24
    107a:	7f 91       	pop	r23
    107c:	6f 91       	pop	r22
    107e:	5f 91       	pop	r21
    1080:	4f 91       	pop	r20
    1082:	3f 91       	pop	r19
    1084:	2f 91       	pop	r18
    1086:	0f 90       	pop	r0
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	0f 90       	pop	r0
    108c:	1f 90       	pop	r1
    108e:	18 95       	reti

00001090 <DIO_ErrStateSetPinDirection>:
#include"DIO_interface.h"
#include"../../Common/Bit_Math.h"
#include"DIO_register.h"
#include"../../common/definitions.h"
ErrState DIO_ErrStateSetPinDirection (DIO_GroupNumber Copy_GroupNumber,DIO_PinNumber Copy_PinNumber,DIO_DirectionState Copy_DirectionState)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	28 97       	sbiw	r28, 0x08	; 8
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	6a 83       	std	Y+2, r22	; 0x02
    10a8:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_PinNumber>=Pin0 &&Copy_PinNumber<=Pin7)
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	88 30       	cpi	r24, 0x08	; 8
    10ae:	08 f0       	brcs	.+2      	; 0x10b2 <DIO_ErrStateSetPinDirection+0x22>
    10b0:	f6 c0       	rjmp	.+492    	; 0x129e <DIO_ErrStateSetPinDirection+0x20e>
	{
		if(Copy_DirectionState==DIO_Input)
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	88 23       	and	r24, r24
    10b6:	09 f0       	breq	.+2      	; 0x10ba <DIO_ErrStateSetPinDirection+0x2a>
    10b8:	77 c0       	rjmp	.+238    	; 0x11a8 <DIO_ErrStateSetPinDirection+0x118>
		{
		switch (Copy_GroupNumber) {
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	38 87       	std	Y+8, r19	; 0x08
    10c2:	2f 83       	std	Y+7, r18	; 0x07
    10c4:	8f 81       	ldd	r24, Y+7	; 0x07
    10c6:	98 85       	ldd	r25, Y+8	; 0x08
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	91 05       	cpc	r25, r1
    10cc:	59 f1       	breq	.+86     	; 0x1124 <DIO_ErrStateSetPinDirection+0x94>
    10ce:	2f 81       	ldd	r18, Y+7	; 0x07
    10d0:	38 85       	ldd	r19, Y+8	; 0x08
    10d2:	22 30       	cpi	r18, 0x02	; 2
    10d4:	31 05       	cpc	r19, r1
    10d6:	2c f4       	brge	.+10     	; 0x10e2 <DIO_ErrStateSetPinDirection+0x52>
    10d8:	8f 81       	ldd	r24, Y+7	; 0x07
    10da:	98 85       	ldd	r25, Y+8	; 0x08
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	69 f0       	breq	.+26     	; 0x10fa <DIO_ErrStateSetPinDirection+0x6a>
    10e0:	60 c0       	rjmp	.+192    	; 0x11a2 <DIO_ErrStateSetPinDirection+0x112>
    10e2:	2f 81       	ldd	r18, Y+7	; 0x07
    10e4:	38 85       	ldd	r19, Y+8	; 0x08
    10e6:	22 30       	cpi	r18, 0x02	; 2
    10e8:	31 05       	cpc	r19, r1
    10ea:	89 f1       	breq	.+98     	; 0x114e <DIO_ErrStateSetPinDirection+0xbe>
    10ec:	8f 81       	ldd	r24, Y+7	; 0x07
    10ee:	98 85       	ldd	r25, Y+8	; 0x08
    10f0:	83 30       	cpi	r24, 0x03	; 3
    10f2:	91 05       	cpc	r25, r1
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <DIO_ErrStateSetPinDirection+0x68>
    10f6:	40 c0       	rjmp	.+128    	; 0x1178 <DIO_ErrStateSetPinDirection+0xe8>
    10f8:	54 c0       	rjmp	.+168    	; 0x11a2 <DIO_ErrStateSetPinDirection+0x112>
			case DIO_GroupA:
						Clr_Bit(ddra,Copy_PinNumber);
    10fa:	aa e3       	ldi	r26, 0x3A	; 58
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	ea e3       	ldi	r30, 0x3A	; 58
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	48 2f       	mov	r20, r24
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	02 2e       	mov	r0, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <DIO_ErrStateSetPinDirection+0x88>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	0a 94       	dec	r0
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <DIO_ErrStateSetPinDirection+0x84>
    111c:	80 95       	com	r24
    111e:	84 23       	and	r24, r20
    1120:	8c 93       	st	X, r24
    1122:	bb c0       	rjmp	.+374    	; 0x129a <DIO_ErrStateSetPinDirection+0x20a>
						break;
			case DIO_GroupB:
						Clr_Bit(ddrb,Copy_PinNumber);
    1124:	a7 e3       	ldi	r26, 0x37	; 55
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e7 e3       	ldi	r30, 0x37	; 55
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	48 2f       	mov	r20, r24
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 2e       	mov	r0, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_ErrStateSetPinDirection+0xb2>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_ErrStateSetPinDirection+0xae>
    1146:	80 95       	com	r24
    1148:	84 23       	and	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	a6 c0       	rjmp	.+332    	; 0x129a <DIO_ErrStateSetPinDirection+0x20a>
						break;
			case DIO_GroupC:
						Clr_Bit(ddrc,Copy_PinNumber);
    114e:	a4 e3       	ldi	r26, 0x34	; 52
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e4 e3       	ldi	r30, 0x34	; 52
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 2e       	mov	r0, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_ErrStateSetPinDirection+0xdc>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_ErrStateSetPinDirection+0xd8>
    1170:	80 95       	com	r24
    1172:	84 23       	and	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	91 c0       	rjmp	.+290    	; 0x129a <DIO_ErrStateSetPinDirection+0x20a>
						break;
			case DIO_GroupD:
						Clr_Bit(ddrd,Copy_PinNumber);
    1178:	a1 e3       	ldi	r26, 0x31	; 49
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e1 e3       	ldi	r30, 0x31	; 49
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_ErrStateSetPinDirection+0x106>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_ErrStateSetPinDirection+0x102>
    119a:	80 95       	com	r24
    119c:	84 23       	and	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	7c c0       	rjmp	.+248    	; 0x129a <DIO_ErrStateSetPinDirection+0x20a>
						break;
			default:
				return GroupError;
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	9e 83       	std	Y+6, r25	; 0x06
    11a6:	7d c0       	rjmp	.+250    	; 0x12a2 <DIO_ErrStateSetPinDirection+0x212>
				break;
		}
		}

		else if(Copy_DirectionState==DIO_Output)
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <DIO_ErrStateSetPinDirection+0x120>
    11ae:	72 c0       	rjmp	.+228    	; 0x1294 <DIO_ErrStateSetPinDirection+0x204>
			{
			switch (Copy_GroupNumber) {
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	3d 83       	std	Y+5, r19	; 0x05
    11b8:	2c 83       	std	Y+4, r18	; 0x04
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	9d 81       	ldd	r25, Y+5	; 0x05
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	91 05       	cpc	r25, r1
    11c2:	49 f1       	breq	.+82     	; 0x1216 <DIO_ErrStateSetPinDirection+0x186>
    11c4:	2c 81       	ldd	r18, Y+4	; 0x04
    11c6:	3d 81       	ldd	r19, Y+5	; 0x05
    11c8:	22 30       	cpi	r18, 0x02	; 2
    11ca:	31 05       	cpc	r19, r1
    11cc:	2c f4       	brge	.+10     	; 0x11d8 <DIO_ErrStateSetPinDirection+0x148>
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	9d 81       	ldd	r25, Y+5	; 0x05
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	61 f0       	breq	.+24     	; 0x11ee <DIO_ErrStateSetPinDirection+0x15e>
    11d6:	5b c0       	rjmp	.+182    	; 0x128e <DIO_ErrStateSetPinDirection+0x1fe>
    11d8:	2c 81       	ldd	r18, Y+4	; 0x04
    11da:	3d 81       	ldd	r19, Y+5	; 0x05
    11dc:	22 30       	cpi	r18, 0x02	; 2
    11de:	31 05       	cpc	r19, r1
    11e0:	71 f1       	breq	.+92     	; 0x123e <DIO_ErrStateSetPinDirection+0x1ae>
    11e2:	8c 81       	ldd	r24, Y+4	; 0x04
    11e4:	9d 81       	ldd	r25, Y+5	; 0x05
    11e6:	83 30       	cpi	r24, 0x03	; 3
    11e8:	91 05       	cpc	r25, r1
    11ea:	e9 f1       	breq	.+122    	; 0x1266 <DIO_ErrStateSetPinDirection+0x1d6>
    11ec:	50 c0       	rjmp	.+160    	; 0x128e <DIO_ErrStateSetPinDirection+0x1fe>
				case DIO_GroupA:
							Set_Bit(ddra,Copy_PinNumber);
    11ee:	aa e3       	ldi	r26, 0x3A	; 58
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	ea e3       	ldi	r30, 0x3A	; 58
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_ErrStateSetPinDirection+0x17c>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_ErrStateSetPinDirection+0x178>
    1210:	84 2b       	or	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	42 c0       	rjmp	.+132    	; 0x129a <DIO_ErrStateSetPinDirection+0x20a>
							break;
				case DIO_GroupB:
							Set_Bit(ddrb,Copy_PinNumber);
    1216:	a7 e3       	ldi	r26, 0x37	; 55
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e7 e3       	ldi	r30, 0x37	; 55
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_ErrStateSetPinDirection+0x1a4>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_ErrStateSetPinDirection+0x1a0>
    1238:	84 2b       	or	r24, r20
    123a:	8c 93       	st	X, r24
    123c:	2e c0       	rjmp	.+92     	; 0x129a <DIO_ErrStateSetPinDirection+0x20a>
							break;
				case DIO_GroupC:
							Set_Bit(ddrc,Copy_PinNumber);
    123e:	a4 e3       	ldi	r26, 0x34	; 52
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e4 e3       	ldi	r30, 0x34	; 52
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <DIO_ErrStateSetPinDirection+0x1cc>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <DIO_ErrStateSetPinDirection+0x1c8>
    1260:	84 2b       	or	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	1a c0       	rjmp	.+52     	; 0x129a <DIO_ErrStateSetPinDirection+0x20a>
							break;
				case DIO_GroupD:
							Set_Bit(ddrd,Copy_PinNumber);
    1266:	a1 e3       	ldi	r26, 0x31	; 49
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e1 e3       	ldi	r30, 0x31	; 49
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	48 2f       	mov	r20, r24
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	02 2e       	mov	r0, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_ErrStateSetPinDirection+0x1f4>
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	0a 94       	dec	r0
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <DIO_ErrStateSetPinDirection+0x1f0>
    1288:	84 2b       	or	r24, r20
    128a:	8c 93       	st	X, r24
    128c:	06 c0       	rjmp	.+12     	; 0x129a <DIO_ErrStateSetPinDirection+0x20a>
							break;
				default:
					return GroupError;
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	9e 83       	std	Y+6, r25	; 0x06
    1292:	07 c0       	rjmp	.+14     	; 0x12a2 <DIO_ErrStateSetPinDirection+0x212>
					break;
			}
			}
			else
			{
				return DirectionError;
    1294:	23 e0       	ldi	r18, 0x03	; 3
    1296:	2e 83       	std	Y+6, r18	; 0x06
    1298:	04 c0       	rjmp	.+8      	; 0x12a2 <DIO_ErrStateSetPinDirection+0x212>
			}
			return NoError;
    129a:	1e 82       	std	Y+6, r1	; 0x06
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <DIO_ErrStateSetPinDirection+0x212>
	}
	return PinNumberError;
    129e:	32 e0       	ldi	r19, 0x02	; 2
    12a0:	3e 83       	std	Y+6, r19	; 0x06
    12a2:	8e 81       	ldd	r24, Y+6	; 0x06
}
    12a4:	28 96       	adiw	r28, 0x08	; 8
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <DIO_ErrStateSetGroupDirection>:

ErrState DIO_ErrStateSetGroupDirection (DIO_GroupNumber Copy_GroupNumber,DIO_DirectionState Copy_DirectionState)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <DIO_ErrStateSetGroupDirection+0x6>
    12bc:	00 d0       	rcall	.+0      	; 0x12be <DIO_ErrStateSetGroupDirection+0x8>
    12be:	0f 92       	push	r0
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	6a 83       	std	Y+2, r22	; 0x02
if (Copy_DirectionState<=0xff &&Copy_DirectionState>=0x00)
{
	switch(Copy_GroupNumber)
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	3d 83       	std	Y+5, r19	; 0x05
    12d0:	2c 83       	std	Y+4, r18	; 0x04
    12d2:	8c 81       	ldd	r24, Y+4	; 0x04
    12d4:	9d 81       	ldd	r25, Y+5	; 0x05
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	91 05       	cpc	r25, r1
    12da:	d1 f0       	breq	.+52     	; 0x1310 <DIO_ErrStateSetGroupDirection+0x5a>
    12dc:	2c 81       	ldd	r18, Y+4	; 0x04
    12de:	3d 81       	ldd	r19, Y+5	; 0x05
    12e0:	22 30       	cpi	r18, 0x02	; 2
    12e2:	31 05       	cpc	r19, r1
    12e4:	2c f4       	brge	.+10     	; 0x12f0 <DIO_ErrStateSetGroupDirection+0x3a>
    12e6:	8c 81       	ldd	r24, Y+4	; 0x04
    12e8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	61 f0       	breq	.+24     	; 0x1306 <DIO_ErrStateSetGroupDirection+0x50>
    12ee:	1f c0       	rjmp	.+62     	; 0x132e <DIO_ErrStateSetGroupDirection+0x78>
    12f0:	2c 81       	ldd	r18, Y+4	; 0x04
    12f2:	3d 81       	ldd	r19, Y+5	; 0x05
    12f4:	22 30       	cpi	r18, 0x02	; 2
    12f6:	31 05       	cpc	r19, r1
    12f8:	81 f0       	breq	.+32     	; 0x131a <DIO_ErrStateSetGroupDirection+0x64>
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	9d 81       	ldd	r25, Y+5	; 0x05
    12fe:	83 30       	cpi	r24, 0x03	; 3
    1300:	91 05       	cpc	r25, r1
    1302:	81 f0       	breq	.+32     	; 0x1324 <DIO_ErrStateSetGroupDirection+0x6e>
    1304:	14 c0       	rjmp	.+40     	; 0x132e <DIO_ErrStateSetGroupDirection+0x78>
	{
	case DIO_GroupA: ddra=Copy_DirectionState; break;
    1306:	ea e3       	ldi	r30, 0x3A	; 58
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	80 83       	st	Z, r24
    130e:	12 c0       	rjmp	.+36     	; 0x1334 <DIO_ErrStateSetGroupDirection+0x7e>
	case DIO_GroupB: ddrb=Copy_DirectionState; break;
    1310:	e7 e3       	ldi	r30, 0x37	; 55
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	80 83       	st	Z, r24
    1318:	0d c0       	rjmp	.+26     	; 0x1334 <DIO_ErrStateSetGroupDirection+0x7e>
	case DIO_GroupC: ddrc=Copy_DirectionState; break;
    131a:	e4 e3       	ldi	r30, 0x34	; 52
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	80 83       	st	Z, r24
    1322:	08 c0       	rjmp	.+16     	; 0x1334 <DIO_ErrStateSetGroupDirection+0x7e>
	case DIO_GroupD: ddrd=Copy_DirectionState; break;
    1324:	e1 e3       	ldi	r30, 0x31	; 49
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	80 83       	st	Z, r24
    132c:	03 c0       	rjmp	.+6      	; 0x1334 <DIO_ErrStateSetGroupDirection+0x7e>
	default:
		return GroupError;
    132e:	91 e0       	ldi	r25, 0x01	; 1
    1330:	9b 83       	std	Y+3, r25	; 0x03
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <DIO_ErrStateSetGroupDirection+0x80>
	}
	return NoError;
    1334:	1b 82       	std	Y+3, r1	; 0x03
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
{
	return DirectionRangError;
}


}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <DIO_ErrStateSetPinValue>:


ErrState DIO_ErrStateSetPinValue (DIO_GroupNumber Copy_GroupNumber,DIO_PinNumber Copy_PinNumber,  DIO_ValueState Copy_ValueState)
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	28 97       	sbiw	r28, 0x08	; 8
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	6a 83       	std	Y+2, r22	; 0x02
    1360:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_PinNumber>=Pin0 &&Copy_PinNumber<=Pin7)
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	88 30       	cpi	r24, 0x08	; 8
    1366:	08 f0       	brcs	.+2      	; 0x136a <DIO_ErrStateSetPinValue+0x22>
    1368:	f6 c0       	rjmp	.+492    	; 0x1556 <DIO_ErrStateSetPinValue+0x20e>
		{
			if(Copy_ValueState==DIO_Low)
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	88 23       	and	r24, r24
    136e:	09 f0       	breq	.+2      	; 0x1372 <DIO_ErrStateSetPinValue+0x2a>
    1370:	77 c0       	rjmp	.+238    	; 0x1460 <DIO_ErrStateSetPinValue+0x118>
			{
			switch (Copy_GroupNumber) {
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	38 87       	std	Y+8, r19	; 0x08
    137a:	2f 83       	std	Y+7, r18	; 0x07
    137c:	8f 81       	ldd	r24, Y+7	; 0x07
    137e:	98 85       	ldd	r25, Y+8	; 0x08
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	91 05       	cpc	r25, r1
    1384:	59 f1       	breq	.+86     	; 0x13dc <DIO_ErrStateSetPinValue+0x94>
    1386:	2f 81       	ldd	r18, Y+7	; 0x07
    1388:	38 85       	ldd	r19, Y+8	; 0x08
    138a:	22 30       	cpi	r18, 0x02	; 2
    138c:	31 05       	cpc	r19, r1
    138e:	2c f4       	brge	.+10     	; 0x139a <DIO_ErrStateSetPinValue+0x52>
    1390:	8f 81       	ldd	r24, Y+7	; 0x07
    1392:	98 85       	ldd	r25, Y+8	; 0x08
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	69 f0       	breq	.+26     	; 0x13b2 <DIO_ErrStateSetPinValue+0x6a>
    1398:	60 c0       	rjmp	.+192    	; 0x145a <DIO_ErrStateSetPinValue+0x112>
    139a:	2f 81       	ldd	r18, Y+7	; 0x07
    139c:	38 85       	ldd	r19, Y+8	; 0x08
    139e:	22 30       	cpi	r18, 0x02	; 2
    13a0:	31 05       	cpc	r19, r1
    13a2:	89 f1       	breq	.+98     	; 0x1406 <DIO_ErrStateSetPinValue+0xbe>
    13a4:	8f 81       	ldd	r24, Y+7	; 0x07
    13a6:	98 85       	ldd	r25, Y+8	; 0x08
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	91 05       	cpc	r25, r1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <DIO_ErrStateSetPinValue+0x68>
    13ae:	40 c0       	rjmp	.+128    	; 0x1430 <DIO_ErrStateSetPinValue+0xe8>
    13b0:	54 c0       	rjmp	.+168    	; 0x145a <DIO_ErrStateSetPinValue+0x112>
				case DIO_GroupA:
							Clr_Bit(porta,Copy_PinNumber);
    13b2:	ab e3       	ldi	r26, 0x3B	; 59
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	eb e3       	ldi	r30, 0x3B	; 59
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	48 2f       	mov	r20, r24
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 2e       	mov	r0, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_ErrStateSetPinValue+0x88>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_ErrStateSetPinValue+0x84>
    13d4:	80 95       	com	r24
    13d6:	84 23       	and	r24, r20
    13d8:	8c 93       	st	X, r24
    13da:	bb c0       	rjmp	.+374    	; 0x1552 <DIO_ErrStateSetPinValue+0x20a>
							break;
				case DIO_GroupB:
							Clr_Bit(portb,Copy_PinNumber);
    13dc:	a8 e3       	ldi	r26, 0x38	; 56
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e8 e3       	ldi	r30, 0x38	; 56
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 2e       	mov	r0, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <DIO_ErrStateSetPinValue+0xb2>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	0a 94       	dec	r0
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <DIO_ErrStateSetPinValue+0xae>
    13fe:	80 95       	com	r24
    1400:	84 23       	and	r24, r20
    1402:	8c 93       	st	X, r24
    1404:	a6 c0       	rjmp	.+332    	; 0x1552 <DIO_ErrStateSetPinValue+0x20a>
							break;
				case DIO_GroupC:
							Clr_Bit(portc,Copy_PinNumber);
    1406:	a5 e3       	ldi	r26, 0x35	; 53
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e5 e3       	ldi	r30, 0x35	; 53
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	48 2f       	mov	r20, r24
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	02 2e       	mov	r0, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <DIO_ErrStateSetPinValue+0xdc>
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	0a 94       	dec	r0
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <DIO_ErrStateSetPinValue+0xd8>
    1428:	80 95       	com	r24
    142a:	84 23       	and	r24, r20
    142c:	8c 93       	st	X, r24
    142e:	91 c0       	rjmp	.+290    	; 0x1552 <DIO_ErrStateSetPinValue+0x20a>
							break;
				case DIO_GroupD:
							Clr_Bit(portd,Copy_PinNumber);
    1430:	a2 e3       	ldi	r26, 0x32	; 50
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e2 e3       	ldi	r30, 0x32	; 50
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	48 2f       	mov	r20, r24
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 2e       	mov	r0, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <DIO_ErrStateSetPinValue+0x106>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	0a 94       	dec	r0
    1450:	e2 f7       	brpl	.-8      	; 0x144a <DIO_ErrStateSetPinValue+0x102>
    1452:	80 95       	com	r24
    1454:	84 23       	and	r24, r20
    1456:	8c 93       	st	X, r24
    1458:	7c c0       	rjmp	.+248    	; 0x1552 <DIO_ErrStateSetPinValue+0x20a>
							break;
				default:
					return GroupError;
    145a:	91 e0       	ldi	r25, 0x01	; 1
    145c:	9e 83       	std	Y+6, r25	; 0x06
    145e:	7d c0       	rjmp	.+250    	; 0x155a <DIO_ErrStateSetPinValue+0x212>
					break;
			}
			}

			else if(Copy_ValueState==DIO_High)
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	09 f0       	breq	.+2      	; 0x1468 <DIO_ErrStateSetPinValue+0x120>
    1466:	72 c0       	rjmp	.+228    	; 0x154c <DIO_ErrStateSetPinValue+0x204>
				{
				switch (Copy_GroupNumber) {
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	3d 83       	std	Y+5, r19	; 0x05
    1470:	2c 83       	std	Y+4, r18	; 0x04
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
    1474:	9d 81       	ldd	r25, Y+5	; 0x05
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	91 05       	cpc	r25, r1
    147a:	49 f1       	breq	.+82     	; 0x14ce <DIO_ErrStateSetPinValue+0x186>
    147c:	2c 81       	ldd	r18, Y+4	; 0x04
    147e:	3d 81       	ldd	r19, Y+5	; 0x05
    1480:	22 30       	cpi	r18, 0x02	; 2
    1482:	31 05       	cpc	r19, r1
    1484:	2c f4       	brge	.+10     	; 0x1490 <DIO_ErrStateSetPinValue+0x148>
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	61 f0       	breq	.+24     	; 0x14a6 <DIO_ErrStateSetPinValue+0x15e>
    148e:	5b c0       	rjmp	.+182    	; 0x1546 <DIO_ErrStateSetPinValue+0x1fe>
    1490:	2c 81       	ldd	r18, Y+4	; 0x04
    1492:	3d 81       	ldd	r19, Y+5	; 0x05
    1494:	22 30       	cpi	r18, 0x02	; 2
    1496:	31 05       	cpc	r19, r1
    1498:	71 f1       	breq	.+92     	; 0x14f6 <DIO_ErrStateSetPinValue+0x1ae>
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	9d 81       	ldd	r25, Y+5	; 0x05
    149e:	83 30       	cpi	r24, 0x03	; 3
    14a0:	91 05       	cpc	r25, r1
    14a2:	e9 f1       	breq	.+122    	; 0x151e <DIO_ErrStateSetPinValue+0x1d6>
    14a4:	50 c0       	rjmp	.+160    	; 0x1546 <DIO_ErrStateSetPinValue+0x1fe>
					case DIO_GroupA:
								Set_Bit(porta,Copy_PinNumber);
    14a6:	ab e3       	ldi	r26, 0x3B	; 59
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	eb e3       	ldi	r30, 0x3B	; 59
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_ErrStateSetPinValue+0x17c>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_ErrStateSetPinValue+0x178>
    14c8:	84 2b       	or	r24, r20
    14ca:	8c 93       	st	X, r24
    14cc:	42 c0       	rjmp	.+132    	; 0x1552 <DIO_ErrStateSetPinValue+0x20a>
								break;
					case DIO_GroupB:
								Set_Bit(portb,Copy_PinNumber);
    14ce:	a8 e3       	ldi	r26, 0x38	; 56
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e8 e3       	ldi	r30, 0x38	; 56
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO_ErrStateSetPinValue+0x1a4>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <DIO_ErrStateSetPinValue+0x1a0>
    14f0:	84 2b       	or	r24, r20
    14f2:	8c 93       	st	X, r24
    14f4:	2e c0       	rjmp	.+92     	; 0x1552 <DIO_ErrStateSetPinValue+0x20a>
								break;
					case DIO_GroupC:
								Set_Bit(portc,Copy_PinNumber);
    14f6:	a5 e3       	ldi	r26, 0x35	; 53
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e5 e3       	ldi	r30, 0x35	; 53
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DIO_ErrStateSetPinValue+0x1cc>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <DIO_ErrStateSetPinValue+0x1c8>
    1518:	84 2b       	or	r24, r20
    151a:	8c 93       	st	X, r24
    151c:	1a c0       	rjmp	.+52     	; 0x1552 <DIO_ErrStateSetPinValue+0x20a>
								break;
					case DIO_GroupD:
								Set_Bit(portd,Copy_PinNumber);
    151e:	a2 e3       	ldi	r26, 0x32	; 50
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e2 e3       	ldi	r30, 0x32	; 50
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_ErrStateSetPinValue+0x1f4>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <DIO_ErrStateSetPinValue+0x1f0>
    1540:	84 2b       	or	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	06 c0       	rjmp	.+12     	; 0x1552 <DIO_ErrStateSetPinValue+0x20a>
								break;
					default:
						return GroupError;
    1546:	91 e0       	ldi	r25, 0x01	; 1
    1548:	9e 83       	std	Y+6, r25	; 0x06
    154a:	07 c0       	rjmp	.+14     	; 0x155a <DIO_ErrStateSetPinValue+0x212>
						break;
				}
				}
				else
				{
					return ValueError;
    154c:	26 e0       	ldi	r18, 0x06	; 6
    154e:	2e 83       	std	Y+6, r18	; 0x06
    1550:	04 c0       	rjmp	.+8      	; 0x155a <DIO_ErrStateSetPinValue+0x212>
				}
				return NoError;
    1552:	1e 82       	std	Y+6, r1	; 0x06
    1554:	02 c0       	rjmp	.+4      	; 0x155a <DIO_ErrStateSetPinValue+0x212>
		}
		return PinNumberError;
    1556:	32 e0       	ldi	r19, 0x02	; 2
    1558:	3e 83       	std	Y+6, r19	; 0x06
    155a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    155c:	28 96       	adiw	r28, 0x08	; 8
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	de bf       	out	0x3e, r29	; 62
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	cd bf       	out	0x3d, r28	; 61
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <DIO_ErrStateSetGroupValue>:

ErrState DIO_ErrStateSetGroupValue (DIO_GroupNumber Copy_GroupNumber,DIO_ValueState Copy_ValueState)
{
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	00 d0       	rcall	.+0      	; 0x1574 <DIO_ErrStateSetGroupValue+0x6>
    1574:	00 d0       	rcall	.+0      	; 0x1576 <DIO_ErrStateSetGroupValue+0x8>
    1576:	0f 92       	push	r0
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_ValueState<=0xff &&Copy_ValueState>=0x00)
	{
		switch(Copy_GroupNumber)
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	3d 83       	std	Y+5, r19	; 0x05
    1588:	2c 83       	std	Y+4, r18	; 0x04
    158a:	8c 81       	ldd	r24, Y+4	; 0x04
    158c:	9d 81       	ldd	r25, Y+5	; 0x05
    158e:	81 30       	cpi	r24, 0x01	; 1
    1590:	91 05       	cpc	r25, r1
    1592:	d1 f0       	breq	.+52     	; 0x15c8 <DIO_ErrStateSetGroupValue+0x5a>
    1594:	2c 81       	ldd	r18, Y+4	; 0x04
    1596:	3d 81       	ldd	r19, Y+5	; 0x05
    1598:	22 30       	cpi	r18, 0x02	; 2
    159a:	31 05       	cpc	r19, r1
    159c:	2c f4       	brge	.+10     	; 0x15a8 <DIO_ErrStateSetGroupValue+0x3a>
    159e:	8c 81       	ldd	r24, Y+4	; 0x04
    15a0:	9d 81       	ldd	r25, Y+5	; 0x05
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	61 f0       	breq	.+24     	; 0x15be <DIO_ErrStateSetGroupValue+0x50>
    15a6:	1f c0       	rjmp	.+62     	; 0x15e6 <DIO_ErrStateSetGroupValue+0x78>
    15a8:	2c 81       	ldd	r18, Y+4	; 0x04
    15aa:	3d 81       	ldd	r19, Y+5	; 0x05
    15ac:	22 30       	cpi	r18, 0x02	; 2
    15ae:	31 05       	cpc	r19, r1
    15b0:	81 f0       	breq	.+32     	; 0x15d2 <DIO_ErrStateSetGroupValue+0x64>
    15b2:	8c 81       	ldd	r24, Y+4	; 0x04
    15b4:	9d 81       	ldd	r25, Y+5	; 0x05
    15b6:	83 30       	cpi	r24, 0x03	; 3
    15b8:	91 05       	cpc	r25, r1
    15ba:	81 f0       	breq	.+32     	; 0x15dc <DIO_ErrStateSetGroupValue+0x6e>
    15bc:	14 c0       	rjmp	.+40     	; 0x15e6 <DIO_ErrStateSetGroupValue+0x78>
		{
		case DIO_GroupA: porta=Copy_ValueState; break;
    15be:	eb e3       	ldi	r30, 0x3B	; 59
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	80 83       	st	Z, r24
    15c6:	12 c0       	rjmp	.+36     	; 0x15ec <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupB: portb=Copy_ValueState; break;
    15c8:	e8 e3       	ldi	r30, 0x38	; 56
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	80 83       	st	Z, r24
    15d0:	0d c0       	rjmp	.+26     	; 0x15ec <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupC: portc=Copy_ValueState; break;
    15d2:	e5 e3       	ldi	r30, 0x35	; 53
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	80 83       	st	Z, r24
    15da:	08 c0       	rjmp	.+16     	; 0x15ec <DIO_ErrStateSetGroupValue+0x7e>
		case DIO_GroupD: portd=Copy_ValueState; break;
    15dc:	e2 e3       	ldi	r30, 0x32	; 50
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	80 83       	st	Z, r24
    15e4:	03 c0       	rjmp	.+6      	; 0x15ec <DIO_ErrStateSetGroupValue+0x7e>
		default:
			return GroupError;
    15e6:	91 e0       	ldi	r25, 0x01	; 1
    15e8:	9b 83       	std	Y+3, r25	; 0x03
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <DIO_ErrStateSetGroupValue+0x80>
		}
		return NoError;
    15ec:	1b 82       	std	Y+3, r1	; 0x03
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	else
	{
		return ValueRangError;
	}
}
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <DIO_ErrStateReadPinValue>:

ErrState DIO_ErrStateReadPinValue (DIO_GroupNumber Copy_GroupNumber,DIO_PinNumber Copy_PinNumber,  u8 *Result)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	27 97       	sbiw	r28, 0x07	; 7
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	6a 83       	std	Y+2, r22	; 0x02
    1618:	5c 83       	std	Y+4, r21	; 0x04
    161a:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_PinNumber>=Pin0 &&Copy_PinNumber<=Pin7)
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	88 30       	cpi	r24, 0x08	; 8
    1620:	08 f0       	brcs	.+2      	; 0x1624 <DIO_ErrStateReadPinValue+0x24>
    1622:	76 c0       	rjmp	.+236    	; 0x1710 <DIO_ErrStateReadPinValue+0x110>
			{
				switch (Copy_GroupNumber) {
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	3f 83       	std	Y+7, r19	; 0x07
    162c:	2e 83       	std	Y+6, r18	; 0x06
    162e:	4e 81       	ldd	r20, Y+6	; 0x06
    1630:	5f 81       	ldd	r21, Y+7	; 0x07
    1632:	41 30       	cpi	r20, 0x01	; 1
    1634:	51 05       	cpc	r21, r1
    1636:	59 f1       	breq	.+86     	; 0x168e <DIO_ErrStateReadPinValue+0x8e>
    1638:	8e 81       	ldd	r24, Y+6	; 0x06
    163a:	9f 81       	ldd	r25, Y+7	; 0x07
    163c:	82 30       	cpi	r24, 0x02	; 2
    163e:	91 05       	cpc	r25, r1
    1640:	34 f4       	brge	.+12     	; 0x164e <DIO_ErrStateReadPinValue+0x4e>
    1642:	2e 81       	ldd	r18, Y+6	; 0x06
    1644:	3f 81       	ldd	r19, Y+7	; 0x07
    1646:	21 15       	cp	r18, r1
    1648:	31 05       	cpc	r19, r1
    164a:	69 f0       	breq	.+26     	; 0x1666 <DIO_ErrStateReadPinValue+0x66>
    164c:	5c c0       	rjmp	.+184    	; 0x1706 <DIO_ErrStateReadPinValue+0x106>
    164e:	4e 81       	ldd	r20, Y+6	; 0x06
    1650:	5f 81       	ldd	r21, Y+7	; 0x07
    1652:	42 30       	cpi	r20, 0x02	; 2
    1654:	51 05       	cpc	r21, r1
    1656:	79 f1       	breq	.+94     	; 0x16b6 <DIO_ErrStateReadPinValue+0xb6>
    1658:	8e 81       	ldd	r24, Y+6	; 0x06
    165a:	9f 81       	ldd	r25, Y+7	; 0x07
    165c:	83 30       	cpi	r24, 0x03	; 3
    165e:	91 05       	cpc	r25, r1
    1660:	09 f4       	brne	.+2      	; 0x1664 <DIO_ErrStateReadPinValue+0x64>
    1662:	3d c0       	rjmp	.+122    	; 0x16de <DIO_ErrStateReadPinValue+0xde>
    1664:	50 c0       	rjmp	.+160    	; 0x1706 <DIO_ErrStateReadPinValue+0x106>
					case DIO_GroupA:
								*Result=Get_Bit(pina,Copy_PinNumber);
    1666:	e9 e3       	ldi	r30, 0x39	; 57
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	88 2f       	mov	r24, r24
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	a9 01       	movw	r20, r18
    1678:	02 c0       	rjmp	.+4      	; 0x167e <DIO_ErrStateReadPinValue+0x7e>
    167a:	55 95       	asr	r21
    167c:	47 95       	ror	r20
    167e:	8a 95       	dec	r24
    1680:	e2 f7       	brpl	.-8      	; 0x167a <DIO_ErrStateReadPinValue+0x7a>
    1682:	ca 01       	movw	r24, r20
    1684:	81 70       	andi	r24, 0x01	; 1
    1686:	eb 81       	ldd	r30, Y+3	; 0x03
    1688:	fc 81       	ldd	r31, Y+4	; 0x04
    168a:	80 83       	st	Z, r24
    168c:	3f c0       	rjmp	.+126    	; 0x170c <DIO_ErrStateReadPinValue+0x10c>
								break;
					case DIO_GroupB:
						*Result=Get_Bit(pinb,Copy_PinNumber);
    168e:	e6 e3       	ldi	r30, 0x36	; 54
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	88 2f       	mov	r24, r24
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	a9 01       	movw	r20, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <DIO_ErrStateReadPinValue+0xa6>
    16a2:	55 95       	asr	r21
    16a4:	47 95       	ror	r20
    16a6:	8a 95       	dec	r24
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <DIO_ErrStateReadPinValue+0xa2>
    16aa:	ca 01       	movw	r24, r20
    16ac:	81 70       	andi	r24, 0x01	; 1
    16ae:	eb 81       	ldd	r30, Y+3	; 0x03
    16b0:	fc 81       	ldd	r31, Y+4	; 0x04
    16b2:	80 83       	st	Z, r24
    16b4:	2b c0       	rjmp	.+86     	; 0x170c <DIO_ErrStateReadPinValue+0x10c>
								break;
					case DIO_GroupC:
						*Result=Get_Bit(pinc,Copy_PinNumber);
    16b6:	e3 e3       	ldi	r30, 0x33	; 51
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	a9 01       	movw	r20, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <DIO_ErrStateReadPinValue+0xce>
    16ca:	55 95       	asr	r21
    16cc:	47 95       	ror	r20
    16ce:	8a 95       	dec	r24
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <DIO_ErrStateReadPinValue+0xca>
    16d2:	ca 01       	movw	r24, r20
    16d4:	81 70       	andi	r24, 0x01	; 1
    16d6:	eb 81       	ldd	r30, Y+3	; 0x03
    16d8:	fc 81       	ldd	r31, Y+4	; 0x04
    16da:	80 83       	st	Z, r24
    16dc:	17 c0       	rjmp	.+46     	; 0x170c <DIO_ErrStateReadPinValue+0x10c>
								break;
					case DIO_GroupD:
						*Result=Get_Bit(pind,Copy_PinNumber);
    16de:	e0 e3       	ldi	r30, 0x30	; 48
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	88 2f       	mov	r24, r24
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	a9 01       	movw	r20, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_ErrStateReadPinValue+0xf6>
    16f2:	55 95       	asr	r21
    16f4:	47 95       	ror	r20
    16f6:	8a 95       	dec	r24
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_ErrStateReadPinValue+0xf2>
    16fa:	ca 01       	movw	r24, r20
    16fc:	81 70       	andi	r24, 0x01	; 1
    16fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1700:	fc 81       	ldd	r31, Y+4	; 0x04
    1702:	80 83       	st	Z, r24
    1704:	03 c0       	rjmp	.+6      	; 0x170c <DIO_ErrStateReadPinValue+0x10c>
								break;
					default:
						return GroupError;
    1706:	51 e0       	ldi	r21, 0x01	; 1
    1708:	5d 83       	std	Y+5, r21	; 0x05
    170a:	04 c0       	rjmp	.+8      	; 0x1714 <DIO_ErrStateReadPinValue+0x114>
						break;
				}
				return NoError;
    170c:	1d 82       	std	Y+5, r1	; 0x05
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <DIO_ErrStateReadPinValue+0x114>
			}
	else
	{
		return PinNumberError;
    1710:	82 e0       	ldi	r24, 0x02	; 2
    1712:	8d 83       	std	Y+5, r24	; 0x05
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
	}

}
    1716:	27 96       	adiw	r28, 0x07	; 7
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <DIO_ErrStateReadGroupValue>:

ErrState DIO_ErrStateReadGroupValue (DIO_GroupNumber Copy_GroupNumber,u8 *Result)
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	00 d0       	rcall	.+0      	; 0x172e <DIO_ErrStateReadGroupValue+0x6>
    172e:	00 d0       	rcall	.+0      	; 0x1730 <DIO_ErrStateReadGroupValue+0x8>
    1730:	00 d0       	rcall	.+0      	; 0x1732 <DIO_ErrStateReadGroupValue+0xa>
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	7b 83       	std	Y+3, r23	; 0x03
    173a:	6a 83       	std	Y+2, r22	; 0x02

	if (Result!=null)
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	9b 81       	ldd	r25, Y+3	; 0x03
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	09 f4       	brne	.+2      	; 0x1746 <DIO_ErrStateReadGroupValue+0x1e>
    1744:	40 c0       	rjmp	.+128    	; 0x17c6 <DIO_ErrStateReadGroupValue+0x9e>
			{
				switch (Copy_GroupNumber) {
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	3e 83       	std	Y+6, r19	; 0x06
    174e:	2d 83       	std	Y+5, r18	; 0x05
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	9e 81       	ldd	r25, Y+6	; 0x06
    1754:	81 30       	cpi	r24, 0x01	; 1
    1756:	91 05       	cpc	r25, r1
    1758:	e1 f0       	breq	.+56     	; 0x1792 <DIO_ErrStateReadGroupValue+0x6a>
    175a:	2d 81       	ldd	r18, Y+5	; 0x05
    175c:	3e 81       	ldd	r19, Y+6	; 0x06
    175e:	22 30       	cpi	r18, 0x02	; 2
    1760:	31 05       	cpc	r19, r1
    1762:	2c f4       	brge	.+10     	; 0x176e <DIO_ErrStateReadGroupValue+0x46>
    1764:	8d 81       	ldd	r24, Y+5	; 0x05
    1766:	9e 81       	ldd	r25, Y+6	; 0x06
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	61 f0       	breq	.+24     	; 0x1784 <DIO_ErrStateReadGroupValue+0x5c>
    176c:	27 c0       	rjmp	.+78     	; 0x17bc <DIO_ErrStateReadGroupValue+0x94>
    176e:	2d 81       	ldd	r18, Y+5	; 0x05
    1770:	3e 81       	ldd	r19, Y+6	; 0x06
    1772:	22 30       	cpi	r18, 0x02	; 2
    1774:	31 05       	cpc	r19, r1
    1776:	a1 f0       	breq	.+40     	; 0x17a0 <DIO_ErrStateReadGroupValue+0x78>
    1778:	8d 81       	ldd	r24, Y+5	; 0x05
    177a:	9e 81       	ldd	r25, Y+6	; 0x06
    177c:	83 30       	cpi	r24, 0x03	; 3
    177e:	91 05       	cpc	r25, r1
    1780:	b1 f0       	breq	.+44     	; 0x17ae <DIO_ErrStateReadGroupValue+0x86>
    1782:	1c c0       	rjmp	.+56     	; 0x17bc <DIO_ErrStateReadGroupValue+0x94>
					case DIO_GroupA:
						*Result=pina;
    1784:	e9 e3       	ldi	r30, 0x39	; 57
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	ea 81       	ldd	r30, Y+2	; 0x02
    178c:	fb 81       	ldd	r31, Y+3	; 0x03
    178e:	80 83       	st	Z, r24
    1790:	18 c0       	rjmp	.+48     	; 0x17c2 <DIO_ErrStateReadGroupValue+0x9a>
								break;
					case DIO_GroupB:
						*Result=pinb;
    1792:	e6 e3       	ldi	r30, 0x36	; 54
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	ea 81       	ldd	r30, Y+2	; 0x02
    179a:	fb 81       	ldd	r31, Y+3	; 0x03
    179c:	80 83       	st	Z, r24
    179e:	11 c0       	rjmp	.+34     	; 0x17c2 <DIO_ErrStateReadGroupValue+0x9a>
								break;
					case DIO_GroupC:
						*Result=pinc;
    17a0:	e3 e3       	ldi	r30, 0x33	; 51
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	ea 81       	ldd	r30, Y+2	; 0x02
    17a8:	fb 81       	ldd	r31, Y+3	; 0x03
    17aa:	80 83       	st	Z, r24
    17ac:	0a c0       	rjmp	.+20     	; 0x17c2 <DIO_ErrStateReadGroupValue+0x9a>
								break;
					case DIO_GroupD:
						*Result=pind;
    17ae:	e0 e3       	ldi	r30, 0x30	; 48
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	ea 81       	ldd	r30, Y+2	; 0x02
    17b6:	fb 81       	ldd	r31, Y+3	; 0x03
    17b8:	80 83       	st	Z, r24
    17ba:	03 c0       	rjmp	.+6      	; 0x17c2 <DIO_ErrStateReadGroupValue+0x9a>
								break;
					default:
						return GroupError;
    17bc:	91 e0       	ldi	r25, 0x01	; 1
    17be:	9c 83       	std	Y+4, r25	; 0x04
    17c0:	04 c0       	rjmp	.+8      	; 0x17ca <DIO_ErrStateReadGroupValue+0xa2>
						break;
				}
				return NoError;
    17c2:	1c 82       	std	Y+4, r1	; 0x04
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <DIO_ErrStateReadGroupValue+0xa2>
			}
	else
	{
		return AddressError;
    17c6:	25 e0       	ldi	r18, 0x05	; 5
    17c8:	2c 83       	std	Y+4, r18	; 0x04
    17ca:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    17cc:	26 96       	adiw	r28, 0x06	; 6
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <SevSeg_SevErrStateSetNumber>:
#include "../../Common/definitions.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "SevSeg_Interface.h"

SevErrState SevSeg_SevErrStateSetNumber(u8 Copy_Number , SevSeg_info * SevenSegment1)//if we add more than one SevSeg
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <SevSeg_SevErrStateSetNumber+0x6>
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <SevSeg_SevErrStateSetNumber+0x8>
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	7b 83       	std	Y+3, r23	; 0x03
    17ee:	6a 83       	std	Y+2, r22	; 0x02
	if (SevenSegment1->SevSeg_Type==CAnode)
    17f0:	ea 81       	ldd	r30, Y+2	; 0x02
    17f2:	fb 81       	ldd	r31, Y+3	; 0x03
    17f4:	80 81       	ld	r24, Z
    17f6:	81 30       	cpi	r24, 0x01	; 1
    17f8:	49 f5       	brne	.+82     	; 0x184c <SevSeg_SevErrStateSetNumber+0x6e>
	{
	DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,0xff);
    17fa:	ea 81       	ldd	r30, Y+2	; 0x02
    17fc:	fb 81       	ldd	r31, Y+3	; 0x03
    17fe:	81 81       	ldd	r24, Z+1	; 0x01
    1800:	6f ef       	ldi	r22, 0xFF	; 255
    1802:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <DIO_ErrStateSetGroupDirection>
	DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group, SevSeg_Arr_CA[Copy_Number]);
    1806:	ea 81       	ldd	r30, Y+2	; 0x02
    1808:	fb 81       	ldd	r31, Y+3	; 0x03
    180a:	21 81       	ldd	r18, Z+1	; 0x01
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	88 2f       	mov	r24, r24
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	fc 01       	movw	r30, r24
    1814:	ee 58       	subi	r30, 0x8E	; 142
    1816:	fe 4f       	sbci	r31, 0xFE	; 254
    1818:	90 81       	ld	r25, Z
    181a:	82 2f       	mov	r24, r18
    181c:	69 2f       	mov	r22, r25
    181e:	0e 94 b7 0a 	call	0x156e	; 0x156e <DIO_ErrStateSetGroupValue>
	DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort, SevenSegment1->SevSeg_EnablePin, DIO_Output);
    1822:	ea 81       	ldd	r30, Y+2	; 0x02
    1824:	fb 81       	ldd	r31, Y+3	; 0x03
    1826:	82 81       	ldd	r24, Z+2	; 0x02
    1828:	ea 81       	ldd	r30, Y+2	; 0x02
    182a:	fb 81       	ldd	r31, Y+3	; 0x03
    182c:	93 81       	ldd	r25, Z+3	; 0x03
    182e:	69 2f       	mov	r22, r25
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort, SevenSegment1->SevSeg_EnablePin, DIO_High);
    1836:	ea 81       	ldd	r30, Y+2	; 0x02
    1838:	fb 81       	ldd	r31, Y+3	; 0x03
    183a:	82 81       	ldd	r24, Z+2	; 0x02
    183c:	ea 81       	ldd	r30, Y+2	; 0x02
    183e:	fb 81       	ldd	r31, Y+3	; 0x03
    1840:	93 81       	ldd	r25, Z+3	; 0x03
    1842:	69 2f       	mov	r22, r25
    1844:	41 e0       	ldi	r20, 0x01	; 1
    1846:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
    184a:	30 c0       	rjmp	.+96     	; 0x18ac <SevSeg_SevErrStateSetNumber+0xce>

	}
	else if (SevenSegment1->SevSeg_Type==CCathode)
    184c:	ea 81       	ldd	r30, Y+2	; 0x02
    184e:	fb 81       	ldd	r31, Y+3	; 0x03
    1850:	80 81       	ld	r24, Z
    1852:	88 23       	and	r24, r24
    1854:	49 f5       	brne	.+82     	; 0x18a8 <SevSeg_SevErrStateSetNumber+0xca>
	{
	DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,0xff);
    1856:	ea 81       	ldd	r30, Y+2	; 0x02
    1858:	fb 81       	ldd	r31, Y+3	; 0x03
    185a:	81 81       	ldd	r24, Z+1	; 0x01
    185c:	6f ef       	ldi	r22, 0xFF	; 255
    185e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <DIO_ErrStateSetGroupDirection>
	DIO_ErrStateSetGroupValue(SevenSegment1->SevSeg_Group, SevSeg_Arr_CC[Copy_Number]);
    1862:	ea 81       	ldd	r30, Y+2	; 0x02
    1864:	fb 81       	ldd	r31, Y+3	; 0x03
    1866:	21 81       	ldd	r18, Z+1	; 0x01
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	88 2f       	mov	r24, r24
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	fc 01       	movw	r30, r24
    1870:	e8 59       	subi	r30, 0x98	; 152
    1872:	fe 4f       	sbci	r31, 0xFE	; 254
    1874:	90 81       	ld	r25, Z
    1876:	82 2f       	mov	r24, r18
    1878:	69 2f       	mov	r22, r25
    187a:	0e 94 b7 0a 	call	0x156e	; 0x156e <DIO_ErrStateSetGroupValue>
	DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort, SevenSegment1->SevSeg_EnablePin, DIO_Output);
    187e:	ea 81       	ldd	r30, Y+2	; 0x02
    1880:	fb 81       	ldd	r31, Y+3	; 0x03
    1882:	82 81       	ldd	r24, Z+2	; 0x02
    1884:	ea 81       	ldd	r30, Y+2	; 0x02
    1886:	fb 81       	ldd	r31, Y+3	; 0x03
    1888:	93 81       	ldd	r25, Z+3	; 0x03
    188a:	69 2f       	mov	r22, r25
    188c:	41 e0       	ldi	r20, 0x01	; 1
    188e:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort, SevenSegment1->SevSeg_EnablePin, DIO_Low);
    1892:	ea 81       	ldd	r30, Y+2	; 0x02
    1894:	fb 81       	ldd	r31, Y+3	; 0x03
    1896:	82 81       	ldd	r24, Z+2	; 0x02
    1898:	ea 81       	ldd	r30, Y+2	; 0x02
    189a:	fb 81       	ldd	r31, Y+3	; 0x03
    189c:	93 81       	ldd	r25, Z+3	; 0x03
    189e:	69 2f       	mov	r22, r25
    18a0:	40 e0       	ldi	r20, 0x00	; 0
    18a2:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <SevSeg_SevErrStateSetNumber+0xce>

	}
	else
	{
		return InitializationError;
    18a8:	1c 82       	std	Y+4, r1	; 0x04
    18aa:	01 c0       	rjmp	.+2      	; 0x18ae <SevSeg_SevErrStateSetNumber+0xd0>
	}
	return NoError;
    18ac:	1c 82       	std	Y+4, r1	; 0x04
    18ae:	8c 81       	ldd	r24, Y+4	; 0x04
}
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <SevSeg_SevErrStateDisplayRange>:


SevErrState SevSeg_SevErrStateDisplayRange(SevSeg_info * SevenSegment1 , u8 Copy_start , u8 Copy_End )//show first and last number
{
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <SevSeg_SevErrStateDisplayRange+0x6>
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <SevSeg_SevErrStateDisplayRange+0x8>
    18c6:	0f 92       	push	r0
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	9a 83       	std	Y+2, r25	; 0x02
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	6b 83       	std	Y+3, r22	; 0x03
    18d2:	4c 83       	std	Y+4, r20	; 0x04
SevSeg_SevErrStateSetNumber(Copy_start, SevenSegment1);
    18d4:	29 81       	ldd	r18, Y+1	; 0x01
    18d6:	3a 81       	ldd	r19, Y+2	; 0x02
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	b9 01       	movw	r22, r18
    18dc:	0e 94 ef 0b 	call	0x17de	; 0x17de <SevSeg_SevErrStateSetNumber>
SevSeg_SevErrStateSetNumber(Copy_End, SevenSegment1);
    18e0:	29 81       	ldd	r18, Y+1	; 0x01
    18e2:	3a 81       	ldd	r19, Y+2	; 0x02
    18e4:	8c 81       	ldd	r24, Y+4	; 0x04
    18e6:	b9 01       	movw	r22, r18
    18e8:	0e 94 ef 0b 	call	0x17de	; 0x17de <SevSeg_SevErrStateSetNumber>

}
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	08 95       	ret

000018fc <SevSeg_SevErrStateDisplayMax>:


SevErrState SevSeg_SevErrStateDisplayMax(SevSeg_info * SevenSegment1)//count from start to max
{
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	00 d0       	rcall	.+0      	; 0x1902 <SevSeg_SevErrStateDisplayMax+0x6>
    1902:	0f 92       	push	r0
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	9a 83       	std	Y+2, r25	; 0x02
    190a:	89 83       	std	Y+1, r24	; 0x01
	SevSeg_SevErrStateSetNumber(SevSeg_ArrSize, SevenSegment1);
    190c:	29 81       	ldd	r18, Y+1	; 0x01
    190e:	3a 81       	ldd	r19, Y+2	; 0x02
    1910:	8a e0       	ldi	r24, 0x0A	; 10
    1912:	b9 01       	movw	r22, r18
    1914:	0e 94 ef 0b 	call	0x17de	; 0x17de <SevSeg_SevErrStateSetNumber>

}
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <Led_LedErrStateTurnOn>:
#include "../../Common/definitions.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "Led_Interface.h"

LedErrState	Led_LedErrStateTurnOn(Led_info *Led)// takes input pointer of type struct(Led_info)
{
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	27 97       	sbiw	r28, 0x07	; 7
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	f8 94       	cli
    1932:	de bf       	out	0x3e, r29	; 62
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	cd bf       	out	0x3d, r28	; 61
    1938:	9e 83       	std	Y+6, r25	; 0x06
    193a:	8d 83       	std	Y+5, r24	; 0x05
	if (Led->ConnectionType==Sink_Connection)
    193c:	ed 81       	ldd	r30, Y+5	; 0x05
    193e:	fe 81       	ldd	r31, Y+6	; 0x06
    1940:	82 81       	ldd	r24, Z+2	; 0x02
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	d1 f4       	brne	.+52     	; 0x197a <Led_LedErrStateTurnOn+0x56>
	{
		ErrState Res1=DIO_ErrStateSetPinDirection(Led->Led_Group, Led->Led_Pin,DIO_Output);
    1946:	ed 81       	ldd	r30, Y+5	; 0x05
    1948:	fe 81       	ldd	r31, Y+6	; 0x06
    194a:	80 81       	ld	r24, Z
    194c:	ed 81       	ldd	r30, Y+5	; 0x05
    194e:	fe 81       	ldd	r31, Y+6	; 0x06
    1950:	91 81       	ldd	r25, Z+1	; 0x01
    1952:	69 2f       	mov	r22, r25
    1954:	41 e0       	ldi	r20, 0x01	; 1
    1956:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
    195a:	8c 83       	std	Y+4, r24	; 0x04
		if (Res1==NoError)
    195c:	8c 81       	ldd	r24, Y+4	; 0x04
    195e:	88 23       	and	r24, r24
    1960:	69 f5       	brne	.+90     	; 0x19bc <Led_LedErrStateTurnOn+0x98>
		{
			ErrState Res2=DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_Low);
    1962:	ed 81       	ldd	r30, Y+5	; 0x05
    1964:	fe 81       	ldd	r31, Y+6	; 0x06
    1966:	80 81       	ld	r24, Z
    1968:	ed 81       	ldd	r30, Y+5	; 0x05
    196a:	fe 81       	ldd	r31, Y+6	; 0x06
    196c:	91 81       	ldd	r25, Z+1	; 0x01
    196e:	69 2f       	mov	r22, r25
    1970:	40 e0       	ldi	r20, 0x00	; 0
    1972:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
    1976:	8b 83       	std	Y+3, r24	; 0x03
    1978:	21 c0       	rjmp	.+66     	; 0x19bc <Led_LedErrStateTurnOn+0x98>
		}

	}
	else if (Led->ConnectionType==Source_Connection)
    197a:	ed 81       	ldd	r30, Y+5	; 0x05
    197c:	fe 81       	ldd	r31, Y+6	; 0x06
    197e:	82 81       	ldd	r24, Z+2	; 0x02
    1980:	88 23       	and	r24, r24
    1982:	d1 f4       	brne	.+52     	; 0x19b8 <Led_LedErrStateTurnOn+0x94>
	{
		ErrState Res1=DIO_ErrStateSetPinDirection(Led->Led_Group, Led->Led_Pin,DIO_Output);
    1984:	ed 81       	ldd	r30, Y+5	; 0x05
    1986:	fe 81       	ldd	r31, Y+6	; 0x06
    1988:	80 81       	ld	r24, Z
    198a:	ed 81       	ldd	r30, Y+5	; 0x05
    198c:	fe 81       	ldd	r31, Y+6	; 0x06
    198e:	91 81       	ldd	r25, Z+1	; 0x01
    1990:	69 2f       	mov	r22, r25
    1992:	41 e0       	ldi	r20, 0x01	; 1
    1994:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
    1998:	8a 83       	std	Y+2, r24	; 0x02
		if (Res1==NoError)
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	88 23       	and	r24, r24
    199e:	71 f4       	brne	.+28     	; 0x19bc <Led_LedErrStateTurnOn+0x98>
		{
			ErrState Res2=DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_High);
    19a0:	ed 81       	ldd	r30, Y+5	; 0x05
    19a2:	fe 81       	ldd	r31, Y+6	; 0x06
    19a4:	80 81       	ld	r24, Z
    19a6:	ed 81       	ldd	r30, Y+5	; 0x05
    19a8:	fe 81       	ldd	r31, Y+6	; 0x06
    19aa:	91 81       	ldd	r25, Z+1	; 0x01
    19ac:	69 2f       	mov	r22, r25
    19ae:	41 e0       	ldi	r20, 0x01	; 1
    19b0:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <Led_LedErrStateTurnOn+0x98>
		}

	}
	else {
		return ConnectionError;
    19b8:	1f 82       	std	Y+7, r1	; 0x07
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <Led_LedErrStateTurnOn+0x9c>
	}
	return NoLedError;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	8f 83       	std	Y+7, r24	; 0x07
    19c0:	8f 81       	ldd	r24, Y+7	; 0x07
}
    19c2:	27 96       	adiw	r28, 0x07	; 7
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <Led_LedErrStateTurnOff>:


LedErrState	Led_LedErrStateTurnOff(Led_info *Led)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	27 97       	sbiw	r28, 0x07	; 7
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
    19e8:	9e 83       	std	Y+6, r25	; 0x06
    19ea:	8d 83       	std	Y+5, r24	; 0x05
	if (Led->ConnectionType==Sink_Connection)
    19ec:	ed 81       	ldd	r30, Y+5	; 0x05
    19ee:	fe 81       	ldd	r31, Y+6	; 0x06
    19f0:	82 81       	ldd	r24, Z+2	; 0x02
    19f2:	81 30       	cpi	r24, 0x01	; 1
    19f4:	d1 f4       	brne	.+52     	; 0x1a2a <Led_LedErrStateTurnOff+0x56>
	{
		ErrState Res1=DIO_ErrStateSetPinDirection(Led->Led_Group, Led->Led_Pin,DIO_Output);
    19f6:	ed 81       	ldd	r30, Y+5	; 0x05
    19f8:	fe 81       	ldd	r31, Y+6	; 0x06
    19fa:	80 81       	ld	r24, Z
    19fc:	ed 81       	ldd	r30, Y+5	; 0x05
    19fe:	fe 81       	ldd	r31, Y+6	; 0x06
    1a00:	91 81       	ldd	r25, Z+1	; 0x01
    1a02:	69 2f       	mov	r22, r25
    1a04:	41 e0       	ldi	r20, 0x01	; 1
    1a06:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
    1a0a:	8c 83       	std	Y+4, r24	; 0x04
		if (Res1==NoError)
    1a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0e:	88 23       	and	r24, r24
    1a10:	69 f5       	brne	.+90     	; 0x1a6c <Led_LedErrStateTurnOff+0x98>
		{
			ErrState Res2=DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_High);
    1a12:	ed 81       	ldd	r30, Y+5	; 0x05
    1a14:	fe 81       	ldd	r31, Y+6	; 0x06
    1a16:	80 81       	ld	r24, Z
    1a18:	ed 81       	ldd	r30, Y+5	; 0x05
    1a1a:	fe 81       	ldd	r31, Y+6	; 0x06
    1a1c:	91 81       	ldd	r25, Z+1	; 0x01
    1a1e:	69 2f       	mov	r22, r25
    1a20:	41 e0       	ldi	r20, 0x01	; 1
    1a22:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
    1a26:	8b 83       	std	Y+3, r24	; 0x03
    1a28:	21 c0       	rjmp	.+66     	; 0x1a6c <Led_LedErrStateTurnOff+0x98>
		}

	}
	else if (Led->ConnectionType==Source_Connection)
    1a2a:	ed 81       	ldd	r30, Y+5	; 0x05
    1a2c:	fe 81       	ldd	r31, Y+6	; 0x06
    1a2e:	82 81       	ldd	r24, Z+2	; 0x02
    1a30:	88 23       	and	r24, r24
    1a32:	d1 f4       	brne	.+52     	; 0x1a68 <Led_LedErrStateTurnOff+0x94>
	{
		ErrState Res1=DIO_ErrStateSetPinDirection(Led->Led_Group, Led->Led_Pin,DIO_Output);
    1a34:	ed 81       	ldd	r30, Y+5	; 0x05
    1a36:	fe 81       	ldd	r31, Y+6	; 0x06
    1a38:	80 81       	ld	r24, Z
    1a3a:	ed 81       	ldd	r30, Y+5	; 0x05
    1a3c:	fe 81       	ldd	r31, Y+6	; 0x06
    1a3e:	91 81       	ldd	r25, Z+1	; 0x01
    1a40:	69 2f       	mov	r22, r25
    1a42:	41 e0       	ldi	r20, 0x01	; 1
    1a44:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
    1a48:	8a 83       	std	Y+2, r24	; 0x02
		if (Res1==NoError)
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	88 23       	and	r24, r24
    1a4e:	71 f4       	brne	.+28     	; 0x1a6c <Led_LedErrStateTurnOff+0x98>
		{
			ErrState Res2=DIO_ErrStateSetPinValue(Led->Led_Group, Led->Led_Pin, DIO_Low);
    1a50:	ed 81       	ldd	r30, Y+5	; 0x05
    1a52:	fe 81       	ldd	r31, Y+6	; 0x06
    1a54:	80 81       	ld	r24, Z
    1a56:	ed 81       	ldd	r30, Y+5	; 0x05
    1a58:	fe 81       	ldd	r31, Y+6	; 0x06
    1a5a:	91 81       	ldd	r25, Z+1	; 0x01
    1a5c:	69 2f       	mov	r22, r25
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
    1a64:	89 83       	std	Y+1, r24	; 0x01
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <Led_LedErrStateTurnOff+0x98>
		}

	}
	else {
		return ConnectionError;
    1a68:	1f 82       	std	Y+7, r1	; 0x07
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <Led_LedErrStateTurnOff+0x9c>
	}
return NoLedError;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	8f 83       	std	Y+7, r24	; 0x07
    1a70:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1a72:	27 96       	adiw	r28, 0x07	; 7
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <Lcd_VoidSendCommand>:
#include "LCD_interface.h"
#include<util/delay.h>


void Lcd_VoidSendCommand (u8 Copy_Command,Lcd_Info *Lcd)
{
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	6f 97       	sbiw	r28, 0x1f	; 31
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	8d 8f       	std	Y+29, r24	; 0x1d
    1a9a:	7f 8f       	std	Y+31, r23	; 0x1f
    1a9c:	6e 8f       	std	Y+30, r22	; 0x1e
	//RS->Low(command)
	DIO_ErrStateSetPinValue(Lcd->RS_Group, Lcd->RS_Pin, DIO_Low);
    1a9e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1aa0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1aa2:	80 81       	ld	r24, Z
    1aa4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1aa6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1aa8:	93 81       	ldd	r25, Z+3	; 0x03
    1aaa:	69 2f       	mov	r22, r25
    1aac:	40 e0       	ldi	r20, 0x00	; 0
    1aae:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
	//RW->Low(write)
	DIO_ErrStateSetPinValue(Lcd->RW_Group, Lcd->RW_Pin, DIO_Low);
    1ab2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1ab4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1ab6:	81 81       	ldd	r24, Z+1	; 0x01
    1ab8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1aba:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1abc:	94 81       	ldd	r25, Z+4	; 0x04
    1abe:	69 2f       	mov	r22, r25
    1ac0:	40 e0       	ldi	r20, 0x00	; 0
    1ac2:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
	//group command
	DIO_ErrStateSetGroupValue(Lcd->Data_Group,Copy_Command);
    1ac6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1ac8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1aca:	86 81       	ldd	r24, Z+6	; 0x06
    1acc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ace:	0e 94 b7 0a 	call	0x156e	; 0x156e <DIO_ErrStateSetGroupValue>
	//enable
	DIO_ErrStateSetPinValue(Lcd->E_Group, Lcd->E_Pin, DIO_High);
    1ad2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1ad4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1ad6:	82 81       	ldd	r24, Z+2	; 0x02
    1ad8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1ada:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1adc:	95 81       	ldd	r25, Z+5	; 0x05
    1ade:	69 2f       	mov	r22, r25
    1ae0:	41 e0       	ldi	r20, 0x01	; 1
    1ae2:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	a0 e8       	ldi	r26, 0x80	; 128
    1aec:	bf e3       	ldi	r27, 0x3F	; 63
    1aee:	89 8f       	std	Y+25, r24	; 0x19
    1af0:	9a 8f       	std	Y+26, r25	; 0x1a
    1af2:	ab 8f       	std	Y+27, r26	; 0x1b
    1af4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af6:	69 8d       	ldd	r22, Y+25	; 0x19
    1af8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1afa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	4a ef       	ldi	r20, 0xFA	; 250
    1b04:	54 e4       	ldi	r21, 0x44	; 68
    1b06:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	8d 8b       	std	Y+21, r24	; 0x15
    1b10:	9e 8b       	std	Y+22, r25	; 0x16
    1b12:	af 8b       	std	Y+23, r26	; 0x17
    1b14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b16:	6d 89       	ldd	r22, Y+21	; 0x15
    1b18:	7e 89       	ldd	r23, Y+22	; 0x16
    1b1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e8       	ldi	r20, 0x80	; 128
    1b24:	5f e3       	ldi	r21, 0x3F	; 63
    1b26:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1b2a:	88 23       	and	r24, r24
    1b2c:	2c f4       	brge	.+10     	; 0x1b38 <Lcd_VoidSendCommand+0xb4>
		__ticks = 1;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	9c 8b       	std	Y+20, r25	; 0x14
    1b34:	8b 8b       	std	Y+19, r24	; 0x13
    1b36:	3f c0       	rjmp	.+126    	; 0x1bb6 <Lcd_VoidSendCommand+0x132>
	else if (__tmp > 65535)
    1b38:	6d 89       	ldd	r22, Y+21	; 0x15
    1b3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	3f ef       	ldi	r19, 0xFF	; 255
    1b44:	4f e7       	ldi	r20, 0x7F	; 127
    1b46:	57 e4       	ldi	r21, 0x47	; 71
    1b48:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1b4c:	18 16       	cp	r1, r24
    1b4e:	4c f5       	brge	.+82     	; 0x1ba2 <Lcd_VoidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b50:	69 8d       	ldd	r22, Y+25	; 0x19
    1b52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e2       	ldi	r20, 0x20	; 32
    1b5e:	51 e4       	ldi	r21, 0x41	; 65
    1b60:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	bc 01       	movw	r22, r24
    1b6a:	cd 01       	movw	r24, r26
    1b6c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	9c 8b       	std	Y+20, r25	; 0x14
    1b76:	8b 8b       	std	Y+19, r24	; 0x13
    1b78:	0f c0       	rjmp	.+30     	; 0x1b98 <Lcd_VoidSendCommand+0x114>
    1b7a:	88 ec       	ldi	r24, 0xC8	; 200
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	9a 8b       	std	Y+18, r25	; 0x12
    1b80:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b82:	89 89       	ldd	r24, Y+17	; 0x11
    1b84:	9a 89       	ldd	r25, Y+18	; 0x12
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <Lcd_VoidSendCommand+0x102>
    1b8a:	9a 8b       	std	Y+18, r25	; 0x12
    1b8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b90:	9c 89       	ldd	r25, Y+20	; 0x14
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	9c 8b       	std	Y+20, r25	; 0x14
    1b96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b98:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	69 f7       	brne	.-38     	; 0x1b7a <Lcd_VoidSendCommand+0xf6>
    1ba0:	14 c0       	rjmp	.+40     	; 0x1bca <Lcd_VoidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba8:	98 8d       	ldd	r25, Y+24	; 0x18
    1baa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	9c 8b       	std	Y+20, r25	; 0x14
    1bb4:	8b 8b       	std	Y+19, r24	; 0x13
    1bb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bba:	98 8b       	std	Y+16, r25	; 0x10
    1bbc:	8f 87       	std	Y+15, r24	; 0x0f
    1bbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bc0:	98 89       	ldd	r25, Y+16	; 0x10
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <Lcd_VoidSendCommand+0x13e>
    1bc6:	98 8b       	std	Y+16, r25	; 0x10
    1bc8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ErrStateSetPinValue(Lcd->E_Group, Lcd->E_Pin, DIO_Low);
    1bca:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1bcc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1bd2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1bd4:	95 81       	ldd	r25, Z+5	; 0x05
    1bd6:	69 2f       	mov	r22, r25
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	a0 e8       	ldi	r26, 0x80	; 128
    1be4:	bf e3       	ldi	r27, 0x3F	; 63
    1be6:	8b 87       	std	Y+11, r24	; 0x0b
    1be8:	9c 87       	std	Y+12, r25	; 0x0c
    1bea:	ad 87       	std	Y+13, r26	; 0x0d
    1bec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	4a ef       	ldi	r20, 0xFA	; 250
    1bfc:	54 e4       	ldi	r21, 0x44	; 68
    1bfe:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	8f 83       	std	Y+7, r24	; 0x07
    1c08:	98 87       	std	Y+8, r25	; 0x08
    1c0a:	a9 87       	std	Y+9, r26	; 0x09
    1c0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c10:	78 85       	ldd	r23, Y+8	; 0x08
    1c12:	89 85       	ldd	r24, Y+9	; 0x09
    1c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e8       	ldi	r20, 0x80	; 128
    1c1c:	5f e3       	ldi	r21, 0x3F	; 63
    1c1e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1c22:	88 23       	and	r24, r24
    1c24:	2c f4       	brge	.+10     	; 0x1c30 <Lcd_VoidSendCommand+0x1ac>
		__ticks = 1;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	9e 83       	std	Y+6, r25	; 0x06
    1c2c:	8d 83       	std	Y+5, r24	; 0x05
    1c2e:	3f c0       	rjmp	.+126    	; 0x1cae <Lcd_VoidSendCommand+0x22a>
	else if (__tmp > 65535)
    1c30:	6f 81       	ldd	r22, Y+7	; 0x07
    1c32:	78 85       	ldd	r23, Y+8	; 0x08
    1c34:	89 85       	ldd	r24, Y+9	; 0x09
    1c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	3f ef       	ldi	r19, 0xFF	; 255
    1c3c:	4f e7       	ldi	r20, 0x7F	; 127
    1c3e:	57 e4       	ldi	r21, 0x47	; 71
    1c40:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1c44:	18 16       	cp	r1, r24
    1c46:	4c f5       	brge	.+82     	; 0x1c9a <Lcd_VoidSendCommand+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e2       	ldi	r20, 0x20	; 32
    1c56:	51 e4       	ldi	r21, 0x41	; 65
    1c58:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	bc 01       	movw	r22, r24
    1c62:	cd 01       	movw	r24, r26
    1c64:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	9e 83       	std	Y+6, r25	; 0x06
    1c6e:	8d 83       	std	Y+5, r24	; 0x05
    1c70:	0f c0       	rjmp	.+30     	; 0x1c90 <Lcd_VoidSendCommand+0x20c>
    1c72:	88 ec       	ldi	r24, 0xC8	; 200
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	9c 83       	std	Y+4, r25	; 0x04
    1c78:	8b 83       	std	Y+3, r24	; 0x03
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <Lcd_VoidSendCommand+0x1fa>
    1c82:	9c 83       	std	Y+4, r25	; 0x04
    1c84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c86:	8d 81       	ldd	r24, Y+5	; 0x05
    1c88:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	9e 83       	std	Y+6, r25	; 0x06
    1c8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c90:	8d 81       	ldd	r24, Y+5	; 0x05
    1c92:	9e 81       	ldd	r25, Y+6	; 0x06
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	69 f7       	brne	.-38     	; 0x1c72 <Lcd_VoidSendCommand+0x1ee>
    1c98:	14 c0       	rjmp	.+40     	; 0x1cc2 <Lcd_VoidSendCommand+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9c:	78 85       	ldd	r23, Y+8	; 0x08
    1c9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	9e 83       	std	Y+6, r25	; 0x06
    1cac:	8d 83       	std	Y+5, r24	; 0x05
    1cae:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <Lcd_VoidSendCommand+0x236>
    1cbe:	9a 83       	std	Y+2, r25	; 0x02
    1cc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1cc2:	6f 96       	adiw	r28, 0x1f	; 31
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <Lcd_VoidSendChar>:

void Lcd_VoidSendChar (u8 Copy_Char,Lcd_Info *Lcd)
{
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	6f 97       	sbiw	r28, 0x1f	; 31
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	8d 8f       	std	Y+29, r24	; 0x1d
    1cea:	7f 8f       	std	Y+31, r23	; 0x1f
    1cec:	6e 8f       	std	Y+30, r22	; 0x1e
	//RS->High(Data)
	DIO_ErrStateSetPinValue(Lcd->RS_Group, Lcd->RS_Pin, DIO_High);
    1cee:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1cf0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1cf2:	80 81       	ld	r24, Z
    1cf4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1cf6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1cf8:	93 81       	ldd	r25, Z+3	; 0x03
    1cfa:	69 2f       	mov	r22, r25
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
	//RW->Low(write)
	DIO_ErrStateSetPinValue(Lcd->RW_Group, Lcd->RW_Pin, DIO_Low);
    1d02:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1d04:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1d06:	81 81       	ldd	r24, Z+1	; 0x01
    1d08:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1d0a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1d0c:	94 81       	ldd	r25, Z+4	; 0x04
    1d0e:	69 2f       	mov	r22, r25
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
	//group command
	DIO_ErrStateSetGroupValue(Lcd->Data_Group,Copy_Char);
    1d16:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1d18:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1d1a:	86 81       	ldd	r24, Z+6	; 0x06
    1d1c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d1e:	0e 94 b7 0a 	call	0x156e	; 0x156e <DIO_ErrStateSetGroupValue>
	//enable
	DIO_ErrStateSetPinValue(Lcd->E_Group, Lcd->E_Pin, DIO_High);
    1d22:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1d24:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1d26:	82 81       	ldd	r24, Z+2	; 0x02
    1d28:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1d2a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1d2c:	95 81       	ldd	r25, Z+5	; 0x05
    1d2e:	69 2f       	mov	r22, r25
    1d30:	41 e0       	ldi	r20, 0x01	; 1
    1d32:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	a0 e8       	ldi	r26, 0x80	; 128
    1d3c:	bf e3       	ldi	r27, 0x3F	; 63
    1d3e:	89 8f       	std	Y+25, r24	; 0x19
    1d40:	9a 8f       	std	Y+26, r25	; 0x1a
    1d42:	ab 8f       	std	Y+27, r26	; 0x1b
    1d44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d46:	69 8d       	ldd	r22, Y+25	; 0x19
    1d48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	4a ef       	ldi	r20, 0xFA	; 250
    1d54:	54 e4       	ldi	r21, 0x44	; 68
    1d56:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	8d 8b       	std	Y+21, r24	; 0x15
    1d60:	9e 8b       	std	Y+22, r25	; 0x16
    1d62:	af 8b       	std	Y+23, r26	; 0x17
    1d64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d66:	6d 89       	ldd	r22, Y+21	; 0x15
    1d68:	7e 89       	ldd	r23, Y+22	; 0x16
    1d6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e8       	ldi	r20, 0x80	; 128
    1d74:	5f e3       	ldi	r21, 0x3F	; 63
    1d76:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1d7a:	88 23       	and	r24, r24
    1d7c:	2c f4       	brge	.+10     	; 0x1d88 <Lcd_VoidSendChar+0xb4>
		__ticks = 1;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	9c 8b       	std	Y+20, r25	; 0x14
    1d84:	8b 8b       	std	Y+19, r24	; 0x13
    1d86:	3f c0       	rjmp	.+126    	; 0x1e06 <Lcd_VoidSendChar+0x132>
	else if (__tmp > 65535)
    1d88:	6d 89       	ldd	r22, Y+21	; 0x15
    1d8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	3f ef       	ldi	r19, 0xFF	; 255
    1d94:	4f e7       	ldi	r20, 0x7F	; 127
    1d96:	57 e4       	ldi	r21, 0x47	; 71
    1d98:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1d9c:	18 16       	cp	r1, r24
    1d9e:	4c f5       	brge	.+82     	; 0x1df2 <Lcd_VoidSendChar+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da0:	69 8d       	ldd	r22, Y+25	; 0x19
    1da2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e2       	ldi	r20, 0x20	; 32
    1dae:	51 e4       	ldi	r21, 0x41	; 65
    1db0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	bc 01       	movw	r22, r24
    1dba:	cd 01       	movw	r24, r26
    1dbc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	9c 8b       	std	Y+20, r25	; 0x14
    1dc6:	8b 8b       	std	Y+19, r24	; 0x13
    1dc8:	0f c0       	rjmp	.+30     	; 0x1de8 <Lcd_VoidSendChar+0x114>
    1dca:	88 ec       	ldi	r24, 0xC8	; 200
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9a 8b       	std	Y+18, r25	; 0x12
    1dd0:	89 8b       	std	Y+17, r24	; 0x11
    1dd2:	89 89       	ldd	r24, Y+17	; 0x11
    1dd4:	9a 89       	ldd	r25, Y+18	; 0x12
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	f1 f7       	brne	.-4      	; 0x1dd6 <Lcd_VoidSendChar+0x102>
    1dda:	9a 8b       	std	Y+18, r25	; 0x12
    1ddc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dde:	8b 89       	ldd	r24, Y+19	; 0x13
    1de0:	9c 89       	ldd	r25, Y+20	; 0x14
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	9c 8b       	std	Y+20, r25	; 0x14
    1de6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dea:	9c 89       	ldd	r25, Y+20	; 0x14
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	69 f7       	brne	.-38     	; 0x1dca <Lcd_VoidSendChar+0xf6>
    1df0:	14 c0       	rjmp	.+40     	; 0x1e1a <Lcd_VoidSendChar+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df2:	6d 89       	ldd	r22, Y+21	; 0x15
    1df4:	7e 89       	ldd	r23, Y+22	; 0x16
    1df6:	8f 89       	ldd	r24, Y+23	; 0x17
    1df8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	9c 8b       	std	Y+20, r25	; 0x14
    1e04:	8b 8b       	std	Y+19, r24	; 0x13
    1e06:	8b 89       	ldd	r24, Y+19	; 0x13
    1e08:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0a:	98 8b       	std	Y+16, r25	; 0x10
    1e0c:	8f 87       	std	Y+15, r24	; 0x0f
    1e0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e10:	98 89       	ldd	r25, Y+16	; 0x10
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <Lcd_VoidSendChar+0x13e>
    1e16:	98 8b       	std	Y+16, r25	; 0x10
    1e18:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ErrStateSetPinValue(Lcd->E_Group, Lcd->E_Pin, DIO_Low);
    1e1a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1e1c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1e1e:	82 81       	ldd	r24, Z+2	; 0x02
    1e20:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1e22:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1e24:	95 81       	ldd	r25, Z+5	; 0x05
    1e26:	69 2f       	mov	r22, r25
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	a0 e8       	ldi	r26, 0x80	; 128
    1e34:	bf e3       	ldi	r27, 0x3F	; 63
    1e36:	8b 87       	std	Y+11, r24	; 0x0b
    1e38:	9c 87       	std	Y+12, r25	; 0x0c
    1e3a:	ad 87       	std	Y+13, r26	; 0x0d
    1e3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	4a ef       	ldi	r20, 0xFA	; 250
    1e4c:	54 e4       	ldi	r21, 0x44	; 68
    1e4e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	8f 83       	std	Y+7, r24	; 0x07
    1e58:	98 87       	std	Y+8, r25	; 0x08
    1e5a:	a9 87       	std	Y+9, r26	; 0x09
    1e5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e60:	78 85       	ldd	r23, Y+8	; 0x08
    1e62:	89 85       	ldd	r24, Y+9	; 0x09
    1e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e8       	ldi	r20, 0x80	; 128
    1e6c:	5f e3       	ldi	r21, 0x3F	; 63
    1e6e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1e72:	88 23       	and	r24, r24
    1e74:	2c f4       	brge	.+10     	; 0x1e80 <Lcd_VoidSendChar+0x1ac>
		__ticks = 1;
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	9e 83       	std	Y+6, r25	; 0x06
    1e7c:	8d 83       	std	Y+5, r24	; 0x05
    1e7e:	3f c0       	rjmp	.+126    	; 0x1efe <Lcd_VoidSendChar+0x22a>
	else if (__tmp > 65535)
    1e80:	6f 81       	ldd	r22, Y+7	; 0x07
    1e82:	78 85       	ldd	r23, Y+8	; 0x08
    1e84:	89 85       	ldd	r24, Y+9	; 0x09
    1e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	3f ef       	ldi	r19, 0xFF	; 255
    1e8c:	4f e7       	ldi	r20, 0x7F	; 127
    1e8e:	57 e4       	ldi	r21, 0x47	; 71
    1e90:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1e94:	18 16       	cp	r1, r24
    1e96:	4c f5       	brge	.+82     	; 0x1eea <Lcd_VoidSendChar+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e2       	ldi	r20, 0x20	; 32
    1ea6:	51 e4       	ldi	r21, 0x41	; 65
    1ea8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	bc 01       	movw	r22, r24
    1eb2:	cd 01       	movw	r24, r26
    1eb4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	9e 83       	std	Y+6, r25	; 0x06
    1ebe:	8d 83       	std	Y+5, r24	; 0x05
    1ec0:	0f c0       	rjmp	.+30     	; 0x1ee0 <Lcd_VoidSendChar+0x20c>
    1ec2:	88 ec       	ldi	r24, 0xC8	; 200
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9c 83       	std	Y+4, r25	; 0x04
    1ec8:	8b 83       	std	Y+3, r24	; 0x03
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f1 f7       	brne	.-4      	; 0x1ece <Lcd_VoidSendChar+0x1fa>
    1ed2:	9c 83       	std	Y+4, r25	; 0x04
    1ed4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	9e 83       	std	Y+6, r25	; 0x06
    1ede:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	69 f7       	brne	.-38     	; 0x1ec2 <Lcd_VoidSendChar+0x1ee>
    1ee8:	14 c0       	rjmp	.+40     	; 0x1f12 <Lcd_VoidSendChar+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eea:	6f 81       	ldd	r22, Y+7	; 0x07
    1eec:	78 85       	ldd	r23, Y+8	; 0x08
    1eee:	89 85       	ldd	r24, Y+9	; 0x09
    1ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	9e 83       	std	Y+6, r25	; 0x06
    1efc:	8d 83       	std	Y+5, r24	; 0x05
    1efe:	8d 81       	ldd	r24, Y+5	; 0x05
    1f00:	9e 81       	ldd	r25, Y+6	; 0x06
    1f02:	9a 83       	std	Y+2, r25	; 0x02
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <Lcd_VoidSendChar+0x236>
    1f0e:	9a 83       	std	Y+2, r25	; 0x02
    1f10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1f12:	6f 96       	adiw	r28, 0x1f	; 31
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <Lcd_VoidInit>:


void Lcd_VoidInit(Lcd_Info *Lcd)
{
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	ea 97       	sbiw	r28, 0x3a	; 58
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	9a af       	std	Y+58, r25	; 0x3a
    1f3a:	89 af       	std	Y+57, r24	; 0x39

	//set direction
	DIO_ErrStateSetPinDirection(Lcd->RS_Group, Lcd->RS_Pin, DIO_Output);
    1f3c:	e9 ad       	ldd	r30, Y+57	; 0x39
    1f3e:	fa ad       	ldd	r31, Y+58	; 0x3a
    1f40:	80 81       	ld	r24, Z
    1f42:	e9 ad       	ldd	r30, Y+57	; 0x39
    1f44:	fa ad       	ldd	r31, Y+58	; 0x3a
    1f46:	93 81       	ldd	r25, Z+3	; 0x03
    1f48:	69 2f       	mov	r22, r25
    1f4a:	41 e0       	ldi	r20, 0x01	; 1
    1f4c:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(Lcd->RW_Group, Lcd->RW_Pin, DIO_Output);
    1f50:	e9 ad       	ldd	r30, Y+57	; 0x39
    1f52:	fa ad       	ldd	r31, Y+58	; 0x3a
    1f54:	81 81       	ldd	r24, Z+1	; 0x01
    1f56:	e9 ad       	ldd	r30, Y+57	; 0x39
    1f58:	fa ad       	ldd	r31, Y+58	; 0x3a
    1f5a:	94 81       	ldd	r25, Z+4	; 0x04
    1f5c:	69 2f       	mov	r22, r25
    1f5e:	41 e0       	ldi	r20, 0x01	; 1
    1f60:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(Lcd->E_Group, Lcd->E_Pin, DIO_Output);
    1f64:	e9 ad       	ldd	r30, Y+57	; 0x39
    1f66:	fa ad       	ldd	r31, Y+58	; 0x3a
    1f68:	82 81       	ldd	r24, Z+2	; 0x02
    1f6a:	e9 ad       	ldd	r30, Y+57	; 0x39
    1f6c:	fa ad       	ldd	r31, Y+58	; 0x3a
    1f6e:	95 81       	ldd	r25, Z+5	; 0x05
    1f70:	69 2f       	mov	r22, r25
    1f72:	41 e0       	ldi	r20, 0x01	; 1
    1f74:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetGroupDirection(Lcd->Data_Group, 0xff);
    1f78:	e9 ad       	ldd	r30, Y+57	; 0x39
    1f7a:	fa ad       	ldd	r31, Y+58	; 0x3a
    1f7c:	86 81       	ldd	r24, Z+6	; 0x06
    1f7e:	6f ef       	ldi	r22, 0xFF	; 255
    1f80:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <DIO_ErrStateSetGroupDirection>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	a0 e2       	ldi	r26, 0x20	; 32
    1f8a:	b2 e4       	ldi	r27, 0x42	; 66
    1f8c:	8d ab       	std	Y+53, r24	; 0x35
    1f8e:	9e ab       	std	Y+54, r25	; 0x36
    1f90:	af ab       	std	Y+55, r26	; 0x37
    1f92:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f94:	6d a9       	ldd	r22, Y+53	; 0x35
    1f96:	7e a9       	ldd	r23, Y+54	; 0x36
    1f98:	8f a9       	ldd	r24, Y+55	; 0x37
    1f9a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	4a ef       	ldi	r20, 0xFA	; 250
    1fa2:	54 e4       	ldi	r21, 0x44	; 68
    1fa4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	89 ab       	std	Y+49, r24	; 0x31
    1fae:	9a ab       	std	Y+50, r25	; 0x32
    1fb0:	ab ab       	std	Y+51, r26	; 0x33
    1fb2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fb4:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb6:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb8:	8b a9       	ldd	r24, Y+51	; 0x33
    1fba:	9c a9       	ldd	r25, Y+52	; 0x34
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e8       	ldi	r20, 0x80	; 128
    1fc2:	5f e3       	ldi	r21, 0x3F	; 63
    1fc4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1fc8:	88 23       	and	r24, r24
    1fca:	2c f4       	brge	.+10     	; 0x1fd6 <Lcd_VoidInit+0xb2>
		__ticks = 1;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	98 ab       	std	Y+48, r25	; 0x30
    1fd2:	8f a7       	std	Y+47, r24	; 0x2f
    1fd4:	3f c0       	rjmp	.+126    	; 0x2054 <Lcd_VoidInit+0x130>
	else if (__tmp > 65535)
    1fd6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fd8:	7a a9       	ldd	r23, Y+50	; 0x32
    1fda:	8b a9       	ldd	r24, Y+51	; 0x33
    1fdc:	9c a9       	ldd	r25, Y+52	; 0x34
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	3f ef       	ldi	r19, 0xFF	; 255
    1fe2:	4f e7       	ldi	r20, 0x7F	; 127
    1fe4:	57 e4       	ldi	r21, 0x47	; 71
    1fe6:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1fea:	18 16       	cp	r1, r24
    1fec:	4c f5       	brge	.+82     	; 0x2040 <Lcd_VoidInit+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fee:	6d a9       	ldd	r22, Y+53	; 0x35
    1ff0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ff2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ff4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e2       	ldi	r20, 0x20	; 32
    1ffc:	51 e4       	ldi	r21, 0x41	; 65
    1ffe:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	bc 01       	movw	r22, r24
    2008:	cd 01       	movw	r24, r26
    200a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	98 ab       	std	Y+48, r25	; 0x30
    2014:	8f a7       	std	Y+47, r24	; 0x2f
    2016:	0f c0       	rjmp	.+30     	; 0x2036 <Lcd_VoidInit+0x112>
    2018:	88 ec       	ldi	r24, 0xC8	; 200
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	9e a7       	std	Y+46, r25	; 0x2e
    201e:	8d a7       	std	Y+45, r24	; 0x2d
    2020:	8d a5       	ldd	r24, Y+45	; 0x2d
    2022:	9e a5       	ldd	r25, Y+46	; 0x2e
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <Lcd_VoidInit+0x100>
    2028:	9e a7       	std	Y+46, r25	; 0x2e
    202a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202c:	8f a5       	ldd	r24, Y+47	; 0x2f
    202e:	98 a9       	ldd	r25, Y+48	; 0x30
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	98 ab       	std	Y+48, r25	; 0x30
    2034:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2036:	8f a5       	ldd	r24, Y+47	; 0x2f
    2038:	98 a9       	ldd	r25, Y+48	; 0x30
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	69 f7       	brne	.-38     	; 0x2018 <Lcd_VoidInit+0xf4>
    203e:	14 c0       	rjmp	.+40     	; 0x2068 <Lcd_VoidInit+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2040:	69 a9       	ldd	r22, Y+49	; 0x31
    2042:	7a a9       	ldd	r23, Y+50	; 0x32
    2044:	8b a9       	ldd	r24, Y+51	; 0x33
    2046:	9c a9       	ldd	r25, Y+52	; 0x34
    2048:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	98 ab       	std	Y+48, r25	; 0x30
    2052:	8f a7       	std	Y+47, r24	; 0x2f
    2054:	8f a5       	ldd	r24, Y+47	; 0x2f
    2056:	98 a9       	ldd	r25, Y+48	; 0x30
    2058:	9c a7       	std	Y+44, r25	; 0x2c
    205a:	8b a7       	std	Y+43, r24	; 0x2b
    205c:	8b a5       	ldd	r24, Y+43	; 0x2b
    205e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <Lcd_VoidInit+0x13c>
    2064:	9c a7       	std	Y+44, r25	; 0x2c
    2066:	8b a7       	std	Y+43, r24	; 0x2b
	//wait more than 30ms
	_delay_ms(40);
	//send function set
	Lcd_VoidSendCommand(LCD_Set8Bit2Line5x8, Lcd);
    2068:	29 ad       	ldd	r18, Y+57	; 0x39
    206a:	3a ad       	ldd	r19, Y+58	; 0x3a
    206c:	88 e3       	ldi	r24, 0x38	; 56
    206e:	b9 01       	movw	r22, r18
    2070:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <Lcd_VoidSendCommand>
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	a0 e8       	ldi	r26, 0x80	; 128
    207a:	bf e3       	ldi	r27, 0x3F	; 63
    207c:	8f a3       	std	Y+39, r24	; 0x27
    207e:	98 a7       	std	Y+40, r25	; 0x28
    2080:	a9 a7       	std	Y+41, r26	; 0x29
    2082:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2084:	6f a1       	ldd	r22, Y+39	; 0x27
    2086:	78 a5       	ldd	r23, Y+40	; 0x28
    2088:	89 a5       	ldd	r24, Y+41	; 0x29
    208a:	9a a5       	ldd	r25, Y+42	; 0x2a
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	4a ef       	ldi	r20, 0xFA	; 250
    2092:	54 e4       	ldi	r21, 0x44	; 68
    2094:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	8b a3       	std	Y+35, r24	; 0x23
    209e:	9c a3       	std	Y+36, r25	; 0x24
    20a0:	ad a3       	std	Y+37, r26	; 0x25
    20a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20a4:	6b a1       	ldd	r22, Y+35	; 0x23
    20a6:	7c a1       	ldd	r23, Y+36	; 0x24
    20a8:	8d a1       	ldd	r24, Y+37	; 0x25
    20aa:	9e a1       	ldd	r25, Y+38	; 0x26
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e8       	ldi	r20, 0x80	; 128
    20b2:	5f e3       	ldi	r21, 0x3F	; 63
    20b4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    20b8:	88 23       	and	r24, r24
    20ba:	2c f4       	brge	.+10     	; 0x20c6 <Lcd_VoidInit+0x1a2>
		__ticks = 1;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	9a a3       	std	Y+34, r25	; 0x22
    20c2:	89 a3       	std	Y+33, r24	; 0x21
    20c4:	3f c0       	rjmp	.+126    	; 0x2144 <Lcd_VoidInit+0x220>
	else if (__tmp > 65535)
    20c6:	6b a1       	ldd	r22, Y+35	; 0x23
    20c8:	7c a1       	ldd	r23, Y+36	; 0x24
    20ca:	8d a1       	ldd	r24, Y+37	; 0x25
    20cc:	9e a1       	ldd	r25, Y+38	; 0x26
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	3f ef       	ldi	r19, 0xFF	; 255
    20d2:	4f e7       	ldi	r20, 0x7F	; 127
    20d4:	57 e4       	ldi	r21, 0x47	; 71
    20d6:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    20da:	18 16       	cp	r1, r24
    20dc:	4c f5       	brge	.+82     	; 0x2130 <Lcd_VoidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20de:	6f a1       	ldd	r22, Y+39	; 0x27
    20e0:	78 a5       	ldd	r23, Y+40	; 0x28
    20e2:	89 a5       	ldd	r24, Y+41	; 0x29
    20e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e2       	ldi	r20, 0x20	; 32
    20ec:	51 e4       	ldi	r21, 0x41	; 65
    20ee:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	bc 01       	movw	r22, r24
    20f8:	cd 01       	movw	r24, r26
    20fa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	9a a3       	std	Y+34, r25	; 0x22
    2104:	89 a3       	std	Y+33, r24	; 0x21
    2106:	0f c0       	rjmp	.+30     	; 0x2126 <Lcd_VoidInit+0x202>
    2108:	88 ec       	ldi	r24, 0xC8	; 200
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	98 a3       	std	Y+32, r25	; 0x20
    210e:	8f 8f       	std	Y+31, r24	; 0x1f
    2110:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2112:	98 a1       	ldd	r25, Y+32	; 0x20
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <Lcd_VoidInit+0x1f0>
    2118:	98 a3       	std	Y+32, r25	; 0x20
    211a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211c:	89 a1       	ldd	r24, Y+33	; 0x21
    211e:	9a a1       	ldd	r25, Y+34	; 0x22
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	9a a3       	std	Y+34, r25	; 0x22
    2124:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2126:	89 a1       	ldd	r24, Y+33	; 0x21
    2128:	9a a1       	ldd	r25, Y+34	; 0x22
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	69 f7       	brne	.-38     	; 0x2108 <Lcd_VoidInit+0x1e4>
    212e:	14 c0       	rjmp	.+40     	; 0x2158 <Lcd_VoidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2130:	6b a1       	ldd	r22, Y+35	; 0x23
    2132:	7c a1       	ldd	r23, Y+36	; 0x24
    2134:	8d a1       	ldd	r24, Y+37	; 0x25
    2136:	9e a1       	ldd	r25, Y+38	; 0x26
    2138:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	9a a3       	std	Y+34, r25	; 0x22
    2142:	89 a3       	std	Y+33, r24	; 0x21
    2144:	89 a1       	ldd	r24, Y+33	; 0x21
    2146:	9a a1       	ldd	r25, Y+34	; 0x22
    2148:	9e 8f       	std	Y+30, r25	; 0x1e
    214a:	8d 8f       	std	Y+29, r24	; 0x1d
    214c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    214e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	f1 f7       	brne	.-4      	; 0x2150 <Lcd_VoidInit+0x22c>
    2154:	9e 8f       	std	Y+30, r25	; 0x1e
    2156:	8d 8f       	std	Y+29, r24	; 0x1d
	//wait more than 39 us
	_delay_ms(1);
	//sent display on/off
	Lcd_VoidSendCommand(LCD_CursorON, Lcd);
    2158:	29 ad       	ldd	r18, Y+57	; 0x39
    215a:	3a ad       	ldd	r19, Y+58	; 0x3a
    215c:	8e e0       	ldi	r24, 0x0E	; 14
    215e:	b9 01       	movw	r22, r18
    2160:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <Lcd_VoidSendCommand>
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	a0 e8       	ldi	r26, 0x80	; 128
    216a:	bf e3       	ldi	r27, 0x3F	; 63
    216c:	89 8f       	std	Y+25, r24	; 0x19
    216e:	9a 8f       	std	Y+26, r25	; 0x1a
    2170:	ab 8f       	std	Y+27, r26	; 0x1b
    2172:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2174:	69 8d       	ldd	r22, Y+25	; 0x19
    2176:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2178:	8b 8d       	ldd	r24, Y+27	; 0x1b
    217a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	4a ef       	ldi	r20, 0xFA	; 250
    2182:	54 e4       	ldi	r21, 0x44	; 68
    2184:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	8d 8b       	std	Y+21, r24	; 0x15
    218e:	9e 8b       	std	Y+22, r25	; 0x16
    2190:	af 8b       	std	Y+23, r26	; 0x17
    2192:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2194:	6d 89       	ldd	r22, Y+21	; 0x15
    2196:	7e 89       	ldd	r23, Y+22	; 0x16
    2198:	8f 89       	ldd	r24, Y+23	; 0x17
    219a:	98 8d       	ldd	r25, Y+24	; 0x18
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e8       	ldi	r20, 0x80	; 128
    21a2:	5f e3       	ldi	r21, 0x3F	; 63
    21a4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    21a8:	88 23       	and	r24, r24
    21aa:	2c f4       	brge	.+10     	; 0x21b6 <Lcd_VoidInit+0x292>
		__ticks = 1;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9c 8b       	std	Y+20, r25	; 0x14
    21b2:	8b 8b       	std	Y+19, r24	; 0x13
    21b4:	3f c0       	rjmp	.+126    	; 0x2234 <Lcd_VoidInit+0x310>
	else if (__tmp > 65535)
    21b6:	6d 89       	ldd	r22, Y+21	; 0x15
    21b8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ba:	8f 89       	ldd	r24, Y+23	; 0x17
    21bc:	98 8d       	ldd	r25, Y+24	; 0x18
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	3f ef       	ldi	r19, 0xFF	; 255
    21c2:	4f e7       	ldi	r20, 0x7F	; 127
    21c4:	57 e4       	ldi	r21, 0x47	; 71
    21c6:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    21ca:	18 16       	cp	r1, r24
    21cc:	4c f5       	brge	.+82     	; 0x2220 <Lcd_VoidInit+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ce:	69 8d       	ldd	r22, Y+25	; 0x19
    21d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e2       	ldi	r20, 0x20	; 32
    21dc:	51 e4       	ldi	r21, 0x41	; 65
    21de:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	bc 01       	movw	r22, r24
    21e8:	cd 01       	movw	r24, r26
    21ea:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9c 8b       	std	Y+20, r25	; 0x14
    21f4:	8b 8b       	std	Y+19, r24	; 0x13
    21f6:	0f c0       	rjmp	.+30     	; 0x2216 <Lcd_VoidInit+0x2f2>
    21f8:	88 ec       	ldi	r24, 0xC8	; 200
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	9a 8b       	std	Y+18, r25	; 0x12
    21fe:	89 8b       	std	Y+17, r24	; 0x11
    2200:	89 89       	ldd	r24, Y+17	; 0x11
    2202:	9a 89       	ldd	r25, Y+18	; 0x12
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <Lcd_VoidInit+0x2e0>
    2208:	9a 8b       	std	Y+18, r25	; 0x12
    220a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220c:	8b 89       	ldd	r24, Y+19	; 0x13
    220e:	9c 89       	ldd	r25, Y+20	; 0x14
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	9c 8b       	std	Y+20, r25	; 0x14
    2214:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2216:	8b 89       	ldd	r24, Y+19	; 0x13
    2218:	9c 89       	ldd	r25, Y+20	; 0x14
    221a:	00 97       	sbiw	r24, 0x00	; 0
    221c:	69 f7       	brne	.-38     	; 0x21f8 <Lcd_VoidInit+0x2d4>
    221e:	14 c0       	rjmp	.+40     	; 0x2248 <Lcd_VoidInit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2220:	6d 89       	ldd	r22, Y+21	; 0x15
    2222:	7e 89       	ldd	r23, Y+22	; 0x16
    2224:	8f 89       	ldd	r24, Y+23	; 0x17
    2226:	98 8d       	ldd	r25, Y+24	; 0x18
    2228:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9c 8b       	std	Y+20, r25	; 0x14
    2232:	8b 8b       	std	Y+19, r24	; 0x13
    2234:	8b 89       	ldd	r24, Y+19	; 0x13
    2236:	9c 89       	ldd	r25, Y+20	; 0x14
    2238:	98 8b       	std	Y+16, r25	; 0x10
    223a:	8f 87       	std	Y+15, r24	; 0x0f
    223c:	8f 85       	ldd	r24, Y+15	; 0x0f
    223e:	98 89       	ldd	r25, Y+16	; 0x10
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <Lcd_VoidInit+0x31c>
    2244:	98 8b       	std	Y+16, r25	; 0x10
    2246:	8f 87       	std	Y+15, r24	; 0x0f
	//wait more than 39 us
	_delay_ms(1);
	//send clear
	Lcd_VoidSendCommand(LCD_ClearDisplay, Lcd);
    2248:	29 ad       	ldd	r18, Y+57	; 0x39
    224a:	3a ad       	ldd	r19, Y+58	; 0x3a
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	b9 01       	movw	r22, r18
    2250:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <Lcd_VoidSendCommand>
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	a0 e0       	ldi	r26, 0x00	; 0
    225a:	b0 e4       	ldi	r27, 0x40	; 64
    225c:	8b 87       	std	Y+11, r24	; 0x0b
    225e:	9c 87       	std	Y+12, r25	; 0x0c
    2260:	ad 87       	std	Y+13, r26	; 0x0d
    2262:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2264:	6b 85       	ldd	r22, Y+11	; 0x0b
    2266:	7c 85       	ldd	r23, Y+12	; 0x0c
    2268:	8d 85       	ldd	r24, Y+13	; 0x0d
    226a:	9e 85       	ldd	r25, Y+14	; 0x0e
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	4a ef       	ldi	r20, 0xFA	; 250
    2272:	54 e4       	ldi	r21, 0x44	; 68
    2274:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	8f 83       	std	Y+7, r24	; 0x07
    227e:	98 87       	std	Y+8, r25	; 0x08
    2280:	a9 87       	std	Y+9, r26	; 0x09
    2282:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2284:	6f 81       	ldd	r22, Y+7	; 0x07
    2286:	78 85       	ldd	r23, Y+8	; 0x08
    2288:	89 85       	ldd	r24, Y+9	; 0x09
    228a:	9a 85       	ldd	r25, Y+10	; 0x0a
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	40 e8       	ldi	r20, 0x80	; 128
    2292:	5f e3       	ldi	r21, 0x3F	; 63
    2294:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2298:	88 23       	and	r24, r24
    229a:	2c f4       	brge	.+10     	; 0x22a6 <Lcd_VoidInit+0x382>
		__ticks = 1;
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	9e 83       	std	Y+6, r25	; 0x06
    22a2:	8d 83       	std	Y+5, r24	; 0x05
    22a4:	3f c0       	rjmp	.+126    	; 0x2324 <Lcd_VoidInit+0x400>
	else if (__tmp > 65535)
    22a6:	6f 81       	ldd	r22, Y+7	; 0x07
    22a8:	78 85       	ldd	r23, Y+8	; 0x08
    22aa:	89 85       	ldd	r24, Y+9	; 0x09
    22ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	3f ef       	ldi	r19, 0xFF	; 255
    22b2:	4f e7       	ldi	r20, 0x7F	; 127
    22b4:	57 e4       	ldi	r21, 0x47	; 71
    22b6:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    22ba:	18 16       	cp	r1, r24
    22bc:	4c f5       	brge	.+82     	; 0x2310 <Lcd_VoidInit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22be:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e2       	ldi	r20, 0x20	; 32
    22cc:	51 e4       	ldi	r21, 0x41	; 65
    22ce:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	bc 01       	movw	r22, r24
    22d8:	cd 01       	movw	r24, r26
    22da:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	9e 83       	std	Y+6, r25	; 0x06
    22e4:	8d 83       	std	Y+5, r24	; 0x05
    22e6:	0f c0       	rjmp	.+30     	; 0x2306 <Lcd_VoidInit+0x3e2>
    22e8:	88 ec       	ldi	r24, 0xC8	; 200
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	9c 83       	std	Y+4, r25	; 0x04
    22ee:	8b 83       	std	Y+3, r24	; 0x03
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	9c 81       	ldd	r25, Y+4	; 0x04
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <Lcd_VoidInit+0x3d0>
    22f8:	9c 83       	std	Y+4, r25	; 0x04
    22fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	9e 83       	std	Y+6, r25	; 0x06
    2304:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2306:	8d 81       	ldd	r24, Y+5	; 0x05
    2308:	9e 81       	ldd	r25, Y+6	; 0x06
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	69 f7       	brne	.-38     	; 0x22e8 <Lcd_VoidInit+0x3c4>
    230e:	14 c0       	rjmp	.+40     	; 0x2338 <Lcd_VoidInit+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2310:	6f 81       	ldd	r22, Y+7	; 0x07
    2312:	78 85       	ldd	r23, Y+8	; 0x08
    2314:	89 85       	ldd	r24, Y+9	; 0x09
    2316:	9a 85       	ldd	r25, Y+10	; 0x0a
    2318:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	9e 83       	std	Y+6, r25	; 0x06
    2322:	8d 83       	std	Y+5, r24	; 0x05
    2324:	8d 81       	ldd	r24, Y+5	; 0x05
    2326:	9e 81       	ldd	r25, Y+6	; 0x06
    2328:	9a 83       	std	Y+2, r25	; 0x02
    232a:	89 83       	std	Y+1, r24	; 0x01
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	9a 81       	ldd	r25, Y+2	; 0x02
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <Lcd_VoidInit+0x40c>
    2334:	9a 83       	std	Y+2, r25	; 0x02
    2336:	89 83       	std	Y+1, r24	; 0x01
	//wait more than 39 us
		_delay_ms(2);

}
    2338:	ea 96       	adiw	r28, 0x3a	; 58
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <Lcd_VoidSendString>:

void Lcd_VoidSendString(u8*Address_String, Lcd_Info* Lcd)
{
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	00 d0       	rcall	.+0      	; 0x2350 <Lcd_VoidSendString+0x6>
    2350:	00 d0       	rcall	.+0      	; 0x2352 <Lcd_VoidSendString+0x8>
    2352:	0f 92       	push	r0
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	9b 83       	std	Y+3, r25	; 0x03
    235a:	8a 83       	std	Y+2, r24	; 0x02
    235c:	7d 83       	std	Y+5, r23	; 0x05
    235e:	6c 83       	std	Y+4, r22	; 0x04
	//counter for loop
	u8 Local_Counter=0;
    2360:	19 82       	std	Y+1, r1	; 0x01
    2362:	11 c0       	rjmp	.+34     	; 0x2386 <Lcd_VoidSendString+0x3c>

	//loop
			while(Address_String[Local_Counter]!='\0')
			{
				//send char
				Lcd_VoidSendChar(Address_String[Local_Counter], Lcd);
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	9b 81       	ldd	r25, Y+3	; 0x03
    236e:	fc 01       	movw	r30, r24
    2370:	e2 0f       	add	r30, r18
    2372:	f3 1f       	adc	r31, r19
    2374:	80 81       	ld	r24, Z
    2376:	2c 81       	ldd	r18, Y+4	; 0x04
    2378:	3d 81       	ldd	r19, Y+5	; 0x05
    237a:	b9 01       	movw	r22, r18
    237c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <Lcd_VoidSendChar>
				Local_Counter++;
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	8f 5f       	subi	r24, 0xFF	; 255
    2384:	89 83       	std	Y+1, r24	; 0x01
{
	//counter for loop
	u8 Local_Counter=0;

	//loop
			while(Address_String[Local_Counter]!='\0')
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	28 2f       	mov	r18, r24
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	8a 81       	ldd	r24, Y+2	; 0x02
    238e:	9b 81       	ldd	r25, Y+3	; 0x03
    2390:	fc 01       	movw	r30, r24
    2392:	e2 0f       	add	r30, r18
    2394:	f3 1f       	adc	r31, r19
    2396:	80 81       	ld	r24, Z
    2398:	88 23       	and	r24, r24
    239a:	21 f7       	brne	.-56     	; 0x2364 <Lcd_VoidSendString+0x1a>
				//send char
				Lcd_VoidSendChar(Address_String[Local_Counter], Lcd);
				Local_Counter++;

			}
}
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <Lcd_VoidGoXY>:


LcdError Lcd_VoidGoXY(Lcd_Info *Lcd,u8 Copy_XLocation,u8 Copy_YLocation)
{
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	00 d0       	rcall	.+0      	; 0x23b2 <Lcd_VoidGoXY+0x6>
    23b2:	00 d0       	rcall	.+0      	; 0x23b4 <Lcd_VoidGoXY+0x8>
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <Lcd_VoidGoXY+0xa>
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	9b 83       	std	Y+3, r25	; 0x03
    23bc:	8a 83       	std	Y+2, r24	; 0x02
    23be:	6c 83       	std	Y+4, r22	; 0x04
    23c0:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_Address=0;
    23c2:	19 82       	std	Y+1, r1	; 0x01
			if (Copy_XLocation==0)
    23c4:	8c 81       	ldd	r24, Y+4	; 0x04
    23c6:	88 23       	and	r24, r24
    23c8:	19 f4       	brne	.+6      	; 0x23d0 <Lcd_VoidGoXY+0x24>
			{
				Local_Address= Copy_YLocation;
    23ca:	8d 81       	ldd	r24, Y+5	; 0x05
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	09 c0       	rjmp	.+18     	; 0x23e2 <Lcd_VoidGoXY+0x36>

			}
			else if (Copy_XLocation==1)
    23d0:	8c 81       	ldd	r24, Y+4	; 0x04
    23d2:	81 30       	cpi	r24, 0x01	; 1
    23d4:	21 f4       	brne	.+8      	; 0x23de <Lcd_VoidGoXY+0x32>
			{
				Local_Address=Copy_YLocation+0x40;
    23d6:	8d 81       	ldd	r24, Y+5	; 0x05
    23d8:	80 5c       	subi	r24, 0xC0	; 192
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <Lcd_VoidGoXY+0x36>
			}
			else
			{
				//error handling
				return LocationError;
    23de:	1e 82       	std	Y+6, r1	; 0x06
    23e0:	09 c0       	rjmp	.+18     	; 0x23f4 <Lcd_VoidGoXY+0x48>
			}
	Lcd_VoidSendCommand(LCD_SetAddressDDRAM +Local_Address , Lcd);
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	80 58       	subi	r24, 0x80	; 128
    23e6:	2a 81       	ldd	r18, Y+2	; 0x02
    23e8:	3b 81       	ldd	r19, Y+3	; 0x03
    23ea:	b9 01       	movw	r22, r18
    23ec:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <Lcd_VoidSendCommand>
	return NoLcdError;
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	8e 83       	std	Y+6, r24	; 0x06
    23f4:	8e 81       	ldd	r24, Y+6	; 0x06
}
    23f6:	26 96       	adiw	r28, 0x06	; 6
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <Lcd_VoidSendNumber>:
//
//
//}

void Lcd_VoidSendNumber(u8 Copy_Number,Lcd_Info *Lcd)
{
    2408:	0f 93       	push	r16
    240a:	1f 93       	push	r17
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	2b 97       	sbiw	r28, 0x0b	; 11
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	cd bf       	out	0x3d, r28	; 61
    2420:	89 87       	std	Y+9, r24	; 0x09
    2422:	7b 87       	std	Y+11, r23	; 0x0b
    2424:	6a 87       	std	Y+10, r22	; 0x0a
u8 Num_String[8];
//itoa(Copy_Number, Num_String, 10);
dtostrf(Copy_Number, 0, 0, Num_String);
    2426:	89 85       	ldd	r24, Y+9	; 0x09
    2428:	88 2f       	mov	r24, r24
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	a0 e0       	ldi	r26, 0x00	; 0
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	bc 01       	movw	r22, r24
    2432:	cd 01       	movw	r24, r26
    2434:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__floatunsisf>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	bc 01       	movw	r22, r24
    243e:	cd 01       	movw	r24, r26
    2440:	40 e0       	ldi	r20, 0x00	; 0
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	fe 01       	movw	r30, r28
    2446:	31 96       	adiw	r30, 0x01	; 1
    2448:	8f 01       	movw	r16, r30
    244a:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <dtostrf>
Lcd_VoidSendString(Num_String, Lcd);
    244e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2450:	3b 85       	ldd	r19, Y+11	; 0x0b
    2452:	ce 01       	movw	r24, r28
    2454:	01 96       	adiw	r24, 0x01	; 1
    2456:	b9 01       	movw	r22, r18
    2458:	0e 94 a5 11 	call	0x234a	; 0x234a <Lcd_VoidSendString>

}
    245c:	2b 96       	adiw	r28, 0x0b	; 11
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
    2468:	cf 91       	pop	r28
    246a:	df 91       	pop	r29
    246c:	1f 91       	pop	r17
    246e:	0f 91       	pop	r16
    2470:	08 95       	ret

00002472 <Lcd_VoidStoreSpecialCharacter>:

void Lcd_VoidStoreSpecialCharacter(u16 Copy_SpecChar[][7],CGRAM_Write_Addr write_Addr,u8 No_of_Characters,Lcd_Info*Lcd)
{
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	2b 97       	sbiw	r28, 0x0b	; 11
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	9f 83       	std	Y+7, r25	; 0x07
    2488:	8e 83       	std	Y+6, r24	; 0x06
    248a:	68 87       	std	Y+8, r22	; 0x08
    248c:	49 87       	std	Y+9, r20	; 0x09
    248e:	3b 87       	std	Y+11, r19	; 0x0b
    2490:	2a 87       	std	Y+10, r18	; 0x0a
	u8 No_of_Rows=7;
    2492:	87 e0       	ldi	r24, 0x07	; 7
    2494:	8d 83       	std	Y+5, r24	; 0x05
	for(u16 i=0;i<No_of_Characters;i++)
    2496:	1c 82       	std	Y+4, r1	; 0x04
    2498:	1b 82       	std	Y+3, r1	; 0x03
    249a:	49 c0       	rjmp	.+146    	; 0x252e <Lcd_VoidStoreSpecialCharacter+0xbc>
		{
	//go to location write of CGRAM
	Lcd_VoidSendCommand(LCD_SetAddressCGRAM +(write_Addr*(8)) , Lcd);
    249c:	88 85       	ldd	r24, Y+8	; 0x08
    249e:	88 2f       	mov	r24, r24
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	08 96       	adiw	r24, 0x08	; 8
    24a4:	88 0f       	add	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	88 0f       	add	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	2a 85       	ldd	r18, Y+10	; 0x0a
    24b2:	3b 85       	ldd	r19, Y+11	; 0x0b
    24b4:	b9 01       	movw	r22, r18
    24b6:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <Lcd_VoidSendCommand>
	//write to it special character
	//Arabic special character
	/* here we fill the 8 bytes of the 8  special characters*/

		for(u16 j=0;j<No_of_Rows;j++)//Rows of  each place on screen
    24ba:	1a 82       	std	Y+2, r1	; 0x02
    24bc:	19 82       	std	Y+1, r1	; 0x01
    24be:	27 c0       	rjmp	.+78     	; 0x250e <Lcd_VoidStoreSpecialCharacter+0x9c>
			{
			//Lcd_VoidSendChar(0, Lcd);
			Lcd_VoidSendChar(Copy_SpecChar[i][j], Lcd);
    24c0:	8b 81       	ldd	r24, Y+3	; 0x03
    24c2:	9c 81       	ldd	r25, Y+4	; 0x04
    24c4:	9c 01       	movw	r18, r24
    24c6:	22 0f       	add	r18, r18
    24c8:	33 1f       	adc	r19, r19
    24ca:	c9 01       	movw	r24, r18
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	88 0f       	add	r24, r24
    24d2:	99 1f       	adc	r25, r25
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	ac 01       	movw	r20, r24
    24da:	42 1b       	sub	r20, r18
    24dc:	53 0b       	sbc	r21, r19
    24de:	9a 01       	movw	r18, r20
    24e0:	8e 81       	ldd	r24, Y+6	; 0x06
    24e2:	9f 81       	ldd	r25, Y+7	; 0x07
    24e4:	28 0f       	add	r18, r24
    24e6:	39 1f       	adc	r19, r25
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	9a 81       	ldd	r25, Y+2	; 0x02
    24ec:	88 0f       	add	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	f9 01       	movw	r30, r18
    24f2:	e8 0f       	add	r30, r24
    24f4:	f9 1f       	adc	r31, r25
    24f6:	80 81       	ld	r24, Z
    24f8:	91 81       	ldd	r25, Z+1	; 0x01
    24fa:	2a 85       	ldd	r18, Y+10	; 0x0a
    24fc:	3b 85       	ldd	r19, Y+11	; 0x0b
    24fe:	b9 01       	movw	r22, r18
    2500:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <Lcd_VoidSendChar>
	Lcd_VoidSendCommand(LCD_SetAddressCGRAM +(write_Addr*(8)) , Lcd);
	//write to it special character
	//Arabic special character
	/* here we fill the 8 bytes of the 8  special characters*/

		for(u16 j=0;j<No_of_Rows;j++)//Rows of  each place on screen
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	9a 81       	ldd	r25, Y+2	; 0x02
    2508:	01 96       	adiw	r24, 0x01	; 1
    250a:	9a 83       	std	Y+2, r25	; 0x02
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	8d 81       	ldd	r24, Y+5	; 0x05
    2510:	28 2f       	mov	r18, r24
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	9a 81       	ldd	r25, Y+2	; 0x02
    2518:	82 17       	cp	r24, r18
    251a:	93 07       	cpc	r25, r19
    251c:	88 f2       	brcs	.-94     	; 0x24c0 <Lcd_VoidStoreSpecialCharacter+0x4e>
			//Lcd_VoidSendChar(0, Lcd);
			Lcd_VoidSendChar(Copy_SpecChar[i][j], Lcd);

			}

		write_Addr++; //increment address in CGRAM
    251e:	88 85       	ldd	r24, Y+8	; 0x08
    2520:	8f 5f       	subi	r24, 0xFF	; 255
    2522:	88 87       	std	Y+8, r24	; 0x08
}

void Lcd_VoidStoreSpecialCharacter(u16 Copy_SpecChar[][7],CGRAM_Write_Addr write_Addr,u8 No_of_Characters,Lcd_Info*Lcd)
{
	u8 No_of_Rows=7;
	for(u16 i=0;i<No_of_Characters;i++)
    2524:	8b 81       	ldd	r24, Y+3	; 0x03
    2526:	9c 81       	ldd	r25, Y+4	; 0x04
    2528:	01 96       	adiw	r24, 0x01	; 1
    252a:	9c 83       	std	Y+4, r25	; 0x04
    252c:	8b 83       	std	Y+3, r24	; 0x03
    252e:	89 85       	ldd	r24, Y+9	; 0x09
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	8b 81       	ldd	r24, Y+3	; 0x03
    2536:	9c 81       	ldd	r25, Y+4	; 0x04
    2538:	82 17       	cp	r24, r18
    253a:	93 07       	cpc	r25, r19
    253c:	08 f4       	brcc	.+2      	; 0x2540 <Lcd_VoidStoreSpecialCharacter+0xce>
    253e:	ae cf       	rjmp	.-164    	; 0x249c <Lcd_VoidStoreSpecialCharacter+0x2a>
//	Lcd_VoidSendChar(2, Lcd);
//	Lcd_VoidSendChar(2, Lcd);
//	Lcd_VoidSendChar(12, Lcd);


}
    2540:	2b 96       	adiw	r28, 0x0b	; 11
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	f8 94       	cli
    2546:	de bf       	out	0x3e, r29	; 62
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	cd bf       	out	0x3d, r28	; 61
    254c:	cf 91       	pop	r28
    254e:	df 91       	pop	r29
    2550:	08 95       	ret

00002552 <Lcd_DisplaySpecialCharacter>:


void Lcd_DisplaySpecialCharacter(CGRAM_Read_Addr read,u8 Select_Char,Lcd_Info*Lcd)
{
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	00 d0       	rcall	.+0      	; 0x2558 <Lcd_DisplaySpecialCharacter+0x6>
    2558:	00 d0       	rcall	.+0      	; 0x255a <Lcd_DisplaySpecialCharacter+0x8>
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	89 83       	std	Y+1, r24	; 0x01
    2560:	6a 83       	std	Y+2, r22	; 0x02
    2562:	5c 83       	std	Y+4, r21	; 0x04
    2564:	4b 83       	std	Y+3, r20	; 0x03

	//go to location read of DDRAM
		Lcd_VoidSendCommand(LCD_SetAddressDDRAM +read , Lcd);
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	80 58       	subi	r24, 0x80	; 128
    256a:	2b 81       	ldd	r18, Y+3	; 0x03
    256c:	3c 81       	ldd	r19, Y+4	; 0x04
    256e:	b9 01       	movw	r22, r18
    2570:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <Lcd_VoidSendCommand>
	//read from it the special char
		//print the element selected in the 8 special characters
		Lcd_VoidSendChar(Select_Char, Lcd);
    2574:	2b 81       	ldd	r18, Y+3	; 0x03
    2576:	3c 81       	ldd	r19, Y+4	; 0x04
    2578:	8a 81       	ldd	r24, Y+2	; 0x02
    257a:	b9 01       	movw	r22, r18
    257c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <Lcd_VoidSendChar>

			}
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <KeyPad_VoidInit>:
#define KeyPad_Rows  4
#define KeyPad_Columns  4
u8 KeyPad_Values[KeyPad_Rows][KeyPad_Columns]={{'T','S','I','D'},{1,2,3,4},{5,6,7,8},{9,0,'+','='}};

void KeyPad_VoidInit (KeyPad_Info* KeyPad)
{
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	00 d0       	rcall	.+0      	; 0x2594 <KeyPad_VoidInit+0x6>
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	9a 83       	std	Y+2, r25	; 0x02
    259a:	89 83       	std	Y+1, r24	; 0x01
	//  rows as output
		//DIO_ErrStateSetGroupDirection(DIO_GroupC, 0xf0);
		DIO_ErrStateSetPinDirection(KeyPad->Rows_Group, KeyPad->R1, DIO_Output);
    259c:	e9 81       	ldd	r30, Y+1	; 0x01
    259e:	fa 81       	ldd	r31, Y+2	; 0x02
    25a0:	80 81       	ld	r24, Z
    25a2:	e9 81       	ldd	r30, Y+1	; 0x01
    25a4:	fa 81       	ldd	r31, Y+2	; 0x02
    25a6:	92 81       	ldd	r25, Z+2	; 0x02
    25a8:	69 2f       	mov	r22, r25
    25aa:	41 e0       	ldi	r20, 0x01	; 1
    25ac:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(KeyPad->Rows_Group, KeyPad->R2,  DIO_Output);
    25b0:	e9 81       	ldd	r30, Y+1	; 0x01
    25b2:	fa 81       	ldd	r31, Y+2	; 0x02
    25b4:	80 81       	ld	r24, Z
    25b6:	e9 81       	ldd	r30, Y+1	; 0x01
    25b8:	fa 81       	ldd	r31, Y+2	; 0x02
    25ba:	93 81       	ldd	r25, Z+3	; 0x03
    25bc:	69 2f       	mov	r22, r25
    25be:	41 e0       	ldi	r20, 0x01	; 1
    25c0:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(KeyPad->Rows_Group, KeyPad->R3, DIO_Output);
    25c4:	e9 81       	ldd	r30, Y+1	; 0x01
    25c6:	fa 81       	ldd	r31, Y+2	; 0x02
    25c8:	80 81       	ld	r24, Z
    25ca:	e9 81       	ldd	r30, Y+1	; 0x01
    25cc:	fa 81       	ldd	r31, Y+2	; 0x02
    25ce:	94 81       	ldd	r25, Z+4	; 0x04
    25d0:	69 2f       	mov	r22, r25
    25d2:	41 e0       	ldi	r20, 0x01	; 1
    25d4:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(KeyPad->Rows_Group, KeyPad->R4, DIO_Output);
    25d8:	e9 81       	ldd	r30, Y+1	; 0x01
    25da:	fa 81       	ldd	r31, Y+2	; 0x02
    25dc:	80 81       	ld	r24, Z
    25de:	e9 81       	ldd	r30, Y+1	; 0x01
    25e0:	fa 81       	ldd	r31, Y+2	; 0x02
    25e2:	95 81       	ldd	r25, Z+5	; 0x05
    25e4:	69 2f       	mov	r22, r25
    25e6:	41 e0       	ldi	r20, 0x01	; 1
    25e8:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
	//define columns as input
		DIO_ErrStateSetPinDirection(KeyPad->Columns_Group, KeyPad->C1, DIO_Input);
    25ec:	e9 81       	ldd	r30, Y+1	; 0x01
    25ee:	fa 81       	ldd	r31, Y+2	; 0x02
    25f0:	81 81       	ldd	r24, Z+1	; 0x01
    25f2:	e9 81       	ldd	r30, Y+1	; 0x01
    25f4:	fa 81       	ldd	r31, Y+2	; 0x02
    25f6:	96 81       	ldd	r25, Z+6	; 0x06
    25f8:	69 2f       	mov	r22, r25
    25fa:	40 e0       	ldi	r20, 0x00	; 0
    25fc:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(KeyPad->Columns_Group, KeyPad->C2, DIO_Input);
    2600:	e9 81       	ldd	r30, Y+1	; 0x01
    2602:	fa 81       	ldd	r31, Y+2	; 0x02
    2604:	81 81       	ldd	r24, Z+1	; 0x01
    2606:	e9 81       	ldd	r30, Y+1	; 0x01
    2608:	fa 81       	ldd	r31, Y+2	; 0x02
    260a:	97 81       	ldd	r25, Z+7	; 0x07
    260c:	69 2f       	mov	r22, r25
    260e:	40 e0       	ldi	r20, 0x00	; 0
    2610:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(KeyPad->Columns_Group, KeyPad->C3, DIO_Input);
    2614:	e9 81       	ldd	r30, Y+1	; 0x01
    2616:	fa 81       	ldd	r31, Y+2	; 0x02
    2618:	81 81       	ldd	r24, Z+1	; 0x01
    261a:	e9 81       	ldd	r30, Y+1	; 0x01
    261c:	fa 81       	ldd	r31, Y+2	; 0x02
    261e:	90 85       	ldd	r25, Z+8	; 0x08
    2620:	69 2f       	mov	r22, r25
    2622:	40 e0       	ldi	r20, 0x00	; 0
    2624:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(KeyPad->Columns_Group, KeyPad->C4, DIO_Input);
    2628:	e9 81       	ldd	r30, Y+1	; 0x01
    262a:	fa 81       	ldd	r31, Y+2	; 0x02
    262c:	81 81       	ldd	r24, Z+1	; 0x01
    262e:	e9 81       	ldd	r30, Y+1	; 0x01
    2630:	fa 81       	ldd	r31, Y+2	; 0x02
    2632:	91 85       	ldd	r25, Z+9	; 0x09
    2634:	69 2f       	mov	r22, r25
    2636:	40 e0       	ldi	r20, 0x00	; 0
    2638:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
		//select internal pullup
		//DIO_ErrStateSetGroupValue(DIO_GroupC, 0xff);
		DIO_ErrStateSetPinValue(KeyPad->Columns_Group, KeyPad->C1, DIO_High);
    263c:	e9 81       	ldd	r30, Y+1	; 0x01
    263e:	fa 81       	ldd	r31, Y+2	; 0x02
    2640:	81 81       	ldd	r24, Z+1	; 0x01
    2642:	e9 81       	ldd	r30, Y+1	; 0x01
    2644:	fa 81       	ldd	r31, Y+2	; 0x02
    2646:	96 81       	ldd	r25, Z+6	; 0x06
    2648:	69 2f       	mov	r22, r25
    264a:	41 e0       	ldi	r20, 0x01	; 1
    264c:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(KeyPad->Columns_Group, KeyPad->C2, DIO_High);
    2650:	e9 81       	ldd	r30, Y+1	; 0x01
    2652:	fa 81       	ldd	r31, Y+2	; 0x02
    2654:	81 81       	ldd	r24, Z+1	; 0x01
    2656:	e9 81       	ldd	r30, Y+1	; 0x01
    2658:	fa 81       	ldd	r31, Y+2	; 0x02
    265a:	97 81       	ldd	r25, Z+7	; 0x07
    265c:	69 2f       	mov	r22, r25
    265e:	41 e0       	ldi	r20, 0x01	; 1
    2660:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(KeyPad->Columns_Group, KeyPad->C3, DIO_High);
    2664:	e9 81       	ldd	r30, Y+1	; 0x01
    2666:	fa 81       	ldd	r31, Y+2	; 0x02
    2668:	81 81       	ldd	r24, Z+1	; 0x01
    266a:	e9 81       	ldd	r30, Y+1	; 0x01
    266c:	fa 81       	ldd	r31, Y+2	; 0x02
    266e:	90 85       	ldd	r25, Z+8	; 0x08
    2670:	69 2f       	mov	r22, r25
    2672:	41 e0       	ldi	r20, 0x01	; 1
    2674:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(KeyPad->Columns_Group, KeyPad->C4, DIO_High);
    2678:	e9 81       	ldd	r30, Y+1	; 0x01
    267a:	fa 81       	ldd	r31, Y+2	; 0x02
    267c:	81 81       	ldd	r24, Z+1	; 0x01
    267e:	e9 81       	ldd	r30, Y+1	; 0x01
    2680:	fa 81       	ldd	r31, Y+2	; 0x02
    2682:	91 85       	ldd	r25, Z+9	; 0x09
    2684:	69 2f       	mov	r22, r25
    2686:	41 e0       	ldi	r20, 0x01	; 1
    2688:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
		//initialize rows with vcc
		DIO_ErrStateSetPinValue(KeyPad->Rows_Group, KeyPad->R1, DIO_High);
    268c:	e9 81       	ldd	r30, Y+1	; 0x01
    268e:	fa 81       	ldd	r31, Y+2	; 0x02
    2690:	80 81       	ld	r24, Z
    2692:	e9 81       	ldd	r30, Y+1	; 0x01
    2694:	fa 81       	ldd	r31, Y+2	; 0x02
    2696:	92 81       	ldd	r25, Z+2	; 0x02
    2698:	69 2f       	mov	r22, r25
    269a:	41 e0       	ldi	r20, 0x01	; 1
    269c:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(KeyPad->Rows_Group, KeyPad->R2, DIO_High);
    26a0:	e9 81       	ldd	r30, Y+1	; 0x01
    26a2:	fa 81       	ldd	r31, Y+2	; 0x02
    26a4:	80 81       	ld	r24, Z
    26a6:	e9 81       	ldd	r30, Y+1	; 0x01
    26a8:	fa 81       	ldd	r31, Y+2	; 0x02
    26aa:	93 81       	ldd	r25, Z+3	; 0x03
    26ac:	69 2f       	mov	r22, r25
    26ae:	41 e0       	ldi	r20, 0x01	; 1
    26b0:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(KeyPad->Rows_Group, KeyPad->R3, DIO_High);
    26b4:	e9 81       	ldd	r30, Y+1	; 0x01
    26b6:	fa 81       	ldd	r31, Y+2	; 0x02
    26b8:	80 81       	ld	r24, Z
    26ba:	e9 81       	ldd	r30, Y+1	; 0x01
    26bc:	fa 81       	ldd	r31, Y+2	; 0x02
    26be:	94 81       	ldd	r25, Z+4	; 0x04
    26c0:	69 2f       	mov	r22, r25
    26c2:	41 e0       	ldi	r20, 0x01	; 1
    26c4:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(KeyPad->Rows_Group, KeyPad->R4, DIO_High);
    26c8:	e9 81       	ldd	r30, Y+1	; 0x01
    26ca:	fa 81       	ldd	r31, Y+2	; 0x02
    26cc:	80 81       	ld	r24, Z
    26ce:	e9 81       	ldd	r30, Y+1	; 0x01
    26d0:	fa 81       	ldd	r31, Y+2	; 0x02
    26d2:	95 81       	ldd	r25, Z+5	; 0x05
    26d4:	69 2f       	mov	r22, r25
    26d6:	41 e0       	ldi	r20, 0x01	; 1
    26d8:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
}
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <KeyPad_U8SwitchPressed>:

   KeyPad_U8SwitchPressed(KeyPad_Info *KeyPad,KeyPad_status* Status)
{
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	68 97       	sbiw	r28, 0x18	; 24
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	9c 8b       	std	Y+20, r25	; 0x14
    26fc:	8b 8b       	std	Y+19, r24	; 0x13
    26fe:	7e 8b       	std	Y+22, r23	; 0x16
    2700:	6d 8b       	std	Y+21, r22	; 0x15
		u8 Row=0;
    2702:	19 8a       	std	Y+17, r1	; 0x11
		u8 Column=0;
    2704:	18 8a       	std	Y+16, r1	; 0x10
		static u8 Switch;
		//u8 Sw=0;
		u8 Column_Value=0;
    2706:	1a 8a       	std	Y+18, r1	; 0x12
		 u8 flag=0;
    2708:	1f 86       	std	Y+15, r1	; 0x0f
		  //KeyPad_status *Status;
		//loop
		for(Row=0;Row<KeyPad_Rows;Row++)
    270a:	19 8a       	std	Y+17, r1	; 0x11
    270c:	dc c0       	rjmp	.+440    	; 0x28c6 <KeyPad_U8SwitchPressed+0x1e0>
					{
				 flag=0;
    270e:	1f 86       	std	Y+15, r1	; 0x0f
				 Status->flag=flag;
    2710:	ed 89       	ldd	r30, Y+21	; 0x15
    2712:	fe 89       	ldd	r31, Y+22	; 0x16
    2714:	8f 85       	ldd	r24, Y+15	; 0x0f
    2716:	81 83       	std	Z+1, r24	; 0x01

				DIO_ErrStateSetPinValue(KeyPad->Rows_Group, Row, DIO_Low);
    2718:	eb 89       	ldd	r30, Y+19	; 0x13
    271a:	fc 89       	ldd	r31, Y+20	; 0x14
    271c:	80 81       	ld	r24, Z
    271e:	69 89       	ldd	r22, Y+17	; 0x11
    2720:	40 e0       	ldi	r20, 0x00	; 0
    2722:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>
				for (Column=0;Column<KeyPad_Columns;Column++)
    2726:	18 8a       	std	Y+16, r1	; 0x10
    2728:	bd c0       	rjmp	.+378    	; 0x28a4 <KeyPad_U8SwitchPressed+0x1be>
				{

					DIO_ErrStateReadPinValue(KeyPad->Columns_Group, Column, &Column_Value);
    272a:	eb 89       	ldd	r30, Y+19	; 0x13
    272c:	fc 89       	ldd	r31, Y+20	; 0x14
    272e:	81 81       	ldd	r24, Z+1	; 0x01
    2730:	9e 01       	movw	r18, r28
    2732:	2e 5e       	subi	r18, 0xEE	; 238
    2734:	3f 4f       	sbci	r19, 0xFF	; 255
    2736:	68 89       	ldd	r22, Y+16	; 0x10
    2738:	a9 01       	movw	r20, r18
    273a:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_ErrStateReadPinValue>
					//read value function overwrites the value (garbage) of column_value
					if (Column_Value==DIO_Low)
    273e:	8a 89       	ldd	r24, Y+18	; 0x12
    2740:	88 23       	and	r24, r24
    2742:	09 f0       	breq	.+2      	; 0x2746 <KeyPad_U8SwitchPressed+0x60>
    2744:	ac c0       	rjmp	.+344    	; 0x289e <KeyPad_U8SwitchPressed+0x1b8>
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	a0 e7       	ldi	r26, 0x70	; 112
    274c:	b1 e4       	ldi	r27, 0x41	; 65
    274e:	8b 87       	std	Y+11, r24	; 0x0b
    2750:	9c 87       	std	Y+12, r25	; 0x0c
    2752:	ad 87       	std	Y+13, r26	; 0x0d
    2754:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2756:	6b 85       	ldd	r22, Y+11	; 0x0b
    2758:	7c 85       	ldd	r23, Y+12	; 0x0c
    275a:	8d 85       	ldd	r24, Y+13	; 0x0d
    275c:	9e 85       	ldd	r25, Y+14	; 0x0e
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	4a ef       	ldi	r20, 0xFA	; 250
    2764:	54 e4       	ldi	r21, 0x44	; 68
    2766:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	8f 83       	std	Y+7, r24	; 0x07
    2770:	98 87       	std	Y+8, r25	; 0x08
    2772:	a9 87       	std	Y+9, r26	; 0x09
    2774:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2776:	6f 81       	ldd	r22, Y+7	; 0x07
    2778:	78 85       	ldd	r23, Y+8	; 0x08
    277a:	89 85       	ldd	r24, Y+9	; 0x09
    277c:	9a 85       	ldd	r25, Y+10	; 0x0a
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e8       	ldi	r20, 0x80	; 128
    2784:	5f e3       	ldi	r21, 0x3F	; 63
    2786:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    278a:	88 23       	and	r24, r24
    278c:	2c f4       	brge	.+10     	; 0x2798 <KeyPad_U8SwitchPressed+0xb2>
		__ticks = 1;
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	9e 83       	std	Y+6, r25	; 0x06
    2794:	8d 83       	std	Y+5, r24	; 0x05
    2796:	3f c0       	rjmp	.+126    	; 0x2816 <KeyPad_U8SwitchPressed+0x130>
	else if (__tmp > 65535)
    2798:	6f 81       	ldd	r22, Y+7	; 0x07
    279a:	78 85       	ldd	r23, Y+8	; 0x08
    279c:	89 85       	ldd	r24, Y+9	; 0x09
    279e:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	3f ef       	ldi	r19, 0xFF	; 255
    27a4:	4f e7       	ldi	r20, 0x7F	; 127
    27a6:	57 e4       	ldi	r21, 0x47	; 71
    27a8:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    27ac:	18 16       	cp	r1, r24
    27ae:	4c f5       	brge	.+82     	; 0x2802 <KeyPad_U8SwitchPressed+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e2       	ldi	r20, 0x20	; 32
    27be:	51 e4       	ldi	r21, 0x41	; 65
    27c0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	bc 01       	movw	r22, r24
    27ca:	cd 01       	movw	r24, r26
    27cc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9e 83       	std	Y+6, r25	; 0x06
    27d6:	8d 83       	std	Y+5, r24	; 0x05
    27d8:	0f c0       	rjmp	.+30     	; 0x27f8 <KeyPad_U8SwitchPressed+0x112>
    27da:	88 ec       	ldi	r24, 0xC8	; 200
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	9c 83       	std	Y+4, r25	; 0x04
    27e0:	8b 83       	std	Y+3, r24	; 0x03
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	9c 81       	ldd	r25, Y+4	; 0x04
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <KeyPad_U8SwitchPressed+0x100>
    27ea:	9c 83       	std	Y+4, r25	; 0x04
    27ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ee:	8d 81       	ldd	r24, Y+5	; 0x05
    27f0:	9e 81       	ldd	r25, Y+6	; 0x06
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	9e 83       	std	Y+6, r25	; 0x06
    27f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f8:	8d 81       	ldd	r24, Y+5	; 0x05
    27fa:	9e 81       	ldd	r25, Y+6	; 0x06
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	69 f7       	brne	.-38     	; 0x27da <KeyPad_U8SwitchPressed+0xf4>
    2800:	14 c0       	rjmp	.+40     	; 0x282a <KeyPad_U8SwitchPressed+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2802:	6f 81       	ldd	r22, Y+7	; 0x07
    2804:	78 85       	ldd	r23, Y+8	; 0x08
    2806:	89 85       	ldd	r24, Y+9	; 0x09
    2808:	9a 85       	ldd	r25, Y+10	; 0x0a
    280a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	9e 83       	std	Y+6, r25	; 0x06
    2814:	8d 83       	std	Y+5, r24	; 0x05
    2816:	8d 81       	ldd	r24, Y+5	; 0x05
    2818:	9e 81       	ldd	r25, Y+6	; 0x06
    281a:	9a 83       	std	Y+2, r25	; 0x02
    281c:	89 83       	std	Y+1, r24	; 0x01
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	9a 81       	ldd	r25, Y+2	; 0x02
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <KeyPad_U8SwitchPressed+0x13c>
    2826:	9a 83       	std	Y+2, r25	; 0x02
    2828:	89 83       	std	Y+1, r24	; 0x01
					{
						//check bouncing effect
						_delay_ms(15);
						DIO_ErrStateReadPinValue(KeyPad->Columns_Group, Column, &Column_Value);
    282a:	eb 89       	ldd	r30, Y+19	; 0x13
    282c:	fc 89       	ldd	r31, Y+20	; 0x14
    282e:	81 81       	ldd	r24, Z+1	; 0x01
    2830:	9e 01       	movw	r18, r28
    2832:	2e 5e       	subi	r18, 0xEE	; 238
    2834:	3f 4f       	sbci	r19, 0xFF	; 255
    2836:	68 89       	ldd	r22, Y+16	; 0x10
    2838:	a9 01       	movw	r20, r18
    283a:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_ErrStateReadPinValue>
						if (Column_Value==DIO_Low)
    283e:	8a 89       	ldd	r24, Y+18	; 0x12
    2840:	88 23       	and	r24, r24
    2842:	49 f5       	brne	.+82     	; 0x2896 <KeyPad_U8SwitchPressed+0x1b0>
						{
							//DIO_ErrStateReadPinValue(DIO_GroupC, Column, &Column_Value);
							Switch=KeyPad_Values[Row][Column];
    2844:	89 89       	ldd	r24, Y+17	; 0x11
    2846:	48 2f       	mov	r20, r24
    2848:	50 e0       	ldi	r21, 0x00	; 0
    284a:	88 89       	ldd	r24, Y+16	; 0x10
    284c:	28 2f       	mov	r18, r24
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	ca 01       	movw	r24, r20
    2852:	88 0f       	add	r24, r24
    2854:	99 1f       	adc	r25, r25
    2856:	88 0f       	add	r24, r24
    2858:	99 1f       	adc	r25, r25
    285a:	82 0f       	add	r24, r18
    285c:	93 1f       	adc	r25, r19
    285e:	fc 01       	movw	r30, r24
    2860:	e4 58       	subi	r30, 0x84	; 132
    2862:	fe 4f       	sbci	r31, 0xFE	; 254
    2864:	80 81       	ld	r24, Z
    2866:	80 93 9a 01 	sts	0x019A, r24
							flag=1;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	8f 87       	std	Y+15, r24	; 0x0f
							Status->flag=flag;
    286e:	ed 89       	ldd	r30, Y+21	; 0x15
    2870:	fe 89       	ldd	r31, Y+22	; 0x16
    2872:	8f 85       	ldd	r24, Y+15	; 0x0f
    2874:	81 83       	std	Z+1, r24	; 0x01
							Status->Switchpressed=Switch;
    2876:	80 91 9a 01 	lds	r24, 0x019A
    287a:	ed 89       	ldd	r30, Y+21	; 0x15
    287c:	fe 89       	ldd	r31, Y+22	; 0x16
    287e:	80 83       	st	Z, r24
    2880:	0a c0       	rjmp	.+20     	; 0x2896 <KeyPad_U8SwitchPressed+0x1b0>

						}
							while(Column_Value==DIO_Low)
								{

									DIO_ErrStateReadPinValue(KeyPad->Columns_Group, Column, &Column_Value);
    2882:	eb 89       	ldd	r30, Y+19	; 0x13
    2884:	fc 89       	ldd	r31, Y+20	; 0x14
    2886:	81 81       	ldd	r24, Z+1	; 0x01
    2888:	9e 01       	movw	r18, r28
    288a:	2e 5e       	subi	r18, 0xEE	; 238
    288c:	3f 4f       	sbci	r19, 0xFF	; 255
    288e:	68 89       	ldd	r22, Y+16	; 0x10
    2890:	a9 01       	movw	r20, r18
    2892:	0e 94 00 0b 	call	0x1600	; 0x1600 <DIO_ErrStateReadPinValue>
							Status->flag=flag;
							Status->Switchpressed=Switch;


						}
							while(Column_Value==DIO_Low)
    2896:	8a 89       	ldd	r24, Y+18	; 0x12
    2898:	88 23       	and	r24, r24
    289a:	99 f3       	breq	.-26     	; 0x2882 <KeyPad_U8SwitchPressed+0x19c>
    289c:	07 c0       	rjmp	.+14     	; 0x28ac <KeyPad_U8SwitchPressed+0x1c6>
					{
				 flag=0;
				 Status->flag=flag;

				DIO_ErrStateSetPinValue(KeyPad->Rows_Group, Row, DIO_Low);
				for (Column=0;Column<KeyPad_Columns;Column++)
    289e:	88 89       	ldd	r24, Y+16	; 0x10
    28a0:	8f 5f       	subi	r24, 0xFF	; 255
    28a2:	88 8b       	std	Y+16, r24	; 0x10
    28a4:	88 89       	ldd	r24, Y+16	; 0x10
    28a6:	84 30       	cpi	r24, 0x04	; 4
    28a8:	08 f4       	brcc	.+2      	; 0x28ac <KeyPad_U8SwitchPressed+0x1c6>
    28aa:	3f cf       	rjmp	.-386    	; 0x272a <KeyPad_U8SwitchPressed+0x44>
						//return KeyPad_Value[Row][Column];

						//_delay_ms(300);
					}
				}
				DIO_ErrStateSetPinValue(KeyPad->Rows_Group, Row, DIO_High);
    28ac:	eb 89       	ldd	r30, Y+19	; 0x13
    28ae:	fc 89       	ldd	r31, Y+20	; 0x14
    28b0:	80 81       	ld	r24, Z
    28b2:	69 89       	ldd	r22, Y+17	; 0x11
    28b4:	41 e0       	ldi	r20, 0x01	; 1
    28b6:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_ErrStateSetPinValue>

				if (flag==1){break;}
    28ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    28bc:	81 30       	cpi	r24, 0x01	; 1
    28be:	39 f0       	breq	.+14     	; 0x28ce <KeyPad_U8SwitchPressed+0x1e8>
		//u8 Sw=0;
		u8 Column_Value=0;
		 u8 flag=0;
		  //KeyPad_status *Status;
		//loop
		for(Row=0;Row<KeyPad_Rows;Row++)
    28c0:	89 89       	ldd	r24, Y+17	; 0x11
    28c2:	8f 5f       	subi	r24, 0xFF	; 255
    28c4:	89 8b       	std	Y+17, r24	; 0x11
    28c6:	89 89       	ldd	r24, Y+17	; 0x11
    28c8:	84 30       	cpi	r24, 0x04	; 4
    28ca:	08 f4       	brcc	.+2      	; 0x28ce <KeyPad_U8SwitchPressed+0x1e8>
    28cc:	20 cf       	rjmp	.-448    	; 0x270e <KeyPad_U8SwitchPressed+0x28>
				if (flag==1){break;}
			}


		//return Status;
}
    28ce:	68 96       	adiw	r28, 0x18	; 24
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	f8 94       	cli
    28d4:	de bf       	out	0x3e, r29	; 62
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	cd bf       	out	0x3d, r28	; 61
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	08 95       	ret

000028e0 <SPI_voidInit>:
#define SPCR 		*((volatile u8*)0x2D )
#define SPDR 		*((volatile u8*)0x2F )
#define SPSR 		*((volatile u8*)0x2E )
/****************************Master***********************************/
void SPI_voidInit()
{
    28e0:	df 93       	push	r29
    28e2:	cf 93       	push	r28
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
//		DIO_ErrStateSetPinDirection(DIO_GroupD, Pin4, DIO_Input);//SS PIN



	//enable SPI
Set_Bit(SPCR,6);
    28e8:	ad e2       	ldi	r26, 0x2D	; 45
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	ed e2       	ldi	r30, 0x2D	; 45
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	80 64       	ori	r24, 0x40	; 64
    28f4:	8c 93       	st	X, r24

//select master
Set_Bit(SPCR,4);
    28f6:	ad e2       	ldi	r26, 0x2D	; 45
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	ed e2       	ldi	r30, 0x2D	; 45
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	80 61       	ori	r24, 0x10	; 16
    2902:	8c 93       	st	X, r24
//selecct polarity (1)
Set_Bit(SPCR,3);
    2904:	ad e2       	ldi	r26, 0x2D	; 45
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	ed e2       	ldi	r30, 0x2D	; 45
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	88 60       	ori	r24, 0x08	; 8
    2910:	8c 93       	st	X, r24
//select phase (1)
Set_Bit(SPCR,2);
    2912:	ad e2       	ldi	r26, 0x2D	; 45
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	ed e2       	ldi	r30, 0x2D	; 45
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	84 60       	ori	r24, 0x04	; 4
    291e:	8c 93       	st	X, r24
//select prescaler (/16)
Set_Bit(SPCR,0);
    2920:	ad e2       	ldi	r26, 0x2D	; 45
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	ed e2       	ldi	r30, 0x2D	; 45
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	81 60       	ori	r24, 0x01	; 1
    292c:	8c 93       	st	X, r24
Clr_Bit(SPCR,1);
    292e:	ad e2       	ldi	r26, 0x2D	; 45
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	ed e2       	ldi	r30, 0x2D	; 45
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	8d 7f       	andi	r24, 0xFD	; 253
    293a:	8c 93       	st	X, r24
Clr_Bit(SPSR,0);
    293c:	ae e2       	ldi	r26, 0x2E	; 46
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	ee e2       	ldi	r30, 0x2E	; 46
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	8e 7f       	andi	r24, 0xFE	; 254
    2948:	8c 93       	st	X, r24
//Clr_Bit(SPCR,4);
//no prescaler for slave



}
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	08 95       	ret

00002950 <SPI_u8SendReceive>:




u8 SPI_u8SendReceive(u8 data)
{
    2950:	df 93       	push	r29
    2952:	cf 93       	push	r28
    2954:	0f 92       	push	r0
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
    295a:	89 83       	std	Y+1, r24	; 0x01
	//the DIO pin that is connected to slave select of slave
	//DIO_ErrStateSetPinValue(DIO_GroupD, Pin5, DIO_Low);
	SPDR=data;
    295c:	ef e2       	ldi	r30, 0x2F	; 47
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	80 83       	st	Z, r24
	while(Get_Bit(SPSR,7)==0);
    2964:	ee e2       	ldi	r30, 0x2E	; 46
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	88 23       	and	r24, r24
    296c:	dc f7       	brge	.-10     	; 0x2964 <SPI_u8SendReceive+0x14>
	//DIO_ErrStateSetPinValue(DIO_GroupD, Pin5, DIO_High);
	return SPDR;
    296e:	ef e2       	ldi	r30, 0x2F	; 47
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	80 81       	ld	r24, Z

}
    2974:	0f 90       	pop	r0
    2976:	cf 91       	pop	r28
    2978:	df 91       	pop	r29
    297a:	08 95       	ret

0000297c <main>:
Lcd_Info lcd1={DIO_GroupD,DIO_GroupD,DIO_GroupD,Pin5,Pin4,Pin6,DIO_GroupA};



void main()
{
    297c:	df 93       	push	r29
    297e:	cf 93       	push	r28
    2980:	0f 92       	push	r0
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
	DIO_ErrStateSetPinDirection(DIO_GroupB, Pin5, DIO_Output);//MOSI PIN OUTPUT
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	65 e0       	ldi	r22, 0x05	; 5
    298a:	41 e0       	ldi	r20, 0x01	; 1
    298c:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(DIO_GroupB, Pin6, DIO_Input);//MISO PIN INPUT
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	66 e0       	ldi	r22, 0x06	; 6
    2994:	40 e0       	ldi	r20, 0x00	; 0
    2996:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(DIO_GroupB, Pin7, DIO_Output);//Clk PIN
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	67 e0       	ldi	r22, 0x07	; 7
    299e:	41 e0       	ldi	r20, 0x01	; 1
    29a0:	0e 94 48 08 	call	0x1090	; 0x1090 <DIO_ErrStateSetPinDirection>
Lcd_VoidInit(&lcd1);
    29a4:	8c e8       	ldi	r24, 0x8C	; 140
    29a6:	91 e0       	ldi	r25, 0x01	; 1
    29a8:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <Lcd_VoidInit>
SPI_voidInit();
    29ac:	0e 94 70 14 	call	0x28e0	; 0x28e0 <SPI_voidInit>
while(1)
{
	//send data from master
	//data=SPI_u8SendReceive('O');
	//receive data from master
	x=SPI_u8SendReceive('w');
    29b0:	87 e7       	ldi	r24, 0x77	; 119
    29b2:	0e 94 a8 14 	call	0x2950	; 0x2950 <SPI_u8SendReceive>
    29b6:	89 83       	std	Y+1, r24	; 0x01
	//_delay_ms(1000);
	Lcd_VoidSendChar(x, &lcd1);
    29b8:	2c e8       	ldi	r18, 0x8C	; 140
    29ba:	31 e0       	ldi	r19, 0x01	; 1
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	b9 01       	movw	r22, r18
    29c0:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <Lcd_VoidSendChar>
    29c4:	f5 cf       	rjmp	.-22     	; 0x29b0 <main+0x34>

000029c6 <__prologue_saves__>:
    29c6:	2f 92       	push	r2
    29c8:	3f 92       	push	r3
    29ca:	4f 92       	push	r4
    29cc:	5f 92       	push	r5
    29ce:	6f 92       	push	r6
    29d0:	7f 92       	push	r7
    29d2:	8f 92       	push	r8
    29d4:	9f 92       	push	r9
    29d6:	af 92       	push	r10
    29d8:	bf 92       	push	r11
    29da:	cf 92       	push	r12
    29dc:	df 92       	push	r13
    29de:	ef 92       	push	r14
    29e0:	ff 92       	push	r15
    29e2:	0f 93       	push	r16
    29e4:	1f 93       	push	r17
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
    29ee:	ca 1b       	sub	r28, r26
    29f0:	db 0b       	sbc	r29, r27
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	de bf       	out	0x3e, r29	; 62
    29f8:	0f be       	out	0x3f, r0	; 63
    29fa:	cd bf       	out	0x3d, r28	; 61
    29fc:	09 94       	ijmp

000029fe <__epilogue_restores__>:
    29fe:	2a 88       	ldd	r2, Y+18	; 0x12
    2a00:	39 88       	ldd	r3, Y+17	; 0x11
    2a02:	48 88       	ldd	r4, Y+16	; 0x10
    2a04:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a06:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a08:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a0a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a0c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a0e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a10:	b9 84       	ldd	r11, Y+9	; 0x09
    2a12:	c8 84       	ldd	r12, Y+8	; 0x08
    2a14:	df 80       	ldd	r13, Y+7	; 0x07
    2a16:	ee 80       	ldd	r14, Y+6	; 0x06
    2a18:	fd 80       	ldd	r15, Y+5	; 0x05
    2a1a:	0c 81       	ldd	r16, Y+4	; 0x04
    2a1c:	1b 81       	ldd	r17, Y+3	; 0x03
    2a1e:	aa 81       	ldd	r26, Y+2	; 0x02
    2a20:	b9 81       	ldd	r27, Y+1	; 0x01
    2a22:	ce 0f       	add	r28, r30
    2a24:	d1 1d       	adc	r29, r1
    2a26:	0f b6       	in	r0, 0x3f	; 63
    2a28:	f8 94       	cli
    2a2a:	de bf       	out	0x3e, r29	; 62
    2a2c:	0f be       	out	0x3f, r0	; 63
    2a2e:	cd bf       	out	0x3d, r28	; 61
    2a30:	ed 01       	movw	r28, r26
    2a32:	08 95       	ret

00002a34 <dtostrf>:
    2a34:	ef 92       	push	r14
    2a36:	ff 92       	push	r15
    2a38:	0f 93       	push	r16
    2a3a:	1f 93       	push	r17
    2a3c:	f2 2f       	mov	r31, r18
    2a3e:	f0 2e       	mov	r15, r16
    2a40:	47 fd       	sbrc	r20, 7
    2a42:	02 c0       	rjmp	.+4      	; 0x2a48 <dtostrf+0x14>
    2a44:	e4 e0       	ldi	r30, 0x04	; 4
    2a46:	01 c0       	rjmp	.+2      	; 0x2a4a <dtostrf+0x16>
    2a48:	e4 e1       	ldi	r30, 0x14	; 20
    2a4a:	24 2f       	mov	r18, r20
    2a4c:	33 27       	eor	r19, r19
    2a4e:	27 fd       	sbrc	r18, 7
    2a50:	30 95       	com	r19
    2a52:	37 ff       	sbrs	r19, 7
    2a54:	03 c0       	rjmp	.+6      	; 0x2a5c <dtostrf+0x28>
    2a56:	30 95       	com	r19
    2a58:	21 95       	neg	r18
    2a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5c:	4f 2d       	mov	r20, r15
    2a5e:	51 2f       	mov	r21, r17
    2a60:	0f 2f       	mov	r16, r31
    2a62:	ee 2e       	mov	r14, r30
    2a64:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <dtoa_prf>
    2a68:	8f 2d       	mov	r24, r15
    2a6a:	91 2f       	mov	r25, r17
    2a6c:	1f 91       	pop	r17
    2a6e:	0f 91       	pop	r16
    2a70:	ff 90       	pop	r15
    2a72:	ef 90       	pop	r14
    2a74:	08 95       	ret

00002a76 <dtoa_prf>:
    2a76:	a9 e0       	ldi	r26, 0x09	; 9
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	e1 e4       	ldi	r30, 0x41	; 65
    2a7c:	f5 e1       	ldi	r31, 0x15	; 21
    2a7e:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <__prologue_saves__+0x8>
    2a82:	6a 01       	movw	r12, r20
    2a84:	12 2f       	mov	r17, r18
    2a86:	a0 2e       	mov	r10, r16
    2a88:	be 2c       	mov	r11, r14
    2a8a:	2b e3       	ldi	r18, 0x3B	; 59
    2a8c:	20 17       	cp	r18, r16
    2a8e:	18 f4       	brcc	.+6      	; 0x2a96 <dtoa_prf+0x20>
    2a90:	2c e3       	ldi	r18, 0x3C	; 60
    2a92:	92 2e       	mov	r9, r18
    2a94:	02 c0       	rjmp	.+4      	; 0x2a9a <dtoa_prf+0x24>
    2a96:	90 2e       	mov	r9, r16
    2a98:	93 94       	inc	r9
    2a9a:	ae 01       	movw	r20, r28
    2a9c:	4f 5f       	subi	r20, 0xFF	; 255
    2a9e:	5f 4f       	sbci	r21, 0xFF	; 255
    2aa0:	27 e0       	ldi	r18, 0x07	; 7
    2aa2:	09 2d       	mov	r16, r9
    2aa4:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <__ftoa_engine>
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	e8 2e       	mov	r14, r24
    2aae:	ff 24       	eor	r15, r15
    2ab0:	c7 01       	movw	r24, r14
    2ab2:	89 70       	andi	r24, 0x09	; 9
    2ab4:	90 70       	andi	r25, 0x00	; 0
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	11 f4       	brne	.+4      	; 0x2abe <dtoa_prf+0x48>
    2aba:	ad e2       	ldi	r26, 0x2D	; 45
    2abc:	09 c0       	rjmp	.+18     	; 0x2ad0 <dtoa_prf+0x5a>
    2abe:	b1 fe       	sbrs	r11, 1
    2ac0:	02 c0       	rjmp	.+4      	; 0x2ac6 <dtoa_prf+0x50>
    2ac2:	ab e2       	ldi	r26, 0x2B	; 43
    2ac4:	05 c0       	rjmp	.+10     	; 0x2ad0 <dtoa_prf+0x5a>
    2ac6:	b0 fc       	sbrc	r11, 0
    2ac8:	02 c0       	rjmp	.+4      	; 0x2ace <dtoa_prf+0x58>
    2aca:	a0 e0       	ldi	r26, 0x00	; 0
    2acc:	01 c0       	rjmp	.+2      	; 0x2ad0 <dtoa_prf+0x5a>
    2ace:	a0 e2       	ldi	r26, 0x20	; 32
    2ad0:	e3 fe       	sbrs	r14, 3
    2ad2:	3b c0       	rjmp	.+118    	; 0x2b4a <dtoa_prf+0xd4>
    2ad4:	aa 23       	and	r26, r26
    2ad6:	11 f4       	brne	.+4      	; 0x2adc <dtoa_prf+0x66>
    2ad8:	23 e0       	ldi	r18, 0x03	; 3
    2ada:	01 c0       	rjmp	.+2      	; 0x2ade <dtoa_prf+0x68>
    2adc:	24 e0       	ldi	r18, 0x04	; 4
    2ade:	21 17       	cp	r18, r17
    2ae0:	10 f0       	brcs	.+4      	; 0x2ae6 <dtoa_prf+0x70>
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <dtoa_prf+0x74>
    2ae6:	12 1b       	sub	r17, r18
    2ae8:	21 2f       	mov	r18, r17
    2aea:	eb 2c       	mov	r14, r11
    2aec:	b4 fe       	sbrs	r11, 4
    2aee:	02 c0       	rjmp	.+4      	; 0x2af4 <dtoa_prf+0x7e>
    2af0:	32 2f       	mov	r19, r18
    2af2:	0a c0       	rjmp	.+20     	; 0x2b08 <dtoa_prf+0x92>
    2af4:	f6 01       	movw	r30, r12
    2af6:	32 2f       	mov	r19, r18
    2af8:	80 e2       	ldi	r24, 0x20	; 32
    2afa:	02 c0       	rjmp	.+4      	; 0x2b00 <dtoa_prf+0x8a>
    2afc:	81 93       	st	Z+, r24
    2afe:	31 50       	subi	r19, 0x01	; 1
    2b00:	33 23       	and	r19, r19
    2b02:	e1 f7       	brne	.-8      	; 0x2afc <dtoa_prf+0x86>
    2b04:	c2 0e       	add	r12, r18
    2b06:	d1 1c       	adc	r13, r1
    2b08:	aa 23       	and	r26, r26
    2b0a:	19 f0       	breq	.+6      	; 0x2b12 <dtoa_prf+0x9c>
    2b0c:	f6 01       	movw	r30, r12
    2b0e:	a1 93       	st	Z+, r26
    2b10:	6f 01       	movw	r12, r30
    2b12:	f6 01       	movw	r30, r12
    2b14:	31 96       	adiw	r30, 0x01	; 1
    2b16:	e2 fe       	sbrs	r14, 2
    2b18:	05 c0       	rjmp	.+10     	; 0x2b24 <dtoa_prf+0xae>
    2b1a:	9e e4       	ldi	r25, 0x4E	; 78
    2b1c:	d6 01       	movw	r26, r12
    2b1e:	9c 93       	st	X, r25
    2b20:	81 e4       	ldi	r24, 0x41	; 65
    2b22:	04 c0       	rjmp	.+8      	; 0x2b2c <dtoa_prf+0xb6>
    2b24:	9e e6       	ldi	r25, 0x6E	; 110
    2b26:	d6 01       	movw	r26, r12
    2b28:	9c 93       	st	X, r25
    2b2a:	81 e6       	ldi	r24, 0x61	; 97
    2b2c:	11 96       	adiw	r26, 0x01	; 1
    2b2e:	8c 93       	st	X, r24
    2b30:	91 83       	std	Z+1, r25	; 0x01
    2b32:	32 96       	adiw	r30, 0x02	; 2
    2b34:	df 01       	movw	r26, r30
    2b36:	83 2f       	mov	r24, r19
    2b38:	90 e2       	ldi	r25, 0x20	; 32
    2b3a:	02 c0       	rjmp	.+4      	; 0x2b40 <dtoa_prf+0xca>
    2b3c:	9d 93       	st	X+, r25
    2b3e:	81 50       	subi	r24, 0x01	; 1
    2b40:	88 23       	and	r24, r24
    2b42:	e1 f7       	brne	.-8      	; 0x2b3c <dtoa_prf+0xc6>
    2b44:	e3 0f       	add	r30, r19
    2b46:	f1 1d       	adc	r31, r1
    2b48:	40 c0       	rjmp	.+128    	; 0x2bca <dtoa_prf+0x154>
    2b4a:	e2 fe       	sbrs	r14, 2
    2b4c:	42 c0       	rjmp	.+132    	; 0x2bd2 <dtoa_prf+0x15c>
    2b4e:	aa 23       	and	r26, r26
    2b50:	11 f4       	brne	.+4      	; 0x2b56 <dtoa_prf+0xe0>
    2b52:	23 e0       	ldi	r18, 0x03	; 3
    2b54:	01 c0       	rjmp	.+2      	; 0x2b58 <dtoa_prf+0xe2>
    2b56:	24 e0       	ldi	r18, 0x04	; 4
    2b58:	21 17       	cp	r18, r17
    2b5a:	10 f0       	brcs	.+4      	; 0x2b60 <dtoa_prf+0xea>
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	02 c0       	rjmp	.+4      	; 0x2b64 <dtoa_prf+0xee>
    2b60:	12 1b       	sub	r17, r18
    2b62:	21 2f       	mov	r18, r17
    2b64:	eb 2c       	mov	r14, r11
    2b66:	b4 fe       	sbrs	r11, 4
    2b68:	02 c0       	rjmp	.+4      	; 0x2b6e <dtoa_prf+0xf8>
    2b6a:	92 2f       	mov	r25, r18
    2b6c:	0a c0       	rjmp	.+20     	; 0x2b82 <dtoa_prf+0x10c>
    2b6e:	f6 01       	movw	r30, r12
    2b70:	92 2f       	mov	r25, r18
    2b72:	80 e2       	ldi	r24, 0x20	; 32
    2b74:	02 c0       	rjmp	.+4      	; 0x2b7a <dtoa_prf+0x104>
    2b76:	81 93       	st	Z+, r24
    2b78:	91 50       	subi	r25, 0x01	; 1
    2b7a:	99 23       	and	r25, r25
    2b7c:	e1 f7       	brne	.-8      	; 0x2b76 <dtoa_prf+0x100>
    2b7e:	c2 0e       	add	r12, r18
    2b80:	d1 1c       	adc	r13, r1
    2b82:	aa 23       	and	r26, r26
    2b84:	19 f0       	breq	.+6      	; 0x2b8c <dtoa_prf+0x116>
    2b86:	f6 01       	movw	r30, r12
    2b88:	a1 93       	st	Z+, r26
    2b8a:	6f 01       	movw	r12, r30
    2b8c:	f6 01       	movw	r30, r12
    2b8e:	31 96       	adiw	r30, 0x01	; 1
    2b90:	e2 fe       	sbrs	r14, 2
    2b92:	08 c0       	rjmp	.+16     	; 0x2ba4 <dtoa_prf+0x12e>
    2b94:	89 e4       	ldi	r24, 0x49	; 73
    2b96:	d6 01       	movw	r26, r12
    2b98:	8c 93       	st	X, r24
    2b9a:	8e e4       	ldi	r24, 0x4E	; 78
    2b9c:	11 96       	adiw	r26, 0x01	; 1
    2b9e:	8c 93       	st	X, r24
    2ba0:	86 e4       	ldi	r24, 0x46	; 70
    2ba2:	07 c0       	rjmp	.+14     	; 0x2bb2 <dtoa_prf+0x13c>
    2ba4:	89 e6       	ldi	r24, 0x69	; 105
    2ba6:	d6 01       	movw	r26, r12
    2ba8:	8c 93       	st	X, r24
    2baa:	8e e6       	ldi	r24, 0x6E	; 110
    2bac:	11 96       	adiw	r26, 0x01	; 1
    2bae:	8c 93       	st	X, r24
    2bb0:	86 e6       	ldi	r24, 0x66	; 102
    2bb2:	81 83       	std	Z+1, r24	; 0x01
    2bb4:	32 96       	adiw	r30, 0x02	; 2
    2bb6:	df 01       	movw	r26, r30
    2bb8:	89 2f       	mov	r24, r25
    2bba:	20 e2       	ldi	r18, 0x20	; 32
    2bbc:	02 c0       	rjmp	.+4      	; 0x2bc2 <dtoa_prf+0x14c>
    2bbe:	2d 93       	st	X+, r18
    2bc0:	81 50       	subi	r24, 0x01	; 1
    2bc2:	88 23       	and	r24, r24
    2bc4:	e1 f7       	brne	.-8      	; 0x2bbe <dtoa_prf+0x148>
    2bc6:	e9 0f       	add	r30, r25
    2bc8:	f1 1d       	adc	r31, r1
    2bca:	10 82       	st	Z, r1
    2bcc:	2e ef       	ldi	r18, 0xFE	; 254
    2bce:	3f ef       	ldi	r19, 0xFF	; 255
    2bd0:	af c0       	rjmp	.+350    	; 0x2d30 <dtoa_prf+0x2ba>
    2bd2:	16 16       	cp	r1, r22
    2bd4:	17 06       	cpc	r1, r23
    2bd6:	1c f0       	brlt	.+6      	; 0x2bde <dtoa_prf+0x168>
    2bd8:	41 e0       	ldi	r20, 0x01	; 1
    2bda:	50 e0       	ldi	r21, 0x00	; 0
    2bdc:	03 c0       	rjmp	.+6      	; 0x2be4 <dtoa_prf+0x16e>
    2bde:	ab 01       	movw	r20, r22
    2be0:	4f 5f       	subi	r20, 0xFF	; 255
    2be2:	5f 4f       	sbci	r21, 0xFF	; 255
    2be4:	aa 20       	and	r10, r10
    2be6:	19 f4       	brne	.+6      	; 0x2bee <dtoa_prf+0x178>
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	03 c0       	rjmp	.+6      	; 0x2bf4 <dtoa_prf+0x17e>
    2bee:	8a 2d       	mov	r24, r10
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	01 96       	adiw	r24, 0x01	; 1
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	aa 23       	and	r26, r26
    2bfa:	11 f0       	breq	.+4      	; 0x2c00 <dtoa_prf+0x18a>
    2bfc:	21 e0       	ldi	r18, 0x01	; 1
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	24 0f       	add	r18, r20
    2c02:	35 1f       	adc	r19, r21
    2c04:	28 0f       	add	r18, r24
    2c06:	39 1f       	adc	r19, r25
    2c08:	81 2f       	mov	r24, r17
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	28 17       	cp	r18, r24
    2c0e:	39 07       	cpc	r19, r25
    2c10:	14 f0       	brlt	.+4      	; 0x2c16 <dtoa_prf+0x1a0>
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	02 c0       	rjmp	.+4      	; 0x2c1a <dtoa_prf+0x1a4>
    2c16:	12 1b       	sub	r17, r18
    2c18:	21 2f       	mov	r18, r17
    2c1a:	4b 2d       	mov	r20, r11
    2c1c:	50 e0       	ldi	r21, 0x00	; 0
    2c1e:	ca 01       	movw	r24, r20
    2c20:	80 71       	andi	r24, 0x10	; 16
    2c22:	90 70       	andi	r25, 0x00	; 0
    2c24:	b4 fc       	sbrc	r11, 4
    2c26:	0d c0       	rjmp	.+26     	; 0x2c42 <dtoa_prf+0x1cc>
    2c28:	b3 fc       	sbrc	r11, 3
    2c2a:	0b c0       	rjmp	.+22     	; 0x2c42 <dtoa_prf+0x1cc>
    2c2c:	f6 01       	movw	r30, r12
    2c2e:	32 2f       	mov	r19, r18
    2c30:	40 e2       	ldi	r20, 0x20	; 32
    2c32:	02 c0       	rjmp	.+4      	; 0x2c38 <dtoa_prf+0x1c2>
    2c34:	41 93       	st	Z+, r20
    2c36:	31 50       	subi	r19, 0x01	; 1
    2c38:	33 23       	and	r19, r19
    2c3a:	e1 f7       	brne	.-8      	; 0x2c34 <dtoa_prf+0x1be>
    2c3c:	c2 0e       	add	r12, r18
    2c3e:	d1 1c       	adc	r13, r1
    2c40:	01 c0       	rjmp	.+2      	; 0x2c44 <dtoa_prf+0x1ce>
    2c42:	32 2f       	mov	r19, r18
    2c44:	aa 23       	and	r26, r26
    2c46:	19 f0       	breq	.+6      	; 0x2c4e <dtoa_prf+0x1d8>
    2c48:	f6 01       	movw	r30, r12
    2c4a:	a1 93       	st	Z+, r26
    2c4c:	6f 01       	movw	r12, r30
    2c4e:	89 2b       	or	r24, r25
    2c50:	11 f0       	breq	.+4      	; 0x2c56 <dtoa_prf+0x1e0>
    2c52:	13 2f       	mov	r17, r19
    2c54:	0a c0       	rjmp	.+20     	; 0x2c6a <dtoa_prf+0x1f4>
    2c56:	f6 01       	movw	r30, r12
    2c58:	13 2f       	mov	r17, r19
    2c5a:	80 e3       	ldi	r24, 0x30	; 48
    2c5c:	02 c0       	rjmp	.+4      	; 0x2c62 <dtoa_prf+0x1ec>
    2c5e:	81 93       	st	Z+, r24
    2c60:	11 50       	subi	r17, 0x01	; 1
    2c62:	11 23       	and	r17, r17
    2c64:	e1 f7       	brne	.-8      	; 0x2c5e <dtoa_prf+0x1e8>
    2c66:	c3 0e       	add	r12, r19
    2c68:	d1 1c       	adc	r13, r1
    2c6a:	09 2d       	mov	r16, r9
    2c6c:	06 0f       	add	r16, r22
    2c6e:	ba 80       	ldd	r11, Y+2	; 0x02
    2c70:	90 e1       	ldi	r25, 0x10	; 16
    2c72:	89 2e       	mov	r8, r25
    2c74:	91 2c       	mov	r9, r1
    2c76:	8e 20       	and	r8, r14
    2c78:	9f 20       	and	r9, r15
    2c7a:	e4 fe       	sbrs	r14, 4
    2c7c:	04 c0       	rjmp	.+8      	; 0x2c86 <dtoa_prf+0x210>
    2c7e:	f1 e3       	ldi	r31, 0x31	; 49
    2c80:	bf 16       	cp	r11, r31
    2c82:	09 f4       	brne	.+2      	; 0x2c86 <dtoa_prf+0x210>
    2c84:	01 50       	subi	r16, 0x01	; 1
    2c86:	10 16       	cp	r1, r16
    2c88:	14 f0       	brlt	.+4      	; 0x2c8e <dtoa_prf+0x218>
    2c8a:	01 e0       	ldi	r16, 0x01	; 1
    2c8c:	03 c0       	rjmp	.+6      	; 0x2c94 <dtoa_prf+0x21e>
    2c8e:	09 30       	cpi	r16, 0x09	; 9
    2c90:	08 f0       	brcs	.+2      	; 0x2c94 <dtoa_prf+0x21e>
    2c92:	08 e0       	ldi	r16, 0x08	; 8
    2c94:	9b 01       	movw	r18, r22
    2c96:	77 ff       	sbrs	r23, 7
    2c98:	02 c0       	rjmp	.+4      	; 0x2c9e <dtoa_prf+0x228>
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	01 96       	adiw	r24, 0x01	; 1
    2ca2:	82 1b       	sub	r24, r18
    2ca4:	93 0b       	sbc	r25, r19
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	31 96       	adiw	r30, 0x01	; 1
    2caa:	e8 0f       	add	r30, r24
    2cac:	f9 1f       	adc	r31, r25
    2cae:	8e e2       	ldi	r24, 0x2E	; 46
    2cb0:	f8 2e       	mov	r15, r24
    2cb2:	3b 01       	movw	r6, r22
    2cb4:	60 1a       	sub	r6, r16
    2cb6:	71 08       	sbc	r7, r1
    2cb8:	8a 2d       	mov	r24, r10
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	44 27       	eor	r20, r20
    2cbe:	55 27       	eor	r21, r21
    2cc0:	48 1b       	sub	r20, r24
    2cc2:	59 0b       	sbc	r21, r25
    2cc4:	8f ef       	ldi	r24, 0xFF	; 255
    2cc6:	2f 3f       	cpi	r18, 0xFF	; 255
    2cc8:	38 07       	cpc	r19, r24
    2cca:	19 f4       	brne	.+6      	; 0x2cd2 <dtoa_prf+0x25c>
    2ccc:	d6 01       	movw	r26, r12
    2cce:	fd 92       	st	X+, r15
    2cd0:	6d 01       	movw	r12, r26
    2cd2:	62 17       	cp	r22, r18
    2cd4:	73 07       	cpc	r23, r19
    2cd6:	2c f0       	brlt	.+10     	; 0x2ce2 <dtoa_prf+0x26c>
    2cd8:	62 16       	cp	r6, r18
    2cda:	73 06       	cpc	r7, r19
    2cdc:	14 f4       	brge	.+4      	; 0x2ce2 <dtoa_prf+0x26c>
    2cde:	80 81       	ld	r24, Z
    2ce0:	01 c0       	rjmp	.+2      	; 0x2ce4 <dtoa_prf+0x26e>
    2ce2:	80 e3       	ldi	r24, 0x30	; 48
    2ce4:	21 50       	subi	r18, 0x01	; 1
    2ce6:	30 40       	sbci	r19, 0x00	; 0
    2ce8:	31 96       	adiw	r30, 0x01	; 1
    2cea:	24 17       	cp	r18, r20
    2cec:	35 07       	cpc	r19, r21
    2cee:	24 f0       	brlt	.+8      	; 0x2cf8 <dtoa_prf+0x282>
    2cf0:	d6 01       	movw	r26, r12
    2cf2:	8d 93       	st	X+, r24
    2cf4:	6d 01       	movw	r12, r26
    2cf6:	e6 cf       	rjmp	.-52     	; 0x2cc4 <dtoa_prf+0x24e>
    2cf8:	26 17       	cp	r18, r22
    2cfa:	37 07       	cpc	r19, r23
    2cfc:	49 f4       	brne	.+18     	; 0x2d10 <dtoa_prf+0x29a>
    2cfe:	b5 e3       	ldi	r27, 0x35	; 53
    2d00:	bb 15       	cp	r27, r11
    2d02:	28 f0       	brcs	.+10     	; 0x2d0e <dtoa_prf+0x298>
    2d04:	bb 16       	cp	r11, r27
    2d06:	21 f4       	brne	.+8      	; 0x2d10 <dtoa_prf+0x29a>
    2d08:	81 14       	cp	r8, r1
    2d0a:	91 04       	cpc	r9, r1
    2d0c:	09 f4       	brne	.+2      	; 0x2d10 <dtoa_prf+0x29a>
    2d0e:	81 e3       	ldi	r24, 0x31	; 49
    2d10:	f6 01       	movw	r30, r12
    2d12:	81 93       	st	Z+, r24
    2d14:	d6 01       	movw	r26, r12
    2d16:	81 2f       	mov	r24, r17
    2d18:	90 e2       	ldi	r25, 0x20	; 32
    2d1a:	02 c0       	rjmp	.+4      	; 0x2d20 <dtoa_prf+0x2aa>
    2d1c:	9c 93       	st	X, r25
    2d1e:	81 50       	subi	r24, 0x01	; 1
    2d20:	11 96       	adiw	r26, 0x01	; 1
    2d22:	88 23       	and	r24, r24
    2d24:	d9 f7       	brne	.-10     	; 0x2d1c <dtoa_prf+0x2a6>
    2d26:	e1 0f       	add	r30, r17
    2d28:	f1 1d       	adc	r31, r1
    2d2a:	10 82       	st	Z, r1
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	c9 01       	movw	r24, r18
    2d32:	29 96       	adiw	r28, 0x09	; 9
    2d34:	ee e0       	ldi	r30, 0x0E	; 14
    2d36:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__epilogue_restores__+0x8>

00002d3a <__ftoa_engine>:
    2d3a:	28 30       	cpi	r18, 0x08	; 8
    2d3c:	08 f0       	brcs	.+2      	; 0x2d40 <__ftoa_engine+0x6>
    2d3e:	27 e0       	ldi	r18, 0x07	; 7
    2d40:	33 27       	eor	r19, r19
    2d42:	da 01       	movw	r26, r20
    2d44:	99 0f       	add	r25, r25
    2d46:	31 1d       	adc	r19, r1
    2d48:	87 fd       	sbrc	r24, 7
    2d4a:	91 60       	ori	r25, 0x01	; 1
    2d4c:	00 96       	adiw	r24, 0x00	; 0
    2d4e:	61 05       	cpc	r22, r1
    2d50:	71 05       	cpc	r23, r1
    2d52:	39 f4       	brne	.+14     	; 0x2d62 <__ftoa_engine+0x28>
    2d54:	32 60       	ori	r19, 0x02	; 2
    2d56:	2e 5f       	subi	r18, 0xFE	; 254
    2d58:	3d 93       	st	X+, r19
    2d5a:	30 e3       	ldi	r19, 0x30	; 48
    2d5c:	2a 95       	dec	r18
    2d5e:	e1 f7       	brne	.-8      	; 0x2d58 <__ftoa_engine+0x1e>
    2d60:	08 95       	ret
    2d62:	9f 3f       	cpi	r25, 0xFF	; 255
    2d64:	30 f0       	brcs	.+12     	; 0x2d72 <__ftoa_engine+0x38>
    2d66:	80 38       	cpi	r24, 0x80	; 128
    2d68:	71 05       	cpc	r23, r1
    2d6a:	61 05       	cpc	r22, r1
    2d6c:	09 f0       	breq	.+2      	; 0x2d70 <__ftoa_engine+0x36>
    2d6e:	3c 5f       	subi	r19, 0xFC	; 252
    2d70:	3c 5f       	subi	r19, 0xFC	; 252
    2d72:	3d 93       	st	X+, r19
    2d74:	91 30       	cpi	r25, 0x01	; 1
    2d76:	08 f0       	brcs	.+2      	; 0x2d7a <__ftoa_engine+0x40>
    2d78:	80 68       	ori	r24, 0x80	; 128
    2d7a:	91 1d       	adc	r25, r1
    2d7c:	df 93       	push	r29
    2d7e:	cf 93       	push	r28
    2d80:	1f 93       	push	r17
    2d82:	0f 93       	push	r16
    2d84:	ff 92       	push	r15
    2d86:	ef 92       	push	r14
    2d88:	19 2f       	mov	r17, r25
    2d8a:	98 7f       	andi	r25, 0xF8	; 248
    2d8c:	96 95       	lsr	r25
    2d8e:	e9 2f       	mov	r30, r25
    2d90:	96 95       	lsr	r25
    2d92:	96 95       	lsr	r25
    2d94:	e9 0f       	add	r30, r25
    2d96:	ff 27       	eor	r31, r31
    2d98:	e2 55       	subi	r30, 0x52	; 82
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	99 27       	eor	r25, r25
    2d9e:	33 27       	eor	r19, r19
    2da0:	ee 24       	eor	r14, r14
    2da2:	ff 24       	eor	r15, r15
    2da4:	a7 01       	movw	r20, r14
    2da6:	e7 01       	movw	r28, r14
    2da8:	05 90       	lpm	r0, Z+
    2daa:	08 94       	sec
    2dac:	07 94       	ror	r0
    2dae:	28 f4       	brcc	.+10     	; 0x2dba <__ftoa_engine+0x80>
    2db0:	36 0f       	add	r19, r22
    2db2:	e7 1e       	adc	r14, r23
    2db4:	f8 1e       	adc	r15, r24
    2db6:	49 1f       	adc	r20, r25
    2db8:	51 1d       	adc	r21, r1
    2dba:	66 0f       	add	r22, r22
    2dbc:	77 1f       	adc	r23, r23
    2dbe:	88 1f       	adc	r24, r24
    2dc0:	99 1f       	adc	r25, r25
    2dc2:	06 94       	lsr	r0
    2dc4:	a1 f7       	brne	.-24     	; 0x2dae <__ftoa_engine+0x74>
    2dc6:	05 90       	lpm	r0, Z+
    2dc8:	07 94       	ror	r0
    2dca:	28 f4       	brcc	.+10     	; 0x2dd6 <__ftoa_engine+0x9c>
    2dcc:	e7 0e       	add	r14, r23
    2dce:	f8 1e       	adc	r15, r24
    2dd0:	49 1f       	adc	r20, r25
    2dd2:	56 1f       	adc	r21, r22
    2dd4:	c1 1d       	adc	r28, r1
    2dd6:	77 0f       	add	r23, r23
    2dd8:	88 1f       	adc	r24, r24
    2dda:	99 1f       	adc	r25, r25
    2ddc:	66 1f       	adc	r22, r22
    2dde:	06 94       	lsr	r0
    2de0:	a1 f7       	brne	.-24     	; 0x2dca <__ftoa_engine+0x90>
    2de2:	05 90       	lpm	r0, Z+
    2de4:	07 94       	ror	r0
    2de6:	28 f4       	brcc	.+10     	; 0x2df2 <__ftoa_engine+0xb8>
    2de8:	f8 0e       	add	r15, r24
    2dea:	49 1f       	adc	r20, r25
    2dec:	56 1f       	adc	r21, r22
    2dee:	c7 1f       	adc	r28, r23
    2df0:	d1 1d       	adc	r29, r1
    2df2:	88 0f       	add	r24, r24
    2df4:	99 1f       	adc	r25, r25
    2df6:	66 1f       	adc	r22, r22
    2df8:	77 1f       	adc	r23, r23
    2dfa:	06 94       	lsr	r0
    2dfc:	a1 f7       	brne	.-24     	; 0x2de6 <__ftoa_engine+0xac>
    2dfe:	05 90       	lpm	r0, Z+
    2e00:	07 94       	ror	r0
    2e02:	20 f4       	brcc	.+8      	; 0x2e0c <__ftoa_engine+0xd2>
    2e04:	49 0f       	add	r20, r25
    2e06:	56 1f       	adc	r21, r22
    2e08:	c7 1f       	adc	r28, r23
    2e0a:	d8 1f       	adc	r29, r24
    2e0c:	99 0f       	add	r25, r25
    2e0e:	66 1f       	adc	r22, r22
    2e10:	77 1f       	adc	r23, r23
    2e12:	88 1f       	adc	r24, r24
    2e14:	06 94       	lsr	r0
    2e16:	a9 f7       	brne	.-22     	; 0x2e02 <__ftoa_engine+0xc8>
    2e18:	84 91       	lpm	r24, Z+
    2e1a:	10 95       	com	r17
    2e1c:	17 70       	andi	r17, 0x07	; 7
    2e1e:	41 f0       	breq	.+16     	; 0x2e30 <__ftoa_engine+0xf6>
    2e20:	d6 95       	lsr	r29
    2e22:	c7 95       	ror	r28
    2e24:	57 95       	ror	r21
    2e26:	47 95       	ror	r20
    2e28:	f7 94       	ror	r15
    2e2a:	e7 94       	ror	r14
    2e2c:	1a 95       	dec	r17
    2e2e:	c1 f7       	brne	.-16     	; 0x2e20 <__ftoa_engine+0xe6>
    2e30:	e4 e5       	ldi	r30, 0x54	; 84
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	68 94       	set
    2e36:	15 90       	lpm	r1, Z+
    2e38:	15 91       	lpm	r17, Z+
    2e3a:	35 91       	lpm	r19, Z+
    2e3c:	65 91       	lpm	r22, Z+
    2e3e:	95 91       	lpm	r25, Z+
    2e40:	05 90       	lpm	r0, Z+
    2e42:	7f e2       	ldi	r23, 0x2F	; 47
    2e44:	73 95       	inc	r23
    2e46:	e1 18       	sub	r14, r1
    2e48:	f1 0a       	sbc	r15, r17
    2e4a:	43 0b       	sbc	r20, r19
    2e4c:	56 0b       	sbc	r21, r22
    2e4e:	c9 0b       	sbc	r28, r25
    2e50:	d0 09       	sbc	r29, r0
    2e52:	c0 f7       	brcc	.-16     	; 0x2e44 <__ftoa_engine+0x10a>
    2e54:	e1 0c       	add	r14, r1
    2e56:	f1 1e       	adc	r15, r17
    2e58:	43 1f       	adc	r20, r19
    2e5a:	56 1f       	adc	r21, r22
    2e5c:	c9 1f       	adc	r28, r25
    2e5e:	d0 1d       	adc	r29, r0
    2e60:	7e f4       	brtc	.+30     	; 0x2e80 <__ftoa_engine+0x146>
    2e62:	70 33       	cpi	r23, 0x30	; 48
    2e64:	11 f4       	brne	.+4      	; 0x2e6a <__ftoa_engine+0x130>
    2e66:	8a 95       	dec	r24
    2e68:	e6 cf       	rjmp	.-52     	; 0x2e36 <__ftoa_engine+0xfc>
    2e6a:	e8 94       	clt
    2e6c:	01 50       	subi	r16, 0x01	; 1
    2e6e:	30 f0       	brcs	.+12     	; 0x2e7c <__ftoa_engine+0x142>
    2e70:	08 0f       	add	r16, r24
    2e72:	0a f4       	brpl	.+2      	; 0x2e76 <__ftoa_engine+0x13c>
    2e74:	00 27       	eor	r16, r16
    2e76:	02 17       	cp	r16, r18
    2e78:	08 f4       	brcc	.+2      	; 0x2e7c <__ftoa_engine+0x142>
    2e7a:	20 2f       	mov	r18, r16
    2e7c:	23 95       	inc	r18
    2e7e:	02 2f       	mov	r16, r18
    2e80:	7a 33       	cpi	r23, 0x3A	; 58
    2e82:	28 f0       	brcs	.+10     	; 0x2e8e <__ftoa_engine+0x154>
    2e84:	79 e3       	ldi	r23, 0x39	; 57
    2e86:	7d 93       	st	X+, r23
    2e88:	2a 95       	dec	r18
    2e8a:	e9 f7       	brne	.-6      	; 0x2e86 <__ftoa_engine+0x14c>
    2e8c:	10 c0       	rjmp	.+32     	; 0x2eae <__ftoa_engine+0x174>
    2e8e:	7d 93       	st	X+, r23
    2e90:	2a 95       	dec	r18
    2e92:	89 f6       	brne	.-94     	; 0x2e36 <__ftoa_engine+0xfc>
    2e94:	06 94       	lsr	r0
    2e96:	97 95       	ror	r25
    2e98:	67 95       	ror	r22
    2e9a:	37 95       	ror	r19
    2e9c:	17 95       	ror	r17
    2e9e:	17 94       	ror	r1
    2ea0:	e1 18       	sub	r14, r1
    2ea2:	f1 0a       	sbc	r15, r17
    2ea4:	43 0b       	sbc	r20, r19
    2ea6:	56 0b       	sbc	r21, r22
    2ea8:	c9 0b       	sbc	r28, r25
    2eaa:	d0 09       	sbc	r29, r0
    2eac:	98 f0       	brcs	.+38     	; 0x2ed4 <__ftoa_engine+0x19a>
    2eae:	23 95       	inc	r18
    2eb0:	7e 91       	ld	r23, -X
    2eb2:	73 95       	inc	r23
    2eb4:	7a 33       	cpi	r23, 0x3A	; 58
    2eb6:	08 f0       	brcs	.+2      	; 0x2eba <__ftoa_engine+0x180>
    2eb8:	70 e3       	ldi	r23, 0x30	; 48
    2eba:	7c 93       	st	X, r23
    2ebc:	20 13       	cpse	r18, r16
    2ebe:	b8 f7       	brcc	.-18     	; 0x2eae <__ftoa_engine+0x174>
    2ec0:	7e 91       	ld	r23, -X
    2ec2:	70 61       	ori	r23, 0x10	; 16
    2ec4:	7d 93       	st	X+, r23
    2ec6:	30 f0       	brcs	.+12     	; 0x2ed4 <__ftoa_engine+0x19a>
    2ec8:	83 95       	inc	r24
    2eca:	71 e3       	ldi	r23, 0x31	; 49
    2ecc:	7d 93       	st	X+, r23
    2ece:	70 e3       	ldi	r23, 0x30	; 48
    2ed0:	2a 95       	dec	r18
    2ed2:	e1 f7       	brne	.-8      	; 0x2ecc <__ftoa_engine+0x192>
    2ed4:	11 24       	eor	r1, r1
    2ed6:	ef 90       	pop	r14
    2ed8:	ff 90       	pop	r15
    2eda:	0f 91       	pop	r16
    2edc:	1f 91       	pop	r17
    2ede:	cf 91       	pop	r28
    2ee0:	df 91       	pop	r29
    2ee2:	99 27       	eor	r25, r25
    2ee4:	87 fd       	sbrc	r24, 7
    2ee6:	90 95       	com	r25
    2ee8:	08 95       	ret

00002eea <_exit>:
    2eea:	f8 94       	cli

00002eec <__stop_program>:
    2eec:	ff cf       	rjmp	.-2      	; 0x2eec <__stop_program>
