
ITI_ALEXDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000296  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003c0  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000474  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 01 	call	0x284	; 0x284 <main>
  64:	0c 94 49 01 	jmp	0x292	; 0x292 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_ErrStateSetPinDirection>:




ErrState  DIO_ErrStateSetPinDirection(u8 Copy_GroupNumber ,u8 Copy_PinNumber,u8 Copy_DirectionState)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	28 97       	sbiw	r28, 0x08	; 8
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	89 83       	std	Y+1, r24	; 0x01
  82:	6a 83       	std	Y+2, r22	; 0x02
  84:	4b 83       	std	Y+3, r20	; 0x03
	/*Input-> write Zero DDR (CLR) */
	if (Copy_DirectionState == DIO_Input )
  86:	8b 81       	ldd	r24, Y+3	; 0x03
  88:	88 23       	and	r24, r24
  8a:	09 f0       	breq	.+2      	; 0x8e <DIO_ErrStateSetPinDirection+0x22>
  8c:	77 c0       	rjmp	.+238    	; 0x17c <DIO_ErrStateSetPinDirection+0x110>
	{
		switch(Copy_GroupNumber){
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	28 2f       	mov	r18, r24
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	38 87       	std	Y+8, r19	; 0x08
  96:	2f 83       	std	Y+7, r18	; 0x07
  98:	8f 81       	ldd	r24, Y+7	; 0x07
  9a:	98 85       	ldd	r25, Y+8	; 0x08
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	91 05       	cpc	r25, r1
  a0:	59 f1       	breq	.+86     	; 0xf8 <DIO_ErrStateSetPinDirection+0x8c>
  a2:	2f 81       	ldd	r18, Y+7	; 0x07
  a4:	38 85       	ldd	r19, Y+8	; 0x08
  a6:	22 30       	cpi	r18, 0x02	; 2
  a8:	31 05       	cpc	r19, r1
  aa:	2c f4       	brge	.+10     	; 0xb6 <DIO_ErrStateSetPinDirection+0x4a>
  ac:	8f 81       	ldd	r24, Y+7	; 0x07
  ae:	98 85       	ldd	r25, Y+8	; 0x08
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	69 f0       	breq	.+26     	; 0xce <DIO_ErrStateSetPinDirection+0x62>
  b4:	60 c0       	rjmp	.+192    	; 0x176 <DIO_ErrStateSetPinDirection+0x10a>
  b6:	2f 81       	ldd	r18, Y+7	; 0x07
  b8:	38 85       	ldd	r19, Y+8	; 0x08
  ba:	22 30       	cpi	r18, 0x02	; 2
  bc:	31 05       	cpc	r19, r1
  be:	89 f1       	breq	.+98     	; 0x122 <DIO_ErrStateSetPinDirection+0xb6>
  c0:	8f 81       	ldd	r24, Y+7	; 0x07
  c2:	98 85       	ldd	r25, Y+8	; 0x08
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	91 05       	cpc	r25, r1
  c8:	09 f4       	brne	.+2      	; 0xcc <DIO_ErrStateSetPinDirection+0x60>
  ca:	40 c0       	rjmp	.+128    	; 0x14c <DIO_ErrStateSetPinDirection+0xe0>
  cc:	54 c0       	rjmp	.+168    	; 0x176 <DIO_ErrStateSetPinDirection+0x10a>
		/*Group A*/
		case DIO_GroupA : Clr_Bit(DDRA_ITI , Copy_PinNumber ) ;break ;
  ce:	aa e3       	ldi	r26, 0x3A	; 58
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	ea e3       	ldi	r30, 0x3A	; 58
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	48 2f       	mov	r20, r24
  da:	8a 81       	ldd	r24, Y+2	; 0x02
  dc:	28 2f       	mov	r18, r24
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 2e       	mov	r0, r18
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_ErrStateSetPinDirection+0x80>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_ErrStateSetPinDirection+0x7c>
  f0:	80 95       	com	r24
  f2:	84 23       	and	r24, r20
  f4:	8c 93       	st	X, r24
  f6:	bb c0       	rjmp	.+374    	; 0x26e <DIO_ErrStateSetPinDirection+0x202>
		/*Group B*/
		case DIO_GroupB: Clr_Bit(DDRB_ITI , Copy_PinNumber ) ;break ;
  f8:	a7 e3       	ldi	r26, 0x37	; 55
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	e7 e3       	ldi	r30, 0x37	; 55
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	48 2f       	mov	r20, r24
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	28 2f       	mov	r18, r24
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 2e       	mov	r0, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_ErrStateSetPinDirection+0xaa>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_ErrStateSetPinDirection+0xa6>
 11a:	80 95       	com	r24
 11c:	84 23       	and	r24, r20
 11e:	8c 93       	st	X, r24
 120:	a6 c0       	rjmp	.+332    	; 0x26e <DIO_ErrStateSetPinDirection+0x202>
		/*Group C*/
		case DIO_GroupC : Clr_Bit(DDRC_ITI , Copy_PinNumber ) ;break ;
 122:	a4 e3       	ldi	r26, 0x34	; 52
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e4 e3       	ldi	r30, 0x34	; 52
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	48 2f       	mov	r20, r24
 12e:	8a 81       	ldd	r24, Y+2	; 0x02
 130:	28 2f       	mov	r18, r24
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 2e       	mov	r0, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_ErrStateSetPinDirection+0xd4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_ErrStateSetPinDirection+0xd0>
 144:	80 95       	com	r24
 146:	84 23       	and	r24, r20
 148:	8c 93       	st	X, r24
 14a:	91 c0       	rjmp	.+290    	; 0x26e <DIO_ErrStateSetPinDirection+0x202>
		/*Group D*/
		case DIO_GroupD : Clr_Bit(DDRD_ITI , Copy_PinNumber ) ;break ;
 14c:	a1 e3       	ldi	r26, 0x31	; 49
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	e1 e3       	ldi	r30, 0x31	; 49
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	48 2f       	mov	r20, r24
 158:	8a 81       	ldd	r24, Y+2	; 0x02
 15a:	28 2f       	mov	r18, r24
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 2e       	mov	r0, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_ErrStateSetPinDirection+0xfe>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_ErrStateSetPinDirection+0xfa>
 16e:	80 95       	com	r24
 170:	84 23       	and	r24, r20
 172:	8c 93       	st	X, r24
 174:	7c c0       	rjmp	.+248    	; 0x26e <DIO_ErrStateSetPinDirection+0x202>
		/*Wrong*/
		default:
		return GroupError ;
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	9e 83       	std	Y+6, r25	; 0x06
 17a:	7a c0       	rjmp	.+244    	; 0x270 <DIO_ErrStateSetPinDirection+0x204>
		}
	}

	/*Output -> write DDR = one */
	else if (Copy_DirectionState == DIO_Output )
 17c:	8b 81       	ldd	r24, Y+3	; 0x03
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	09 f0       	breq	.+2      	; 0x184 <DIO_ErrStateSetPinDirection+0x118>
 182:	72 c0       	rjmp	.+228    	; 0x268 <DIO_ErrStateSetPinDirection+0x1fc>
	{
		switch(Copy_GroupNumber){
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	28 2f       	mov	r18, r24
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	3d 83       	std	Y+5, r19	; 0x05
 18c:	2c 83       	std	Y+4, r18	; 0x04
 18e:	8c 81       	ldd	r24, Y+4	; 0x04
 190:	9d 81       	ldd	r25, Y+5	; 0x05
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	91 05       	cpc	r25, r1
 196:	49 f1       	breq	.+82     	; 0x1ea <DIO_ErrStateSetPinDirection+0x17e>
 198:	2c 81       	ldd	r18, Y+4	; 0x04
 19a:	3d 81       	ldd	r19, Y+5	; 0x05
 19c:	22 30       	cpi	r18, 0x02	; 2
 19e:	31 05       	cpc	r19, r1
 1a0:	2c f4       	brge	.+10     	; 0x1ac <DIO_ErrStateSetPinDirection+0x140>
 1a2:	8c 81       	ldd	r24, Y+4	; 0x04
 1a4:	9d 81       	ldd	r25, Y+5	; 0x05
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	61 f0       	breq	.+24     	; 0x1c2 <DIO_ErrStateSetPinDirection+0x156>
 1aa:	5b c0       	rjmp	.+182    	; 0x262 <DIO_ErrStateSetPinDirection+0x1f6>
 1ac:	2c 81       	ldd	r18, Y+4	; 0x04
 1ae:	3d 81       	ldd	r19, Y+5	; 0x05
 1b0:	22 30       	cpi	r18, 0x02	; 2
 1b2:	31 05       	cpc	r19, r1
 1b4:	71 f1       	breq	.+92     	; 0x212 <DIO_ErrStateSetPinDirection+0x1a6>
 1b6:	8c 81       	ldd	r24, Y+4	; 0x04
 1b8:	9d 81       	ldd	r25, Y+5	; 0x05
 1ba:	83 30       	cpi	r24, 0x03	; 3
 1bc:	91 05       	cpc	r25, r1
 1be:	e9 f1       	breq	.+122    	; 0x23a <DIO_ErrStateSetPinDirection+0x1ce>
 1c0:	50 c0       	rjmp	.+160    	; 0x262 <DIO_ErrStateSetPinDirection+0x1f6>
		/*Group A*/
		case DIO_GroupA : Set_Bit(DDRA_ITI,Copy_PinNumber);break;
 1c2:	aa e3       	ldi	r26, 0x3A	; 58
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	ea e3       	ldi	r30, 0x3A	; 58
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	48 2f       	mov	r20, r24
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	28 2f       	mov	r18, r24
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 2e       	mov	r0, r18
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_ErrStateSetPinDirection+0x174>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	0a 94       	dec	r0
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_ErrStateSetPinDirection+0x170>
 1e4:	84 2b       	or	r24, r20
 1e6:	8c 93       	st	X, r24
 1e8:	42 c0       	rjmp	.+132    	; 0x26e <DIO_ErrStateSetPinDirection+0x202>
		/*Group B*/
		case DIO_GroupB : Set_Bit(DDRB_ITI,Copy_PinNumber);break;
 1ea:	a7 e3       	ldi	r26, 0x37	; 55
 1ec:	b0 e0       	ldi	r27, 0x00	; 0
 1ee:	e7 e3       	ldi	r30, 0x37	; 55
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	48 2f       	mov	r20, r24
 1f6:	8a 81       	ldd	r24, Y+2	; 0x02
 1f8:	28 2f       	mov	r18, r24
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 2e       	mov	r0, r18
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_ErrStateSetPinDirection+0x19c>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_ErrStateSetPinDirection+0x198>
 20c:	84 2b       	or	r24, r20
 20e:	8c 93       	st	X, r24
 210:	2e c0       	rjmp	.+92     	; 0x26e <DIO_ErrStateSetPinDirection+0x202>
		/*Group C*/
		case DIO_GroupC : Set_Bit(DDRC_ITI,Copy_PinNumber);break;
 212:	a4 e3       	ldi	r26, 0x34	; 52
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	e4 e3       	ldi	r30, 0x34	; 52
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	48 2f       	mov	r20, r24
 21e:	8a 81       	ldd	r24, Y+2	; 0x02
 220:	28 2f       	mov	r18, r24
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 2e       	mov	r0, r18
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_ErrStateSetPinDirection+0x1c4>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_ErrStateSetPinDirection+0x1c0>
 234:	84 2b       	or	r24, r20
 236:	8c 93       	st	X, r24
 238:	1a c0       	rjmp	.+52     	; 0x26e <DIO_ErrStateSetPinDirection+0x202>
		/*Group D*/
		case DIO_GroupD : Set_Bit(DDRD_ITI,Copy_PinNumber);break;
 23a:	a1 e3       	ldi	r26, 0x31	; 49
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	e1 e3       	ldi	r30, 0x31	; 49
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	48 2f       	mov	r20, r24
 246:	8a 81       	ldd	r24, Y+2	; 0x02
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 2e       	mov	r0, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_ErrStateSetPinDirection+0x1ec>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_ErrStateSetPinDirection+0x1e8>
 25c:	84 2b       	or	r24, r20
 25e:	8c 93       	st	X, r24
 260:	06 c0       	rjmp	.+12     	; 0x26e <DIO_ErrStateSetPinDirection+0x202>
		/*Wrong*/
		default:
			return GroupError ;
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	9e 83       	std	Y+6, r25	; 0x06
 266:	04 c0       	rjmp	.+8      	; 0x270 <DIO_ErrStateSetPinDirection+0x204>
		}
	}

	else
	{
		return DirectionError ;
 268:	22 e0       	ldi	r18, 0x02	; 2
 26a:	2e 83       	std	Y+6, r18	; 0x06
 26c:	01 c0       	rjmp	.+2      	; 0x270 <DIO_ErrStateSetPinDirection+0x204>
	}

	return NoError ;
 26e:	1e 82       	std	Y+6, r1	; 0x06
 270:	8e 81       	ldd	r24, Y+6	; 0x06
}
 272:	28 96       	adiw	r28, 0x08	; 8
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
 27e:	cf 91       	pop	r28
 280:	df 91       	pop	r29
 282:	08 95       	ret

00000284 <main>:
 *      Author: hisha
 */


void main ()
{
 284:	df 93       	push	r29
 286:	cf 93       	push	r28
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62

}
 28c:	cf 91       	pop	r28
 28e:	df 91       	pop	r29
 290:	08 95       	ret

00000292 <_exit>:
 292:	f8 94       	cli

00000294 <__stop_program>:
 294:	ff cf       	rjmp	.-2      	; 0x294 <__stop_program>
